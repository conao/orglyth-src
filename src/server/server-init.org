#+author: conao3
#+date: <2019-03-31 Sun>
#+title: さくらのVPS初期設定 Emacsインストールからnginxの設定をしてHTTPSで公開するまで

* tl;dl
さくらのVPSを契約したものの、放置していたので初期設定を行ったログです。
Emacsとnginxのインストール、HTTPSで公開までやります。

* さくらのVPSコンソール上での作業
** OSインストール
さくらのVPS画面でCentOS7をインストールする。
スタートアップスクリプトで「CentOS_LetsEncrypt」を選択し、
- ドメイン名: conao3.com
- メールアドレス: conao3@gmail.com
としてインストール実行。

なお、CentOS_LetsEncryptは次のスクリプト。
# file: CentOS_LetsEncrypt
#+begin_src shell
  #!/usr/bin/bash

  set -x

  # Environment Variables
  OS_MAJOR_VERSION=$(rpm -q --queryformat '%{VERSION}' centos-release)
  ARCH=$(arch)
  DOMAIN="@@@DOMAIN@@@"
  MAIL_ADDRESS="@@@MAIL_ADDRESS@@@"

  # Install nginx
  cat << EOF > /etc/yum.repos.d/nginx.repo
  [nginx]
  name=nginx repo
  baseurl=http://nginx.org/packages/centos/${OS_MAJOR_VERSION}/${ARCH}/
  gpgcheck=0
  enabled=1
  EOF

  yum clean all
  yum install nginx -y

  # Install cert-bot
  CPATH=/usr/local/certbot
  git clone https://github.com/certbot/certbot ${CPATH}

  # Configure firewall
  firewall-cmd --permanent --add-port={80,443}/tcp
  firewall-cmd --reload

  # Configure nginx
  LD=/etc/letsencrypt/live/${DOMAIN}
  CERT=${LD}/fullchain.pem
  PKEY=${LD}/privkey.pem

  cat << _EOF_ > https.conf
  map \$http_upgrade \$connection_upgrade {
          default upgrade;
          ''      close;
  }
  server {
          listen 443 ssl http2;
          server_name ${DOMAIN};

          location / {
                  root   /usr/share/nginx/html;
                  index  index.html index.htm;
          }

          ssl_protocols TLSv1.2;
          ssl_ciphers EECDH+AESGCM:EECDH+AES;
          ssl_ecdh_curve prime256v1;
          ssl_prefer_server_ciphers on;
          ssl_session_cache shared:SSL:10m;

          ssl_certificate ${CERT};
          ssl_certificate_key ${PKEY};

          error_page   500 502 503 504  /50x.html;
          location = /50x.html {
                  root   /usr/share/nginx/html;
          }
  }
  _EOF_

  systemctl enable nginx

  # Configure Let's Encrypt
  WROOT=/usr/share/nginx/html
  systemctl start nginx
  ${CPATH}/certbot-auto -n certonly --webroot -w ${WROOT} -d ${DOMAIN} -m ${MAIL_ADDRESS} --agree-tos --server https://acme-v02.api.letsencrypt.org/directory

  if [ ! -f ${CERT} ]
  then
          echo "証明書の取得に失敗しました"
          exit 1
  fi

  ## Configure SSL Certificate Renewal
  mv https.conf /etc/nginx/conf.d/
  R=${RANDOM}
  echo "$((R%60)) $((R%24)) * * $((R%7)) root ${CPATH}/certbot-auto renew --webroot -w ${WROOT} --post-hook 'systemctl reload nginx'" > /etc/cron.d/certbot-auto

  systemctl restart nginx
  exit 0
#+end_src

** ユーザー作成
rootであまり作業したくないので作業ユーザーを作る。
#+begin_src shell
  useradd -m conao3
  usermod -G wheel conao3
  passwd conao3
  su conao3
#+end_src

** SSHの設定
GitHubから公開鍵を入手して設定し、適切な設定を行う。
使いづらいWebコンソールから早く離脱する。

~sshd_config~ の設定は
- 無設定
- Port変更
- パスワード認証の禁止
の順に「前の段階のSSH接続を維持しながら」段階的に行う。

SSHの設定をミスっても前の接続が残っていれば再設定できるが、閉じてしまうと再ログインできなくて詰む。
#+begin_src shell
  cd
  mkdir .ssh
  chmod 700 .ssh
  cd .ssh
  curl https://github.com/conao3.keys > authorized_keys
  chmod 600 authorized_keys

  sudo firewall-cmd --add-port=52674/tcp --zone=public --permanent
  sudo firewall-cmd --reload

  sudo diff /etc/ssh/sshd_config /etc/ssh/sshd_config.old
  # 17c17
  # < Port 52674
  # ---
  # > #Port 22
  # 38c38
  # < PermitRootLogin no
  # ---
  # > #PermitRootLogin yes
  # 65c65
  # < PasswordAuthentication no
  # ---
  # > PasswordAuthentication yes
#+end_src

* SSH越しの作業
** ローカルSSHの設定
# file: ~/.ssh/config
#+begin_src conf
  ServerAliveInterval 60

  Host sakura-vps
    HostName 133.167.106.15
    IdentityFile ~/.ssh/id_rsa
    Port 52674
    User conao3
#+end_src

** bashの設定
最低限PATHの設定が必要。私のdotfilesを使ってもよいが、最低限として次の設定は必要。
# file: .bash_profile
#+begin_src shell
  export PATH=$HOME/.local/bin:$HOME/bin:$PATH
#+end_src

#+begin_src shell
  cd
  git clone https://github.com/conao3/dotfiles.git .dotfiles
  cd .dotfiles
  make
  make install
#+end_src

** Emacsのビルド
人権を確保するために、Emacsをビルドする。
~yum~ で入るバージョンは古いし、後で自由度が高くなるので自前でソースビルドする。

ビルドの流れは以下。 ~autogen~ や ~configure~ でいろいろ怒られるので、
下記の章を参考に依存パッケージを入れる。
#+begin_src shell
  cd
  mkdir -p .local/work cd .local/work
  git clone https://git.savannah.gnu.org/git/emacs.git
  
  cd emacs
  git checkout emacs-26.1
  ./autogen.sh
  ./configure --prefix=$HOME/.local
  make
  make install
#+end_src

*** CUIビルド
CUIのEmacsを使うために以下のパッケージが必要。
**** texinfo
#+begin_example
configure: error: You do not seem to have makeinfo >= 4.13, and your
source tree does not seem to have pre-built manuals in the 'info' directory.
Either install a suitable version of makeinfo, or re-run configure
with the '--without-makeinfo' option to build without the manuals.
#+end_example

#+begin_src shell
  sudo yum install -y texinfo
#+end_src

**** gnutls
#+begin_example
configure: error: The following required libraries were not found:
     gnutls
Maybe some development libraries/packages are missing?
If you don't want to link with them give
     --with-gnutls=no
as options to configure
#+end_example

#+begin_src shell
  sudo yum install -y gnutls-devel
#+end_src

**** ncurses
#+begin_example
configure: error: The required function 'tputs' was not found in any library.
The following libraries were tried (in order):
  libtinfo, libncurses, libterminfo, libcurses, libtermcap
Please try installing whichever of these libraries is most appropriate
for your system, together with its header files.
For example, a libncurses-dev(el) or similar package.
#+end_example

#+begin_src shell
  sudo yum install -y ncurses-devel
#+end_src

**** configure
#+begin_example
Configured for 'x86_64-pc-linux-gnu'.

  Where should the build process find the source code?    .
  What compiler should emacs be built with?               gcc -std=gnu11 -g3 -O2
  Should Emacs use the GNU version of malloc?             yes
      (Using Doug Lea's new malloc from the GNU C Library.)
  Should Emacs use a relocating allocator for buffers?    no
  Should Emacs use mmap(2) for buffer allocation?         no
  What window system should Emacs use?                    none
  What toolkit should Emacs use?                          none
  Where do we find X Windows header files?                NONE
  Where do we find X Windows libraries?                   NONE
  Does Emacs use -lXaw3d?                                 no
  Does Emacs use -lXpm?                                   no
  Does Emacs use -ljpeg?                                  no
  Does Emacs use -ltiff?                                  no
  Does Emacs use a gif library?                           no
  Does Emacs use a png library?                           no
  Does Emacs use -lrsvg-2?                                no
  Does Emacs use cairo?                                   no
  Does Emacs use -llcms2?                                 no
  Does Emacs use imagemagick (version 6)?                 no
  Does Emacs support sound?                               yes
  Does Emacs use -lgpm?                                   no
  Does Emacs use -ldbus?                                  no
  Does Emacs use -lgconf?                                 no
  Does Emacs use GSettings?                               no
  Does Emacs use a file notification library?             yes -lglibc (inotify)
  Does Emacs use access control lists?                    no
  Does Emacs use -lselinux?                               yes
  Does Emacs use -lgnutls?                                yes
  Does Emacs use -lxml2?                                  no
  Does Emacs use -lfreetype?                              no
  Does Emacs use -lm17n-flt?                              no
  Does Emacs use -lotf?                                   no
  Does Emacs use -lxft?                                   no
  Does Emacs use -lsystemd?                               no
  Does Emacs directly use zlib?                           yes
  Does Emacs have dynamic modules support?                no
  Does Emacs use toolkit scroll bars?                     no
  Does Emacs support Xwidgets (requires gtk3)?            no
  Does Emacs have threading support in lisp?              yes
#+end_example
*** GUIビルド
~gtk~ のようなGUI環境を見つけると、さらに画像ライブラリを要求するようになる。
**** gtk3
#+begin_src shell
  sudo yum install -y gtk3-devel
#+end_src

#+begin_example
configure: error: The following required libraries were not found:
    libXpm libjpeg libgif/libungif libtiff
Maybe some development libraries/packages are missing?
If you don't want to link with them give
    --with-xpm=no --with-jpeg=no --with-gif=no --with-tiff=no
as options to configure
#+end_example

#+begin_src shell
  sudo yum install -y ImageMagick-devel libXpm-devel giflib-devel
#+end_src

**** libxml
libxmlをリンクすると使える関数が増えるので、リンクすることをおすすめする。
#+begin_src shell
  sudo yum install -y libxml2-devel
#+end_src

**** configure
#+begin_example
Configured for 'x86_64-pc-linux-gnu'.

  Where should the build process find the source code?    .
  What compiler should emacs be built with?               gcc -std=gnu11 -g3 -O2
  Should Emacs use the GNU version of malloc?             yes
      (Using Doug Lea's new malloc from the GNU C Library.)
  Should Emacs use a relocating allocator for buffers?    no
  Should Emacs use mmap(2) for buffer allocation?         no
  What window system should Emacs use?                    x11
  What toolkit should Emacs use?                          GTK3
  Where do we find X Windows header files?                Standard dirs
  Where do we find X Windows libraries?                   Standard dirs
  Does Emacs use -lXaw3d?                                 no
  Does Emacs use -lXpm?                                   yes
  Does Emacs use -ljpeg?                                  yes
  Does Emacs use -ltiff?                                  yes
  Does Emacs use a gif library?                           yes -lgif
  Does Emacs use a png library?                           yes -L/usr/lib64 -lpng15
  Does Emacs use -lrsvg-2?                                no
  Does Emacs use cairo?                                   no
  Does Emacs use -llcms2?                                 no
  Does Emacs use imagemagick (version 6)?                 yes
  Does Emacs support sound?                               yes
  Does Emacs use -lgpm?                                   no
  Does Emacs use -ldbus?                                  yes
  Does Emacs use -lgconf?                                 no
  Does Emacs use GSettings?                               yes
  Does Emacs use a file notification library?             yes -lglibc (inotify)
  Does Emacs use access control lists?                    no
  Does Emacs use -lselinux?                               yes
  Does Emacs use -lgnutls?                                yes
  Does Emacs use -lxml2?                                  yes
  Does Emacs use -lfreetype?                              yes
  Does Emacs use -lm17n-flt?                              no
  Does Emacs use -lotf?                                   no
  Does Emacs use -lxft?                                   yes
  Does Emacs use -lsystemd?                               no
  Does Emacs directly use zlib?                           yes
  Does Emacs have dynamic modules support?                no
  Does Emacs use toolkit scroll bars?                     yes
  Does Emacs support Xwidgets (requires gtk3)?            no
  Does Emacs have threading support in lisp?              yes
#+end_example
** nginxの設定
~/var/www~ をnginxが参照するディレクトリに設定し、ホームディレクトリにシンボリックリンクを張る。

~/var/www~ をconao3の持ち物にしてもよいが、nginxグループの人が編集できるように設定しておいた。
（他ユーザーがこのサーバーに入ることは想定していないが。。）

Let's Encryptの設定をしているので、httpへのリクエストはすべてhttpsにリダイレクトするようにした。
# file: nginx.conf
#+begin_src conf
  user  nginx;
  worker_processes  1;

  error_log  /var/log/nginx/error.log warn;
  pid        /var/run/nginx.pid;


  events {
      worker_connections  1024;
  }

  http {
      server_tokens      off;
      charset            UTF-8;
      sendfile           on;
      tcp_nopush         on;
      keepalive_timeout  65;

      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;
      include /etc/nginx/conf.d/*.conf;
  }
#+end_src

# file: conf.d/default.conf
#+begin_src conf
  server {
      listen       80;
      server_name  localhost;
      return       301 https://$host$request_uri;
  }
#+end_src

# file: conf.d/https.conf
#+begin_src conf
  map $http_upgrade $connection_upgrade {
          default upgrade;
          ''      close;
  }
  server {
          listen 443 ssl http2;
          server_name conao3.com;

          location / {
                  #root   /usr/share/nginx/html;
                  root   /var/www/orglyth;
                  index  index.html index.htm;
          }

          ssl_protocols TLSv1.2;
          ssl_ciphers EECDH+AESGCM:EECDH+AES;
          ssl_ecdh_curve prime256v1;
          ssl_prefer_server_ciphers on;
          ssl_session_cache shared:SSL:10m;

          ssl_certificate /etc/letsencrypt/live/conao3.com/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/conao3.com/privkey.pem;

          error_page   500 502 503 504  /50x.html;
          location = /50x.html {
                  root   /usr/share/nginx/html;
          }
  }
#+end_src

#+begin_src shell
  cd /var
  sudo mkdir www
  sudo chmod 775 www
  sudo chown nginx:nginx /var/www
  sudo chmod 2775 /var/www

  cd
  ln -s /var/www www
#+end_src
