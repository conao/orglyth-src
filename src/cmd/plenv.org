#+title: plenv
#+subtitle: pyenvをリスペクトしたperl用バージョン管理コマンド
#+date: <2018-08-11 Sat 14:11>
#+author: conao
#+orglyth-tags: emacs elisp org-mode org-macs

# history
# <2018-08-11 Sat 14:11> first draft

* =plenv= とは
=plenv= とは =pyenv= をリスペクトしたperl用バージョン管理コマンドです。

=pyenv= と同じ操作感でperlのバージョン管理を行うことができます。

* インストール
=anyenv= を使ってインストールします。
=anyenv= のインストールをされていない方は[[./anyenv.org][こちら]]

#+begin_src shell -n
  > anyenv versions
  goenv:
  Warning: no Go detected on the system

  ndenv:
  ,* v10.7.0 (set by /Users/conao/.anyenv/envs/ndenv/version)
  plenv:
  ,* system (set by /Users/conao/.anyenv/envs/plenv/version)
  pyenv:
    system
  ,* 2.7.15 (set by /Users/conao/.anyenv/envs/pyenv/version)
  ,* 3.7.0 (set by /Users/conao/.anyenv/envs/pyenv/version)
  rbenv:
  ,* system (set by /Users/conao/.anyenv/envs/rbenv/version)

  > plenv install --list
  Available versions:
   5.29.1
   5.29.0
   5.28.0
   5.28.0-RC4
   5.28.0-RC3
   5.28.0-RC2
   5.28.0-RC1
   5.27.11
   5.27.10
   ...

  $ plenv install 5.26.1
  $ plenv versions
  ,* system (set by /Users/conao/.anyenv/envs/plenv/version)
    5.26.1
  $ plenv global 5.26.1
  $ perl -v

  This is perl 5, version 26, subversion 1 (v5.26.1) built for darwin-2level
  (with 1 registered patch, see perl -V for more detail)

  Copyright 1987-2017, Larry Wall

  Perl may be copied only under the terms of either the Artistic License or the
  GNU General Public License, which may be found in the Perl 5 source kit.

  Complete documentation for Perl, including FAQ lists, should be found on
  this system using "man perl" or "perldoc perl".  If you have access to the
  Internet, point your browser at http://www.perl.org/, the Perl Home Page.
#+end_src

* 599 Internal Exceptionエラーが出る場合
#+begin_src shell -n
  $ pyenv install --list
  Available versions:
  599 Internal Exception, https://fastapi.metacpan.org/v1/release/_search,
  Can't verify SSL peers without knowing which Certificate Authorities to trust  
  This problem can be fixed by either setting the PERL_LWP_SSL_CA_FILE envirionment 
  variable or by installing the Mozilla::CA module.  
  To disable verification of SSL peers set the PERL_LWP_SSL_VERIFY_HOSTNAME 
  envirionment variable to 0.  
  If you do this you can't be sure that you communicate with the expected peer.'
#+end_src
githubの[[https://github.com/miyagawa/HTTP-Tinyish/issues/14][issue]]より次のパッチを当てる。
#+begin_src diff -n
  --- perl-build-bak	2018-08-11 14:07:11.000000000 +0900
  +++ perl-build	2018-08-11 14:08:21.000000000 +0900
  @@ -10258,7 +10258,7 @@ $fatpacked{"HTTP/Tinyish/HTTPTiny.pm"} =
   HTTP_TINYISH_HTTPTINY

   $fatpacked{"HTTP/Tinyish/LWP.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'HTTP_TINYISH_LWP';
  -  package HTTP::Tinyish::LWP;use strict;use parent qw(HTTP::Tinyish::Base);use LWP 5.802;use LWP::UserAgent;my%supports=(http=>1);sub configure {my%meta=(LWP=>$LWP::VERSION,);if (eval {require LWP::Protocol::https;1}){$supports{https}=1;$meta{"LWP::Protocol::https"}=$LWP::Protocol::https::VERSION}\%meta}sub supports {$supports{$_[1]}}sub new {my($class,%attr)=@_;my$ua=LWP::UserAgent->new;bless {ua=>$class->translate_lwp($ua,%attr),},$class}sub _headers_to_hashref {my($self,$hdrs)=@_;my%headers;for my$field ($hdrs->header_field_names){$headers{lc$field}=$hdrs->header($field)}\%headers}sub request {my($self,$method,$url,$opts)=@_;$opts ||= {};my$req=HTTP::Request->new($method=>$url);if ($opts->{headers}){$req->header(%{$opts->{headers}})}if ($opts->{content}){$req->content($opts->{content})}my$res=$self->{ua}->request($req);if ($self->is_internal_response($res)){return$self->internal_error($url,$res->content)}return {url=>$url,content=>$res->decoded_content(charset=>'none'),success=>$res->is_success,status=>$res->code,reason=>$res->message,headers=>$self->_headers_to_hashref($res->headers),protocol=>$res->protocol,}}sub mirror {my($self,$url,$file)=@_;my$res=$self->{ua}->mirror($url,$file);if ($self->is_internal_response($res)){return$self->internal_error($url,$res->content)}return {url=>$url,content=>$res->decoded_content,success=>$res->is_success || $res->code==304,status=>$res->code,reason=>$res->message,headers=>$self->_headers_to_hashref($res->headers),protocol=>$res->protocol,}}sub translate_lwp {my($class,$agent,%attr)=@_;$agent->parse_head(0);$agent->env_proxy;$agent->timeout(delete$attr{timeout}|| 60);$agent->max_redirect(delete$attr{max_redirect}|| 5);$agent->agent(delete$attr{agent}|| "HTTP-Tinyish/$HTTP::Tinyish::VERSION");unless ($attr{verify_SSL}){if ($agent->can("ssl_opts")){$agent->ssl_opts(verify_hostname=>0)}}if ($attr{default_headers}){$agent->default_headers(HTTP::Headers->new(%{$attr{default_headers}}))}$agent}sub is_internal_response {my($self,$res)=@_;$res->code==500 && ($res->header('Client-Warning')|| '')eq 'Internal response'}1;
  +  package HTTP::Tinyish::LWP;use strict;use parent qw(HTTP::Tinyish::Base);use LWP 5.802;use LWP::UserAgent;my%supports=(http=>1);sub configure {my%meta=(LWP=>$LWP::VERSION,);if (eval {(require LWP::Protocol::https;1) && (require Mozilla::CA; 1)}){$supports{https}=1;$meta{"LWP::Protocol::https"}=$LWP::Protocol::https::VERSION}\%meta}sub supports {$supports{$_[1]}}sub new {my($class,%attr)=@_;my$ua=LWP::UserAgent->new;bless {ua=>$class->translate_lwp($ua,%attr),},$class}sub _headers_to_hashref {my($self,$hdrs)=@_;my%headers;for my$field ($hdrs->header_field_names){$headers{lc$field}=$hdrs->header($field)}\%headers}sub request {my($self,$method,$url,$opts)=@_;$opts ||= {};my$req=HTTP::Request->new($method=>$url);if ($opts->{headers}){$req->header(%{$opts->{headers}})}if ($opts->{content}){$req->content($opts->{content})}my$res=$self->{ua}->request($req);if ($self->is_internal_response($res)){return$self->internal_error($url,$res->content)}return {url=>$url,content=>$res->decoded_content(charset=>'none'),success=>$res->is_success,status=>$res->code,reason=>$res->message,headers=>$self->_headers_to_hashref($res->headers),protocol=>$res->protocol,}}sub mirror {my($self,$url,$file)=@_;my$res=$self->{ua}->mirror($url,$file);if ($self->is_internal_response($res)){return$self->internal_error($url,$res->content)}return {url=>$url,content=>$res->decoded_content,success=>$res->is_success || $res->code==304,status=>$res->code,reason=>$res->message,headers=>$self->_headers_to_hashref($res->headers),protocol=>$res->protocol,}}sub translate_lwp {my($class,$agent,%attr)=@_;$agent->parse_head(0);$agent->env_proxy;$agent->timeout(delete$attr{timeout}|| 60);$agent->max_redirect(delete$attr{max_redirect}|| 5);$agent->agent(delete$attr{agent}|| "HTTP-Tinyish/$HTTP::Tinyish::VERSION");unless ($attr{verify_SSL}){if ($agent->can("ssl_opts")){$agent->ssl_opts(verify_hostname=>0)}}if ($attr{default_headers}){$agent->default_headers(HTTP::Headers->new(%{$attr{default_headers}}))}$agent}sub is_internal_response {my($self,$res)=@_;$res->code==500 && ($res->header('Client-Warning')|| '')eq 'Internal response'}1;
   HTTP_TINYISH_LWP

   $fatpacked{"HTTP/Tinyish/Wget.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'HTTP_TINYISH_WGET';
#+end_src

見にくいですが、170桁くらいのif文を変更します。
#+begin_src diff -n
  - if (eval {require LWP::Protocol::https;1})
  + if (eval {(require LWP::Protocol::https;1) && (require Mozilla::CA; 1)})
#+end_src
