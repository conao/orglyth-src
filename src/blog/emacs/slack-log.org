* beginner-helps
** session.el - 2017/09/11
sfus [10:40]
質問なんですが、Emacs 25 (25.2.1)に上げたら session.el が動かなくなったって方いらっしゃいます？
emacs -Q -l el-get/session/session.el
(session-save-session) ⇛ C-x C-c
emacs -Q -l el-get/session/session.el
(session-initialize) で戻らない所まで確認…  (session-version 2.4b)

syohex [10:43]
上げる前のバージョンはなんでしょうか ?

sfus [10:43]
24系です (マイナーバージョンは忘れました…）

takaxp [10:46]
当方 25.2.1+2.3a(fromMELPA) で動いております．.session を一度クリア（Emacs終了後に削除）すると幸せになるかもしれません．

syohex [10:47]
今までホームディレクトリにできていたのが, ~/.emacs.d/以下にできてしまった的なやつ ?

sfus [10:51]
うーん、もともと
 (setq session-save-file (expand-file-name "~/.emacs.d/.session"))
は指定していたのと、.session 消したけどやはり動かない…のです。
とはいえ動いているのであればこちらの問題っぽいですよね。もうちょっと調べてみます

takaxp [10:52]
ちなみにMac+野良ビルド+emacsclientは使ってない環境です．

sfus [10:53]
melpa から参照されている github の session.el のバージョンちょっと古い…？
https://github.com/emacsorphanage/session/blob/master/session.el
2.3a jtte
GitHub
emacsorphanage/session
Use variables, registers and buffer places across sessions
ってなってますね

takaxp [10:53]
そんな気がします．
2.4 の頒布リポジトリを教えてもらえますか？Caskで取って動くか確認してみます．

sfus [10:55]
(el-get-bundle session) で取ってきてるので…どこかな…

syohex [10:59]
> (session-initialize) で戻らない所まで確認

session.elのことがよくわかっていないのですが, 戻らないというのは具体的に何が戻らないのでしょうか?

sfus [11:00]
とはいえ 2.3a でも動かず。
開いていたファイルとか、コマンド履歴とかですね

syohex [11:05]
私の手元では履歴とかは戻る感じですね. 25.2, 26.0で動いています.

takaxp [11:06]
保存している .session と 読み込みの .session が違うとか（syohex さんがすでに言ってますけど）

sfus [11:10]
*Messages* に
Loading /Users/ユーザ名/.emacs.d/.session...done
って出てるので同じはず… というか、
たしかに上記のミニマム起動でコマンド履歴は戻ってました… すみません
なんか通常起動時に、呼んでないはずの recentf とかに副作用受けてそうな気がします

takaxp [11:13]
Emacs終了後に .recentf と .session を同時消しをTryですね．

sfus [11:19]
しばらくハマってたんですが問題の箇所に目星が付きました…ありがとうございますｍｍ

syohex [11:22]
.recentfは消していると, ~/.emacs.d/recentfとしてできてしまうはず.

(locate-user-emacs-file "recentf" ".recentf")

と書くと, ~/に .recentfがあればそれを使い, なければ user-dir以下に recentfを作る. 昔からあるパッケージは 24ぐらいのタイミングでこうなっています.

takaxp [12:11]
(defcustom recentf-save-file (locate-user-emacs-file “recentf” “.recentf”)
 “File to save the recent list into.”
ですねφ(. _. ) カスタマイズしていたから気づかなかった．なるほど．

** CP932 font table 2017/10/06
lurdan [15:01]
NTEmacs に CP932 用の文字変換テーブルの設定をしようとして困っておるのですが、どなたかご教示お願いできませんか
https://gist.github.com/lurdan/818ec2b943d51d82c59ce9f081c82b80
このメモから「？」をなくしたいのですが行き詰まってしまっており……

katz [18:23]
自分も色々いじくりまわした末に

(set-coding-system-priority 'cp932 'euc-jp 'iso-2022-jp 'utf-8)
;; UTF-8の変換テーブル修正
;; 参考：http://opabin.sblo.jp/article/108689425.html
(mapc
(lambda (coding-system)
  (coding-system-put coding-system :decode-translation-table
                     '(japanese-ucs-jis-to-cp932-map))
  (coding-system-put coding-system :encode-translation-table
                     '(japanese-ucs-cp932-to-jis-map)))
'(utf-8 utf-16le))
;; iso-2022-jp, euc-jp, sjis の変換テーブル修正
(mapc
(lambda (coding-system)
  (coding-system-put coding-system :decode-translation-table
                     '(cp51932-decode japanese-ucs-jis-to-cp932-map))
  (coding-system-put coding-system :encode-translation-table
                     '(cp51932-encode japanese-ucs-cp932-to-jis-map)))
'(iso-2022-jp euc-jp japanese-shift-jis))
こうやって落ち着きましたが、正解かどうか分かりません。 （編集済み） 


lurdan [01:12]
私が見ていたページはEmacs23時代のものが多かったので、そちらの設定の方が現状に即してるようですね
参考にします。ありがとうございます！

** font 2018/05/03
kakakaya [02:45]
今まで Debian Stretch 上の Emacs 24.x （Spacemacs使用中）に Ricty-Diminished 使ってたんですが、Debian Buster(testing) にアップグレードして Emacs 25.x に更新したところ日本語の部分が明朝体みたいになってしまいました。
同様の現象が起きた方いますか？

takaxp [09:29]
ちなみにどのフォントになりましたかね．当該文字で M-x describe-char するとわかります( ' -')b

kakakaya [11:25]
｀xft:-PfEd-Unifont-normal-normal-normal-*-13-*-*-*-d-0-iso10646-1｀ になってました。
英数字はちゃんと ｀xft:-PfEd-Ricty Diminished-normal-normal-normal-*-13-*-*-*-*-0-iso10646-1｀ になってて謎いです

takaxp [15:02]
ふむー．set-fontset-font を使って日本語のフォント群に Ricty Diminished を当てると希望通りになるかもです． （編集済み） 

kakakaya [15:04]
ありがとうございます！一瞬で解決しました

takaxp [15:05]
あら素敵( ' -')b

kakakaya [15:06]
Spacemacs側の ｀dotspacemacs-default-font｀ で設定したけど、もしかしてこれがちゃんと仕事してなかった説……？

takaxp [15:09]
https://miyazakikenji.wordpress.com/2016/08/30/%E6%97%A5%E6%9C%AC%E8%AA%9E-font-%E3%81%AE%E5%B0%8E%E5%85%A5/
miyazakikenjikenjimyzk
日本語 font の導入
前回 に続いて spacemacs の私の設定を紹介する.

Ricty Diminished

spacemacsで日本語のフォントとして, Ricty Diminished を導入する. もとは Ricty である. Rictyは全角空白が明示されたり, 等倍でプログラム作成に非常に便利なフォントである. この&#125… もっと表示する
" dotspacemacs-default-font を変更するよう書かれていたが, わたしの設定ではうまくいっていない.”
フォント周りは魔境なのでがんばりましょうw

kakakaya [15:56]
一応Emacs24.xでは上手く行ってたんですけどね……手探りしつつやるしかない

** list-memq 2018/11/18
conao3 [03:56]
｀｀｀(defun srt-listmemq (symlist list)
  "Return t if LIST contained element of SYMLIST."
  (not
   (not
    (let ((result))
      (mapcar (lambda (x) (setq result (or x result)))
          (mapcar (lambda (x) (memq x list)) symlist))
      result))))

(srt-listmemq '(g h a) '(a b c d e f))
;; => t

(srt-listmemq '(g h) '(a b c d e f))
;; => nil｀｀｀
失礼します。
あるシンボル集合symlistがシンボル集合listの要素に含まれているかどうかを返す関数を作成しました。

conao3 [04:00]
｀｀｀(let ((symlist '(g h a))
      (list '(a b c d e f)))
  (mapcar (lambda (x) (memq x list)) symlist))
;; => (nil nil (a b c d e f))｀｀｀
(1) 一番深いところのmapcarはこのようなリストを返してくるんですが、このリストから ｀t｀ を得られるような関数はありますでしょうか？
例えば(nil nil nil,,,)だと ｀nil｀ , (nil t nil nil,,,)だと ｀t｀ が返ってくるイメージです。

conao3 [04:05]
｀｀｀(defun fun-or (&rest args)
  (let ((result))
    (mapc (lambda (x) (setq result (or x result))) args)
    result))

(defmacro srt-digest (fn list)
  (srt-with-gensyms (result)
    `(let ((,result))
       (mapc (lambda (x) (setq ,result (funcall ,fn x ,result))) ,list)
       ,result)))

(srt-collect 'or '(nil nil t))
;; Debugger entered--Lisp error: (invalid-function #<subr or>)

(srt-collect 'fun-or '(nil nil t))
;; => t｀｀｀
(2) listから一定のルールで一つの値を返すdigestを作ってみたのですが、 ｀or｀ が ｀funcall｀ できなくて辛いです。。
こういう場合 ｀fun-or｀ とかいう一時的な関数を作らないといけないのでしょうか？？

syohex [22:02]
> (1) 一番深いところのmapcarはこのようなリストを返してくるんですが、このリストから ｀t｀ を得られるような関数はありますでしょうか？
例えば(nil nil nil,,,)だと ｀nil｀ , (nil t nil nil,,,)だと ｀t｀ が返ってくるイメージです。

一つの関数はないように思えるので ｀(lambda (c) (not (null c)))｀ ですかね.

syohex [22:28]
orは  emacsでは special formなので funcallは無理ですね. if等と同じで. マクロも無理ですが.  それらのものは何らかの形で関数として定義するようにして適用するとなるでしょうか.

conao3 [23:06]
ありがとうございます。
すいません、示してもらったlambda式はつまりどのように使用すればよいのでしょうか。。

2番目に関してはlambda式を忘れていたので、少しかっこ悪いですが以下のようにすると解決できることがわかりました。
｀｀｀(srt-digest (lambda (a b) (or a b)) '(nil nil nil))
;; => nil

(srt-digest (lambda (a b) (or a b)) '(nil nil t))
;; =>t｀｀｀

syohex [01:13]
> 示してもらったlambda式はつまりどのように使用すればよいのでしょうか。。

対象のリストにmapcarなりで適用すればよいかと.

conao3 [01:18]
伝え方が悪くて申し訳ないです。
それはつまり ｀(nil nil (a b c d e f))｀ から ｀(nil nil t)｀ を得られると思いますが、そこから ｀t｀ という値を得たいと思っています。
この場合、 ｀srt-digest｀ のような関数が必要になるでしょうか？

syohex [09:44]
｀｀｀(cl-reduce (lambda (a b) (or (not (null a)) (not (null b)))) '(nil nil (a b c d)))

(cl-loop for i in '(nil nil (a b c))
     unless (null i)
     return t)｀｀｀

｀reduce｀とか loopを使ってですかね.

conao3 [10:10]
なるほど。ありがとうございます！
cl系の力はすごいですね。。

conao3 [17:51]
別の調べごとをしていたのですが、 ｀defun｀ のソースに面白いコードがありました。
｀defun｀ のソースにおいて、 ｀arglist｀ の検証を
｀｀｀(if (null
       (and (listp arglist)
            (null (delq t (mapcar #'symbolp arglist)))))
      (error "Malformed arglist: %s" arglist))｀｀｀
で行っており、 ｀delq｀ は第2引数のリストから第1引数の要素を消す関数のようです。（elispでは ｀nil｀ 以外が ｀t｀ なので ｀nil｀ を消して全部消えるか確かめたほうが良いと思いますが。。）
つまり今回の件にも応用でき、
｀｀｀(delq nil '(nil nil (a b) nil (a)))
;; => ((a b) (a))

(not (not (delq nil '(nil nil (a b) nil (a)))))
;; => t

(not (not (delq nil '(nil nil nil nil nil))))
;; => nil｀｀｀
と出来ました。関数を使っているので途中で処理を終えるなど、賢い判定はできませんが。。

** lamda-let 2018/11/22
conao3 [03:01]
無題 
(defvar srt-test-cases nil)
​
(defmacro srt-deftest (name keys)
 (declare (indent 1))
 `(add-to-list 'srt-test-cases '(,name ,keys) t))
​
(defun srt-run-tests ()
 (dolist (test srt-test-cases)
  (let ((name (car test))
	 (keys (cadr test)))
   (srt-test keys))))
​
(defun srt-test (keys)
 (let ((fn (lambda (keys)
	   (when keys
		(princ (format "%s, " (car keys)))
		(funcall fn (cdr keys))))))
  (funcall fn keys)
  (princ "\n")))
​
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
​
emacs-version
"25.3.1"
​
(srt-deftest simple:equal
 (:equal '(a b c) '(a b c)))
​
(srt-run-tests)
:equal, _
nil
Debugger entered--Lisp error: (void-variable fn)
​
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
emacs-version
"22.1.1"
​
(srt-run-tests)
:equal, (quote (a b c)), (quote (a b c)),
nil
折りたたむ 

conao3 [03:08]
letでlambdaを束縛して再帰的に実行したいのですが、Emacs-22, Emacs-23でのみ実行が可能で、それより新しいEmacsでは実行できません。。
このテクニックはOnLispのalambdaをlabelsからletに変えて手書きしたものなのですが、Emacs-24からは実行できないのでしょうか。
http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/anaphoricMacros.html
https://travis-ci.org/conao3/srt.el/builds/458064398
asahi-net.or.jp
On Lisp --- アナフォリックマクロ
Paul Graham氏の著書On Lispの邦訳を無償で公開しています．Common Lispのマクロに関する貴重な情報がいっぱいです．

syohex [03:23]
｀labels｀(｀cl-labels｀)を使うのではだめなのでしょうか ? 古いバージョンでいけるのは lexical-scopeでなく dynamic scopeだからです.

conao3 [03:35]
なるほど。そういう違いがあるんですね。
実際、alamdaをcl-labelsを使って展開したらただのletになったので、上の書き方で行けるものと思っていました。
｀｀｀(defmacro alambda (parms &rest body)
  `(cl-labels ((self ,parms ,@body))
     #'self))
alambda

alambda

(pp (macroexpand '(alambda (x) (if (= x 0) 1 (* x (self (1- x)))))))
(let
    (--cl-self--)
  (setq --cl-self--
    #'(lambda
        (x)
        (if
        (= x 0)
        1
          (* x
         (funcall --cl-self--
              (1- x))))))
  --cl-self--)｀｀｀

conao3 [03:42]
無題 
(eval-when-compile
 (require 'cl))
​
(unless (fboundp 'cl-labels)
 (defalias 'cl-labels 'labels))
このコードだと、すべてのEmacsでエラーが出ます。。

syohex [11:28]
lexical-bindingの実装のために ｀--cl-%s--｀なシンボル名になるから, 外部からはその名前を使って参照することはできないようです.

conao3 [12:37]
なるほど。。 ｀self｀ もとい ｀--cl-%s--｀ はalmabdaの中で使ってるのでletの中で参照しているように見えますが。。
もう一度考えてみます。

syohex [12:44]
bodyの中に出てくる方ですね

｀｀｀(let
    (--cl-self--)
  (setq --cl-self--
    #'(lambda
        (keys)
        (if keys
        (progn
          (princ
           (format "%s, "
               (car keys)))
          (funcall self
               (cdr keys))))))
  --cl-self--)｀｀｀

関数は ｀--cl-self--｀だけど, bodyのは ｀self｀のまま展開されるので.

conao3 [16:49]
確かにそう展開されました。ただフィボナッチの方は ｀self｀ が ｀--cl-self--｀ に展開されているのに、僕のリストを書き下す関数は展開されていないのが不思議になってしまいました。。
また内部の ｀self｀ を ｀--cl-self--｀ に変えてもvoid-variableエラーが発生しました。。
｀｀｀(funcall
 (let
     (--cl-self--)
   (setq --cl-self--
     #'(lambda (keys)
         (if keys
         (progn
           (princ (format "%s, " (car keys)))
           (funcall --cl-self-- (cdr keys))))))
   --cl-self--)
 '(a b c))
;; a, _
;; => Debugger entered--Lisp error: (void-variable --cl-self--)｀｀｀

** 標準出力と標準エラー出力を振り分ける 2018/11/26
conao3 [12:49]
cort.el(srt.elの重複パッケージを見つけたので改名しました)で ｀princ｀ ｀error｀ によって ｀--batch｀ 出力の標準出力と標準エラー出力を振り分けているのですが、テストが多くなってきた(30個)のと、全バージョン(5種)でチェックするようにしたので出力が多すぎるようになってきました。
テスト関数に ｀princ｀ と ｀error｀ が散らばっているのでテスト関数を ｀with-temp-buffer｀ などで囲んで出力場所を変えようと思ったのですが、変わらず標準出力、エラーに出てしまいます。
バッチ環境ではエコーの振り分けはできないのでしょうか？？

conao3 [12:57]
一応調査として https://ayatakesi.github.io/emacs/24.5/Initial-Options.html や変数 ｀standard-output｀ などを見ました。
ayatakesi.github.io
GNU Emacs Manual(Japanese Translation): Initial Options
GNU Emacs Manual(Japanese Translation): Initial Options

** Elispで正規表現 2018/11/26
motchang [16:22]
すみません、 search-forward-regexp や align-regexp の引数に正規表現を入力する場合にメタキャラクタをエスケープしないといけないのはなぜなのかちょっとよくわからないのですが、どのような情報に当たればよいかご存知の方いらっしゃいますか？ （編集済み） 

syohex [16:26]
正規表現として入力しているわけではなくて, 文字列として入力してそれを正規表現として解釈するので, 文字列として解釈する部分のためですかね. JavaScriptでいうと正規表現リテラルを使っているのでなくて全部 new RegExpで書いている的な.

motchang [16:32]
そうか、そうですね。そう思ってしまえば単純な話でした :祈る:

syohex [16:34]
正規表現リテラルを足すという提案は何度か却下されていた気がするので入ることはなさそう... (rx等を使えとかだったかな)

motchang [16:52]
な、なるほど〜...

conao3 [18:37]
蛇足ですが、ちょこっと書いてみました。cortで使われてるコードです。
reで作られる正規表現をすっと書くのは難しいですね。。
無題 
(let ((keyname (prin1-to-string :cort-emacs<)))
 (when (string-match (rx (group “:cort-“)
			 (group (or “emacs” “if”))
			 (? (group (or “<” “<=” “=” “>=” “>”))))
           keyname)
  (let ((c 0) (match))
   (while (setq match (match-string c keyname))
	(princ (format “%d: %s\n” c match))
	(incf c)))))
;; => 0: :cort-emacs<
;;  1: :cort-
;;  2: emacs
;;  3: <
;; nil
​
​
(rx (group “:cort-“)
  (group (or “emacs” “if”))
  (? (group (or “<” “<=” “>=” “=” “>”))))
;; => “\\(:cort-\\)\\(\\(?:emacs\\|if\\)\\)\\(\\(?:[<>]=\\|[<=>]\\)\\)?”
​
(princ (format “%s\n” “\\(:cort-\\)\\(\\(?:emacs\\|if\\)\\)\\(\\(?:[<>]=\\|[<=>]\\)\\)?“))
;; => \(:cort-\)\(\(?:emacs\|if\)\)\(\(?:[<>]=\|[<=>]\)\)?
;; “\\(:cort-\\)\\(\\(?:emacs\\|if\\)\\)\\(\\(?:[<>]=\\|[<=>]\\)\\)?
;; ”
折りたたむ 
pythonみたいにraw文字列を指定できたりとかしたら簡単になるのかもしれませんが、汚くなるので入ることはないでしょうね。。

shun [22:13]
確かに正規表現はrxの方が良いかもしれませんが、それ以外の用途も考えるとraw文字列はあった方が良いと思うんですけどねぇ…

shun [22:28]
ところで、もし仮にraw文字列リテラルを導入するとなった場合、どんな構文が可能なのでしょうか？

syohex [22:55]
Clojureだと正規表現リテラルで ｀#"hoge"｀ってのはありますね. reader macroがあればユーザ側で自由に定義できそうな気もしますが.

shun [01:19]
ありがとうございますm(_ _)m
なるほど。良い感じですね。
reader macroは初めて聞いたのですが、軽くググってみたところすごく便利そうですね。

conao3 [02:30]
elispでリーダーマクロほしいですね。。リーダーマクロが与える自由度はマクロのそれと同等だと思います。
以前、非常にためになったlisping :at nowさんでは、最後にリーダマクロ、マクロ、コンパイラマクロを紹介されているのですが、elispではそのうちマクロのみ使用可能ということでしょうか。 http://riktor.hatenablog.com/entry/2012/08/14/235214
(lisping :at now)
Lispでマクロ - (lisping :at now)
Lispと言ったらマクロです。マクロが無いLispなんて使いたくありません。 というわけで、今回はとうとうLispを知らない人はその真髄を知ることのないマクロのお話です。 大上段に構えて、マクロとは、という説明をすることもできるのですが、そういうことばかりしていると嫌われるので、どんなことができるのか何故マクロでなければならないのか、というのが知らない人にとっては知りたい事だと考えています。 ・マクロを書く前に さて、では説明といく前に、一つだけ確認しておくことがあります。 Lispという言語の持つ特徴、異常な量の括弧、それがどんな意味を持つのか何故あんな見た目でなければならないのかという、誰…
2012年8月14日

** lsp-ruby 2018/12/01
katsyoshi [12:26]
どなたか lsp-ruby 使ってるひといませんか

takaxp [17:23]
私は使ってない… というかをRuby書けない ‘-’;

conao3 [18:09]
lsp-rubyは使ってませんが、lspに興味あります。
lsp-rubyを使う上でなにか問題があるのですか？

takaxp [18:30]
https://github.com/emacs-lsp/lsp-ruby
emacs-lsp/lsp-ruby
Emacs LSP support for Ruby, using the language_server gem
Stars
9
Language
Emacs Lisp
emacs-lsp/lsp-ruby2018年6月12日投稿したメンバー: GitHub

katsyoshi [19:59]
Selection_004.png 

lsp-rubyというより solargraph の問題だと思うんですが => がHTML エスケープされて表示されるのどうしたらいいのか悩んでて

takaxp [20:48]
基本的なところで残念な感じですね．サーバ側の問題なら他のエディタでもきっと同じ結果ですよね

takaxp [21:18]
https://microsoft.github.io/language-server-protocol/implementors/servers/
microsoft.github.io
Language Servers
If you are missing a server please create a pull request in GitHub against this markdown document Language Maintainer Repository ...
Ruby のLSPは 3つあるのねφ(. _. )

yoshitia [21:23]
melpaからパッケージダウンロードできなくなってるorz

conao3 [21:25]
本当ですね。ついさっきはできたのに。。

yoshitia [21:52]
一回 M-x package-list-packages して
接続の設定の確認っぽいのでAlways選択したら解決した

conao3 [22:13]
時間おいたら直りました。
別件ですが、lsp-modeが依存関係をきちんと書いてないみたいで、fとhtがないと怒られますね

yoshitia [22:16]
lsp-modeは未使用なもので
f.elとht.elのことか

conao3 [22:17]
そうですね。
lsp以前見かけて面白いなーと思っていたので、今回いい機会なので設定してみてます

yoshitia [22:20]
根っこがVimmerなんで今年のVimConf行ってきましたが話題に上ってましたね＞lsp
試した感じVimよりNeovimの方がlsp関係のプラグインまともに動くっぽい

conao3 [22:23]
なるほど。
Emacsには強力なそれぞれのメジャーモードとflycheckなどのマイナーモードがあるので腰は重いですが、ここまでエディタが乱立すると抽象化レイヤー挟んで共有しようよという流れは分かります。

yoshitia [22:28]
各エディタでプログラミング言語対応の機能をバラバラに開発ってのはコスト高いですよね
VimConfで話題になってたのはVim本体側でlsp対応やって欲しい、というのがユーザーのリクエストで多かったってことですね

conao3 [22:38]
なるほど。Emacsのそういう場はない？ので本体に入れてもらうとしたらEmacs-devにメール送りまくって認知してもらった後に交渉とかになるのかな？？
個人的にはdash.elとかs.elとかf.elとかは本体に入れてほしい。。

yoshitia [22:40]
Emacsで本体ソースコードへの取り込みのやり方はわからないですね・・・
Vimならvim-jpで本体パッチ通した経験ある人が相談乗ってくれます
VimはBramだけがコミット権利もってるのでBramにパッチ送って問題なければコミットしてもらえる感じ
ものによっては最初にバッチ出して◯年後に取り込んでもらったって話もあるw

conao3 [22:46]
Vimのその話、Vim-jpの方で @takaxp さんが話題出されてるの見ました。
Emacsは @shougo さんが言ってたように本体側の最低限の機能使って高層ビル立てる文化のような。。

yoshitia [22:54]
lispの古い文化にとりあえず後々使いそうなものを作った後は何もせずに放置ってのがあったようなw

conao3 [23:01]
作って放置はちょっとわかりませんが、Lispの表現力が高すぎるがゆえにどんな書き方でもできる側面があると思います。
本体のCやLispの関数はよく考えられて作られてると思うのでできるだけそちらを使おうと、暇を見つけて読むようにしてます

yoshitia [23:08]
時々インストールしたパッケージのelisp見る程度なので本体のCやelispも読んでいかなきゃですね

conao3 [23:10]
そうですね。結構新たな発見があって面白いです。

conao3 [23:17]
最近の発見は
｀｀｀(< 24 emacs-major-version)
;; => t｀｀｀
とするんじゃなくて、 ｀version<｀ などの関数が用意されてるのでそれ使ったほうが良いってことですね。
｀version-to-list｀ のソースを見てもらえれば分かりますが、とても注意深く書かれてます。（脱線）

yoshitia [23:27]
｀｀｀(version< emacs-version "24") :: => nil｀｀｀ 
（編集済み）
こういうふうに変わるのか
"24.3"とかマイナーバージョンにも対応とは・・・

conao3 [23:34]
そうですね。 ｀emacs-version｀ が文字列を返すので、そのフォーマットに従って文字列で渡す必要があります。
Emacsのバージョンを指定するには4つの数字で必要十分なことが分かったり、発見が多かったです。
(それはそうと ｀lsp-ruby｀ が動かない。。そもそも ｀lsp-ruby-enable｀ ってどこで定義されてるんだろうか。。)

yoshitia [23:54]
lsp-modeの関数を呼び出して生成するっぽく見える＞lsp-ruby-enable

conao3 [00:04]
なるほど。
｀｀｀(require 'lsp-mode)
(require 'lsp-ruby)
(add-hook 'ruby-mode-hook #'lsp-ruby-enable)｀｀｀
したんですが、 ｀lsp-ruby-enable｀ ができてないっぽく ｀(void-function lsp-ruby-enable)｀ が起こる。。

yoshitia [00:05]
rubyのlspは起動してますか？
もしくはコマンドラインでlsp起動可能な状態になってるか
rubyだとsolargraphだっけか

conao3 [00:12]
solargraph server
と叩いて ｀Could not find command "server".｀ と怒られますね。 ｀solagraph -v｀ は0.29.1を返してきてます

yoshitia [00:18]
solargraph --help でserverってオプションないとかかな・・・

conao3 [00:20]
それでした。 https://github.com/castwide/solargraph/blob/master/SERVER.md これにたどり着いてやってみてたんですが、最初の注意文を読んでなかった。。
SERVER.md
｀｀｀# Solargraph Server Documentation

**NOTE: The legacy web server is deprecated and no longer available as of gem version 0.21.0. This document is archived for the benefit of extensions and plugins that still use it. Client implementors should use the [language server protocol](LANGUAGE_SERVER.md) instead.**

## Running the Server｀｀｀
 もっと表示する
castwide/solargraph投稿したメンバー: GitHub

yoshitia [00:22]
あとlsp-modeの設定まわりの関数はlsp-ruby.el内のlsp-define-xxxあたりで呼び出してるっぽいですね

conao3 [00:26]
lsp-ruby を ｀eval-buffer｀ したら定義されました。
サーバーも ｀solargraph socket｀ で7658ポート使って上がったようです。
lsp-rubyが起動している ｀ruby-mode｀ でなにか文字を打つたびに下のエラーが出ますね。
なにか初歩的なところをミスってそうなのでとりあえずもう一回最初からやります。。
無題 
Debugger entered--Lisp error: (wrong-number-of-arguments (3 . 3) 2)
  lsp--render-on-hover-content(#<hash-table equal 2/65 0x40f19e41> t)
  #f(compiled-function (input0) #<bytecode 0x40e98525>)(#<hash-table equal 1/65 0x40f19e21>)
  #f(compiled-function (result) #<bytecode 0x40b3d2d9>)(#<hash-table equal 1/65 0x40f19e21>)
  lsp--parser-on-message(#s(lsp--parser :waiting-for-response nil :response-result nil :headers nil :body nil :reading-body nil :body-length nil :body-received nil :leftovers "" :queued-notifications nil :queued-requests nil :workspace #s(lsp--workspace :parser #1 :file-versions #<hash-table equal 1/65 0x40b24c85> :server-capabilities #<hash-table equal 10/65 0x40f06fc5> :registered-server-capabilities (#s(lsp--registered-capability :id "textDocument/formatting" :method "textDocument/formatting" :options #<hash-table equal 1/65 0x40468235>)) :root "/Users/conao/Develop/ruby/test/" :client #s(lsp--client :language-id #f(compiled-function (_) #<bytecode 0x40f3a141>) :send-sync nil :send-async nil :type nil :new-connection #f(compiled-function (filter sentinel) #<bytecode 0x40f3a18d>) :stderr "*lsp-ruby stderr*" :get-root #f(compiled-function () #<bytecode 0x40462b6d>) :ignore-regexps nil :ignore-messages nil :notification-handlers #<hash-table equal 0/65 0x40f3a199> :request-handlers #<hash-table equal 0/65 0x40f3a471> :response-handlers #<hash-table eql 6/65 0x40f3a491> :string-renderers (("ruby" . lsp-ruby--render-string)) :last-id 7 :enable-function lsp-ruby-enable :prefix-function nil :uri-handlers #<hash-table equal 0/65 0x40f3a8c1> :action-handlers #<hash-table equal 0/65 0x40f3acc1> :default-renderer nil :use-native-json nil) :change-timer-disabled nil :proc #<process lsp-ruby> :cmd-proc #<process lsp-ruby> :buffers (#<buffer test.rb>) :highlight-overlays #<hash-table eq 0/65 0x40b25691> :extra-client-capabilities nil :status nil :metadata #<hash-table equal 0/65 0x40f287cd> :watches #<hash-table equal 0/65 0x40b1a851> :workspace-folders nil)) "{\"jsonrpc\":\"2.0\",\"id\":7,\"result\":{\"contents\":{\"kind\":\"markdown\",\"value\":\"[Kernel#p](solargraph:/document?query=Kernel%23p)\\n\\n(*args) =&gt; Object\\n\\nFor each object, directly writes _obj_.+inspect+ followed by a  \\nnewline to the program’s standard output.\\n\\n```\\nS = Struct.new(:name, :state)\\ns = S['dave', 'TX']\\np s\\n```\\n\\n_produces:_\\n\\n```\\n#<S name=\\\"dave\\\", state=\\\"TX\\\">\\n```\\n\"}}}")
  #f(compiled-function (proc output) #<bytecode 0x40b1a871>)(#<process lsp-ruby> "Content-Length: 395\015\n\015\n{\"jsonrpc\":\"2.0\",\"id\":7,\"result\":{\"contents\":{\"kind\":\"markdown\",\"value\":\"[Kernel#p](solargraph:/document?query=Kernel%23p)\\n\\n(*args) =&gt; Object\\n\\nFor each object, directly writes _obj_.+inspect+ followed by a  \\nnewline to the program\342\200\231s standard output.\\n\\n```\\nS = Struct.new(:name, :state)\\ns = S['dave', 'TX']\\np s\\n```\\n\\n_produces:_\\n\\n```\\n#<S name=\\\"dave\\\", state=\\\"TX\\\">\\n```\\n\"}}}")

yoshitia [00:32]
oh.. こちらでも動くように頑張ってみますorz

yoshitia [01:47]
んー、、、solargraph側とlsp-mode側のどっちかが相手側に渡す引数の数間違えてる以上のことはわからんですねorz

yoshitia [03:08]
lsp-mode, lsp-ui, lsp-ruby, company, company-lsp
このあたりのパッケージをインストールして設定したら動きました。

katsyoshi [10:16]
lsp-rubyは基本的にstdioで動かします。が、TCPモードでもうごきます。
tcpで動かす場合は  ｀solargraph socket｀ で動き始めます

conao3 [11:43]
無題 
(use-package company)
(use-package lsp-mode
 :config
 (use-package company-lsp
  :config
これで動きました。 @yoshitia さん、ありがとうございます。
そしてエスケープされる件も再現しました。後で調べてみます。

** 初心者ガイド 2018/12/04
takaxp [21:16]
2012年の post ですけども http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/
jesshamrick.com
Absolute Beginner's Guide to Emacs - Jessica Hamrick
I’ve been using Emacs () as my primary text editor for several years now. It takes some getting used to – the keyboard shortcuts are …
｀C-h C-h｀ いきなり知らないコマンドだった

peccu [21:52]
emacs -qのときに文字を消そうとして良く呼び出してしまいます

grugrut [09:19]
｀man man｀ 的な （編集済み） 

** warn 2018/12/05
conao3 [13:56]
ターミナルから ｀--batch｀ で起動したとき、 ｀warn｀ を使えば標準エラー出力に出力できたのですが、Warning (emacs): などの接頭辞をつけたくありません。
｀warn｀ のソースを読んで見てるのですが、Warningsバッファに書き込んでいて、なぜこれで標準エラー出力されるのかわかならない状況です。。

syohex [20:28]
表示に ｀message｀が使われていて, messageのドキュメントを見ると

｀｀｀In batch mode, the message is printed to the standard error stream, followed by a newline.｀｀｀

とあります.

conao3 [22:53]
なるほど。Warningsバッファへの書き込みじゃなくて、次のブロックの ｀message｀ で表示されていたのですね。ありがとうございます。

** bound-and-true-p 2018/12/11
conao3 [19:49]
use-packageのソースを読んでるのですが、よくわからないところがあったので質問させてください。
                ｀｀｀(when (assoc package (bound-and-true-p
                                      package-pinned-packages))
                  (package-read-all-archive-contents))｀｀｀
という部分があるのですが、 ｀package｀ は ｀nil｀ か ｀'helm｀ などの値になっていて、 ｀bound-and-true-p｀ はboolを返すので、このwhen節はどうやっても実行されない気がします。 ｀(assoc nil nil)｀ も ｀nil｀ を返すことを確認しました。
2箇所もあるのでなにか見落としている意味があるのか。。？と思っています。
https://github.com/jwiegley/use-package/blob/master/use-package-ensure.el#L168-L169
use-package-ensure.el:168-169
                ｀｀｀(when (assoc package (bound-and-true-p
                                      package-pinned-packages))｀｀｀
jwiegley/use-package投稿したメンバー: GitHub
無題 
;; use-package の展開例
(defmacro p (form)
 "Output expand given FORM."
 `(progn
   (pp (macroexpand-1 ',form))
   nil))
p
​
(setq use-package-expand-minimally t)
t
​
(p (use-package helm :pin melpa-stable :ensure t))
(progn
 (use-package-pin-package 'helm "melpa-stable")
 (use-package-ensure-elpa 'helm '(t) 'nil)
 (require 'helm nil nil))
nil
​
(p (use-package helm :ensure t))
(progn
 (use-package-ensure-elpa 'helm '(t) 'nil)
 (require 'helm nil nil))
nil
折りたたむ 

syohex [20:15]
｀bound-and-true-p｀は bool(t or nil)ではなく, boundされている変数であればそれ自身を返します.

｀｀｀(defvar hoge '(1 2 3))
(bound-and-true-p hoge)
; => (1 2 3)
(bound-and-true-p hige)
; => nil｀｀｀

ドキュメントにも下記の通りあります. 関数名的に若干ややこしいですが.

> Return the value of symbol VAR if it is bound, else nil.

conao3 [20:19]
なるほど！ありがとうございます。Edebugでtではなくnilが返ってきてるのを注意深く見ておくべきでしたね。
思い込みで早とちりしてしまいました。。

** byte-compile on Emacs-22 2018/12/12
conao3 [15:32]
またレガシーEmacsの話をして申し訳ないです。
Emacs-22には ｀declare-function｀ がないようなのですが、Emacs-22の時代にはバイトコンパイラに「他のファイルで定義されている」と伝える方法はなかったのでしょうか。
Emacs-22のソースを見たのですが、 ｀declare-function｀ が使っている ｀(advertised-calling-convention｀ がそもそも定義されていないようです。
実際ワーニングは無視すればいいだけの話なのですが、 Emacs-22だけ ｀Symbol's value as variable is void: package-install｀ で実行時に落ちてしまうんですよね。。
バイトコンパイルした ｀.elc｀ を削除して ｀.el｀ を読み込むようにすると正常に実行できるのが謎です。。

conao3 [16:52]
問題になっていそうなところを抜き出したところ、このファイルでも再現しました。
｀(package-install)｀ は実行されてないはずなんですけど。。
無題 
;; Emacs-22においてdeclare-function絡みの実行エラー
;; バイトコンパイルするときだけ表面化する？？
​
;; $ /usr/bin/emacs -Q --batch -L ./ -f batch-byte-compile emacs-22-bc1.el
;; In toplevel form:
;; emacs-22-bc1.el:9:19:Warning: reference to free variable `package-install'
;; 
;; In end of data:
;; emacs-22-bc1.el:20:1:Warning: the following functions are not known to be
;;   defined: declare-function, package-install
;; Wrote /Users/conao/Develop/git/playground/elisp/emacs-22-bc1.elc
;; 
;; $ /usr/bin/emacs -Q --batch -L ./ -l emacs-22-bc1.elc -f test
;; Symbol's value as variable is void: package-install
;; 
;; $ /usr/bin/emacs -Q --batch -L ./ -l emacs-22-bc1.el -f test
;; test ok.
​
(unless (fboundp 'declare-function)
 (defmacro declare-function (_fn _file &rest _args)
  "Tell the byte-compiler that function FN is defined, in FILE."
  nil))
​
(declare-function package-install "package")
​
(defvar leaf-backend/:ensure nil)
​
(defun leaf-handler/:ensure (name)
 (if leaf-backend/:ensure
   (package-install name)))
​
(defun test ()
 (leaf-handler/:ensure 'foo)
 (princ "test ok."))
折りたたむ 

ayatakesi [17:50]
マニュアルとか読んだだけですが...
1. declare-functionはEmacs-23で導入。目的は正にwarning抑制
http://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS.23#n2030

2. el/elcどちらでも、warning有無を別とするならどちらでも実行は可能な筈(拙訳より。Emacs23マニュアルでも同様の記述でした)
https://ayatakesi.github.io/emacs/24.5/elisp_html/Declaring-Functions.html#Declaring-Functions

するとel/elcでloadの処理が異なる、ということで、調べるとelではeagerマクロ展開なるものが行われるらしい
https://ayatakesi.github.io/emacs/24.5/elisp_html/How-Programs-Do-Loading.html#How-Programs-Do-Loading

で、そっからリンク先にある情報によると、マクロはel/elcでちょっと異なるみたいです
https://ayatakesi.github.io/emacs/24.5/elisp_html/Compiling-Macros.html#Compiling-Macros

関係あるかしら？
ayatakesi.github.io
Declaring Functions (GNU Emacs Lisp Reference Manual)
Declaring Functions (GNU Emacs Lisp Reference Manual)
ayatakesi.github.io
How Programs Do Loading (GNU Emacs Lisp Reference Manual)
How Programs Do Loading (GNU Emacs Lisp Reference Manual)
ayatakesi.github.io
Compiling Macros (GNU Emacs Lisp Reference Manual)
Compiling Macros (GNU Emacs Lisp Reference Manual)

conao3 [18:05]
情報ありがとうございます！Emacs-23.4以上だと ｀.elc｀ でも動くので、Emacs-22のバイトコンパイラのバグかな。。と思っています。
また時間がある時に ｀.elc｀ の中身を読んでみたいと思います（アドベントカレンダーの締切が。。笑）

buzztaiki [20:35]
昔は bytecompile 時の warning 除けには eval-after-load と autoload を使ってたような気がします。
https://github.com/wanderlust/wanderlust/blob/d1df17c48972e006a7f74f7145461365576e2201/wl/wl-demo.el#L73 とか。
wl/wl-demo.el:73
｀｀｀;; Avoid byte compile warnings.｀｀｀
wanderlust/wanderlust投稿したメンバー: GitHub

conao3 [20:39]
情報ありがとうございます！ ｀autoload｀ で上の ｀emacs-22-bc1.el｀ を書き換えてみます！

takaxp [20:43]
｀autoload｀ 魔除けは未だに使ってますわ…

conao3 [20:48]
emacs-22-bc1-autoload.el 
;; Emacs-22においてdeclare-function絡みの実行エラー
;; => autoloadを使うことにより解決！！
​
;; $ /usr/bin/emacs -Q --batch -L ./ -f batch-byte-compile emacs-22-bc1-autoload.el
;; In end of data:
;; emacs-22-bc1-autoload.el:32:1:Warning: the function `package-install' is not
;;   known to be defined.
;; Wrote /Users/conao/Develop/git/playground/elisp/emacs-22-bc1-autoload.elc
;; 
;; $ /usr/bin/emacs -Q --batch -L ./ -l emacs-22-bc1-autoload.elc -f test
;; test ok.
;; $ /usr/bin/emacs -Q --batch -L ./ -l emacs-22-bc1-autoload.el -f test
;; test ok.
;;
;; $ rm emacs-22-bc1-autoload.elc
;; $ emacs-26.1 -Q --batch -L ./ -f batch-byte-compile emacs-22-bc1-autoload.el
;; $ emacs-26.1 -Q --batch -L ./ -l emacs-22-bc1-autoload.elc -f test
;; test ok.
;; $ emacs-26.1 -Q --batch -L ./ -l emacs-22-bc1-autoload.el -f test
;; test ok.
​
(eval-when-compile
 (autoload 'pacakge-install "package"))
​
(defvar leaf-backend/:ensure nil)
​
(defun leaf-handler/:ensure (name)
 (if leaf-backend/:ensure
   (package-install name)))
​
(defun test ()
 (leaf-handler/:ensure 'foo)
 (princ "test ok."))
折りたたむ 
解決しました！（ワーニングは何故か出てますが。。）
ありがとうございます！！

** ヘッダー部を取り除く 2018/12/20
conao3 [21:03]
GitHubにS式のオブジェクトを文字列であらかじめ出力しておいたファイルを置いておいて、それを変数にセットしたいと思っています。
ファイルの内容をダウンロードするのは出来たのですが、ヘッダー部を取り除く簡単な方法があれば教えていただけばと。。
内容は以下のようになっています。
無題 
(with-current-buffer
  (url-retrieve-synchronously
   "https://raw.githubusercontent.com/conao3/feather-recipes/master/recipe-lite.el"
   'silent 'inhibit-cookies)
 (buffer-string))
"HTTP/1.1 200 OK
Content-Security-Policy: default-src 'none'; style-src 'unsafe-inline'; sandbox
Strict-Transport-Security: max-age=31536000
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-XSS-Protection: 1; mode=block
ETag: \"7e865b87411ed18358fc6d6e55fb81e8e483febc\"
Content-Type: text/plain; charset=utf-8
Cache-Control: max-age=300
X-Geo-Block-List:
X-GitHub-Request-Id: E4CE:32A8:2537F59:2718ECF:5C1B83AA
Content-Encoding: gzip
Content-Length: 385
Accept-Ranges: bytes
Date: Thu, 20 Dec 2018 12:02:17 GMT
Via: 1.1 varnish
Connection: keep-alive
X-Served-By: cache-tyo19931-TYO
X-Cache: HIT
X-Cache-Hits: 3
X-Timer: S1545307337.373470,VS0,VE0
Vary: Authorization,Accept-Encoding
Access-Control-Allow-Origin: *
X-Fastly-Request-ID: d79758f60b64330885f034719d3c0913a4580f33
Expires: Thu, 20 Dec 2018 12:07:17 GMT
Source-Age: 286
(:0blayout
  (:props
  (:url \"https://github.com/etu/0blayout\"
   :maintainer \"Elis \\\"etu\\\" Axelsson\"
   :authors (\"Elis \\\"etu\\\" Axelsson\")
   :keywords (\"convenience\" \"window-management\")
   :commit \"873732ddb99a3ec18845a37467ee06bce4e61d87\")
  :type \"single\"
  :desc \"Layout grouping with ease\"
  :deps nil
  :ver (20161008 607))
 :0xc
 (:props
  (:url \"http://github.com/AdamNiederer/0xc\"
  :commit \"12c2c6118c062a49594965c69e6a17bb46339eb2\")
  :deps (:s (1 11 0)
     :emacs (24 4))
  :ver (20170126 353))
 :2048-game
 (:props
  (:url \"https://bitbucket.org/zck/2048.el\")
  :deps nil
  :ver (20151026 1933)))
"
折りたたむ 

conao3 [21:10]
バッファーなので、いつもの操作のように、
「バッファー最下部へ移動」→「前のS式に移動」→「S式を選択」→「マーク範囲を切り出し」で行けるのですが、これがベストソリューションなの。。？と思っています。。

syohex [22:42]
｀url-http-end-of-headers｀にヘッドの末尾のポイントが設定されるので,

｀｀｀(with-current-buffer
    (url-retrieve-synchronously
     "https://raw.githubusercontent.com/conao3/feather-recipes/master/recipe-lite.el"
     'silent 'inhibit-cookies)
  (goto-char url-http-end-of-headers)
  (buffer-substring-no-properties
   (point) (point-max)))｀｀｀

のようにすればヘッダ部分を取り除けます. 面倒だったら curl 等の外部コマンドを使うのが楽かとおもいます.

conao3 [22:59]
なるほど！ありがとうございます。

kosh [02:54]
｀｀｀(with-temp-buffer
  (url-insert-file-contents "https://httpbin.org/get")
  (buffer-string))｀｀｀
一応こういう方法もあります (silent,inhibit-cookies オプションが利用できないけど..)

conao3 [15:25]
ありがとうございます！

** 2018/12/21
別件なのですが、帯域絞ったインターネットでファイルのダウンロードすると、EMP版のEmacsでは「Contacting host...」で完全に止まるのですが、Pure Emacs!のEmacsだとダウンロード状況を教えてくれます。これはEMP版のみの不具合ですか？
Capture 2018-12-21 15.13.06.png 


takaxp [15:28]
おや不思議

conao3 [15:30]
EMP版で使われてると思われるスクリプトを使って野良ビルドしたEmacs-24, 25, 26があるのですが、すべてハングしてるみたいに止まるんですよね。。

takaxp [15:40]
Region has 4043 lines, 172930 words, and 1423569 characters.
レスポンス処理できてないのかな

syohex [16:24]
表示は url-show-statusが non-nil or nilで表示・非表示が決まりますが, url-httpでは常に無効にしているので手を加えない限りは ｀Reading...｀は出ないように思え, 出ない方が正常かと思われます. 詳しく見ていませんが, 自分で advice-add等しないとダメなのではないかという気がする. （編集済み） 

conao3 [16:28]
あ、Pure Emacs!の方がPureじゃなかった可能性があるんですね。というかEmacs24からデフォルトが変わってるのでしょうか、、
プロンプトが出た方が人間には優しいの思うので、feather.elではそのオプションをオンにして実装したいと思います。
ありがとうございました！

syohex [16:35]
｀｀｀(advice-add 'url-display-percentage :before
        (lambda (fmt perc &rest args)
          (setq-local url-show-status t)))


(with-current-buffer (url-retrieve-synchronously "https://ftp.gnu.org/pub/gnu/emacs/emacs-21.4a.tar.gz"))｀｀｀

こんなことをしないと表示されなかった.

takaxp [16:38]
イカス．割り込みでダウンロード中止はできますっけ

syohex [16:42]
なんとも言えない挙動... できることもあればできないこともある気が. 自分で適切にハンドリングした方が良さそうに思える(詳細を見ていないですが)

takaxp [16:44]
ゾンビにならないように切り離したプロセスを消す部分は実装されているっぽいですね（コードざっと見ただけです

** 2018/12/28
tomoya [13:36]
今回のEmacsのセットアップは、できる限りの設定を customize で行うことに挑戦しています。
とりあえず、Mac だと Cmd+, ですぐに customize に入れるのは便利だけど、検索するのにいちいち2行下に移動しないといけないのが面倒に感じてきました

conao3 [13:44]
｀custom-set-variables｀ で設定されたものはinit.elが汚れるので ｀(setq custom-file (locate-user-emacs-file "custom.el"))｀ によって別ファイルに隔離しているのですが、このファイルがいつ読み込まれるのか理解してません。。

takaxp [13:47]
私はバイトコンパイル時の魔除けとして使っているだけ、と告白します。

tomoya [13:51]
途中から customize を使うと init.el が汚れる印象を受けるけど、真っ新の状態で customize を使えば汚されるという印象はないですね。むしろ、自動生成。

conao3 [13:52]
複数パッケージで customize を使うとどんなinit.elが生成されるんでしょうか。init.el公開されてます？
私のcustom.elにはpackage.elが勝手に書き込む ｀package-selected-packages｀ しかないですね。
いい感じにパッケージでソートされるとかだったら後で見返しても見やすいと思うんですが、、

tomoya [13:55]
init.el 
(defvar user-backup-directory (locate-user-emacs-file "backups")
 "This variable is define backup directory for users")
​
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-save-file-name-transforms
  `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" ,user-backup-directory t)))
 '(custom-enabled-themes '(spacemacs-dark))
 '(custom-safe-themes
  '("bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" default))
 '(diff-hl-flydiff-mode t)
 '(diff-hl-margin-mode t)
 '(find-file-visit-truename t)
 '(global-auto-revert-mode t)
 '(global-diff-hl-mode t)
 '(global-hl-line-mode t)
 '(global-whitespace-mode t)
 '(helm-split-window-preferred-function 'split-window-sensibly)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(initial-frame-alist
  '((width . 272)
   (height . 82)
   (top . 0)
   (left . 0)
   (left-fringe . 0)))
 '(menu-bar-mode nil)
 '(package-archives
  '(("melpa" . "https://melpa.org/packages/")
   ("gnu" . "https://elpa.gnu.org/packages/")))
 '(package-selected-packages '(magit helm-descbinds helm diff-hl spacemacs-theme))
 '(recentf-max-saved-items 100000)
 '(recentf-mode t)
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(split-height-threshold nil)
 '(tab-width 4)
 '(tool-bar-mode nil)
 '(whitespace-display-mappings
  '((space-mark 12288
         [9633])
   (newline-mark 10
          [182 10])
   (tab-mark 9
        [187 9]
        [92 9])))
 '(whitespace-space-regexp "\\(　+\\)")
 '(whitespace-style
  '(face trailing tabs spaces lines newline empty indentation big-indent space-after-tab space-before-tab space-mark tab-mark newline-mark)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
​
(defun my-before-save-hooks ()
 "My before save hooks"
 (delete-trailing-whitespace))
​
(add-hook 'before-save-hook 'my-before-save-hooks)
​
;; Key bindings
(define-key global-map (kbd "s-t") 'helm-for-files)
(define-key global-map (kbd "M-g s") 'magit-status)
​
;; Helm
(helm-descbinds-mode)
折りたたむ 
公開してないので、いま一から作ってるものをはりつけておきますね

conao3 [13:56]
なるほど。 ｀custom-set-variables｀ に辞書順で追記される形になるんですね。
きちんとプレフィックスが設定されてればパッケージ順になる。。か。組み込み変数はばらばらになりそうですね
各パッケージはちゃんとグループの親子関係などを記述してるので、それをもとに追記してもらえればinit.el単体でも見返して分かりやすいと思うんですが。。

conao3 [14:06]
実際こういう形をEmacsの開発者は想定してるのだと思います。パッケージの ｀require｀ ｀autoload｀ をpackage.elに丸投げして、設定が必要ならcustomizeで行うというフロー。

takaxp [14:07]
カスタム変数の入力部分だけ切り出して、ブラウザで設定できないものか。

conao3 [14:08]
それ前に話出てましたね。結構気になってます

takaxp [14:10]
Emacsの設計思想を逸脱すると、某所で怒られたw

conao3 [14:11]
実際customizeのUIはCUIの範囲でとても頑張ってると思いますが、新しい進化としてその方向があってもいいと（私は）思います。

** 2018/12/28
conao3 [14:11]
ちなみに前の飲みの時に話に出た、packageのインストール方法ですが、 ｀package-selected-packages｀ の設定が行われた後に ｀(package-install-selected-packages)｀ を呼ぶことで指定したパッケージの一括インストールが出来ます。

おそらく最近入ったもので、Emacs-jpの記事が書かれたときにはなかったものだと思っています。
https://emacs-jp.github.io/packages/package-management/package-el
emacs-jp.github.io
package.el - Emacs JP
パッケージ管理ツール

takaxp [14:21]
内容的にはdependenciesの記載パッケージも入れる、ってことかしら。

conao3 [14:23]
｀package-selected-packages｀ のDOCSTRINGを読む限りそう読めますね
｀｀｀(defcustom package-selected-packages nil
  "Store here packages installed explicitly by user.
This variable is fed automatically by Emacs when installing a new package.
This variable is used by `package-autoremove' to decide
which packages are no longer needed.
You can use it to (re)install packages on other machines
by running `package-install-selected-packages'.

To check if a package is contained in this list here, use
`package--user-selected-p', as it may populate the variable with
a sane initial value."
  :version "25.1"
  :type '(repeat symbol))｀｀｀
（編集済み）
インストールは ｀(package-install)｀ に丸投げしてるので、依存関係も含めて入りますね。
｀(package-install p 'dont-select)｀ で呼んでますが、これは先の変数にパッケージのシンボルを追加しない指定のようです。

takaxp [14:28]
へー。あとで見てみますわ。実は広範囲に使われているのかも。

** 2018/12/28
conao3 [14:30]
話変えてしまいますが、ドット対に対して ｀t｀ になる型チェック関数って存在しますか？

takaxp [14:34]
ありそうな...

conao3 [14:36]
ドット対は ｀listp｀ で ｀t｀ が返るんですが、リストとドット対は ｀cdr｀ を取って要素が返るか、リストが帰ってくるかで決定的に異なるんですよね。。

syohex [14:40]
｀(and (listp v) (atom (cdr v)))｀みたく判定する他なさそう.

conao3 [14:41]
なるほど、ありがとうございます！自分用のユーティリティ集に入れておきます。

tomoya [14:52]
https://emacs.stackexchange.com/questions/10489/predicate-function-for-dotted-pairs
stack exchange も頑張ってる
Emacs Stack Exchange
Predicate function for dotted pairs?
Q: is there a predicate function for dotted pairs? In other words, is there a function that distinguishes between dotted pairs and 2-element proper lists: (some-predicate-p '(a . b)) ...
“dotted pairs predictate” のワードで検索しました

conao3 [14:55]
いつものDrewさん。

takaxp [15:00]
なるほど．名前はやはり ｀dotted-p｀ なのかw

conao3 [15:01]
ドット対、英語では ｀pair｀ っぽいですけど。。この回答者さんは ｀dotted-p｀ にしてますね。

takaxp [15:04]
｀pair-p｀ だといろんな組み合わせを想像しそう．

conao3 [15:05]
あらら。 ｀leaf-pairp｀ として leaf.el に入れてしまいました。

takaxp [15:05]
私の意見はあまり参考にしなくていいですw

conao3 [15:06]
ちなみに ｀leaf-truep｀ もあります。ザ・ユーティリティ関数感
｀｀｀(defsubst leaf-truep (var)
  "Return t if VAR is non-nil."
  (not (not var)))｀｀｀

tomoya [15:11]
｀-p｀ のように ｀-｀ がないのは少し違和感ある

conao3 [15:11]
Capture 2018-12-28 15.11.41.png 

そうですね。でもこれがelispの風習だとして慣れることにしてます
逆に ｀atom｀ や ｀null｀ が命令規則に合ってない関数達ですね。

** 2018/12/28
tomoya [15:15]
そして、真っ新のEmacsをセットアップして思うのは、Emacsで快適に開発できるようになるまでの道はなかなか遠い。まぁ、 自分が開発に求める要望が完成しているというのも大きな理由だけど。
ほぼ素のEmacsで開発している人は逆に尊敬しますね
spacemac みたいな設定済みEmacsをもっと派生させて、Atomacs とか Visual Studio Codemacs とか Sublimeacs とかあればよさそう

takaxp [15:19]
Castlemacs は如何？ （編集済み） 
https://github.com/freetonik/castlemacs
freetonik/castlemacs
Modern, minimalist Emacs for macOS ⌘
Stars
156
Language
Emacs Lisp
freetonik/castlemacs2018年9月20日投稿したメンバー: GitHub
プログラマ向けかは微妙ですがw

conao3 [15:36]
設定済みEmacsはそのままではユーザーに細かなこだわりがあって、その全てには対応するのは不可能なのでSpacemacsが採用している「レイヤー」の考え方は賢いなと思います。
leaf.elも実はその「レイヤー」を定義できるように、init.elに書いただけでは「設定の葉っぱ」をleafのデータベースに入れるだけで、その「設定の葉っぱ」を明示的にオンオフすることで活性化する。。みたいなことを考えていたのですが、速度面と内部の簡潔さを重視して見送ってしまいました。 （編集済み） 

tomoya [15:40]
Castlemacs は知らなかったですけど、けっこう頑張ってますね
もしくは、開発に特化した設定済みEmacsとか

conao3 [15:42]
現状でも「設定の葉っぱを何枚か組み合わせた葉っぱ」は定義できて、それに対して ｀:disabled｀ などを指定できるのでその用途に使えるかもしれません。
設定済みEmacsを提供するための仕組みは提供できるかもしれませんが、設定済みEmacsのメンテナはいろんな背景を持った色んな人のissueが溢れそうでやりたくないですね。。

tomoya [15:57]
面倒なのはやはりパッケージのバージョン管理になりそう

conao3 [15:58]
feather.elはコミットのSHAでもタグでも、指定してインストールできますが、設定済みEmacsのアップストリームが変えた時、使ってる全ユーザーをアップデートさせてよいかと言うと微妙ですね。。

tomoya [15:59]
Emacsのバージョンによっても指定したいパッケージバージョンが変わるかもしれないですからね。

conao3 [16:01]
ということで「設定済み葉っぱ」を多数登録しておいて、いろいろな条件や操作で活性化させたり非活性化させたりできるのは面白いと思っていたのですが、やはり実装したほうが良いのか。。？

tomoya [16:05]
まぁ、でも僕は設定済みを作る予定は当面ないですねw

conao3 [16:07]
同意ですね。毎週のinit.el読書会でいろんなTipsが集まってるので、レポジトリ切って設定の葉っぱ集作るのも面白いかもしれません。

grugrut [16:18]
Meadowだと、設定済みMeadowなんてのがありましたね

takaxp [16:21]
Emacs は他のエディタと違って設定の自由度が高すぎるので，設定済みが市民権を得るのは辛いのかな

conao3 [16:21]
設定済みEmacsがあったところでそれをインストールするかと言われれば、インストールしないとしか。。

tomoya [16:54]
でも設定済みがないと、Emacs初めましての人が開発しようと思ってEmacsを入れると貧弱で辛いだろうと思う気持ちはある。
今回は company を使うようにしてました

yoshitia [17:10]
今年買ったmacbookでconpany使ってますが
軽く設定したら使えるので便利

tomoya [17:22]
ですね! パッケージの数も豊富ですし。
atom で fuzzy match に慣れてしまったので company-flx を入れました。
ちなみにいまは Git管理下のファイルを編集するときに、バッファ自体の背景色を差分でインタラクティブに変更したくて https://github.com/dgutov/diff-hl の diff-hl-flydiff-mode を使えばいけるかなと思って試しているのですが、どうも動作しなくて困ってます。
dgutov/diff-hl
Emacs package for highlighting uncommitted changes
Stars
356
Language
Emacs Lisp
dgutov/diff-hl2012年6月25日投稿したメンバー: GitHub
あ、ちなみに #beginner-helps で発言し続けているのは、Emacsを一から設定しているので、初心に返っているためです。
なお、 ｀diff-hl-mode｀ や ｀diff-hl-margin-mode｀ は正常に動いています （編集済み） 
flydiff-mode の意味を勘違いしているだけかもしれないです

** 2018/12/28
shun [17:30]
ちょっと上の話題ですが https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html#Coding-Conventions に
> If the purpose of a function is to tell you whether a certain condition is true or false, give the function a name that ends in ‘p’ (which stands for “predicate”). If the name is one word, add just ‘p’; if the name is multiple words, add ‘-p’. Examples are framep and frame-live-p.
とあるので， ｀leaf-pairp｀ ではなく ｀leaf-pair-p｀ が適切のような気がします
(数週間前にここで教えてもらって読んだ)

tomoya [17:32]
1単語かそうでないかか。なるほど。

takaxp [17:32]
｀symbolp｀ OK

shun [17:34]
前から「何故 ｀symbol-p｀ じゃないのか」と不思議に思ってたので，これを読んだときにすごく納得して記憶に残りました．

tomoya [17:34]
やっぱり、diff-hl の fly はバッファ上で変更する、という意味ではなく、保存しなくてもっていう意味かな。

takaxp [17:35]
つまり拡張パッケージ ｀hoge｀ 内で判定関数作るときは，必ず2語以上になるから，例外なく ｀-p｀ になるのね．
｀hoge-a-p｀ or ｀hoge--b-p｀

conao3 [17:39]
｀flamep｀ は (flamep) であって、 ｀flame-live-p｀ は (flame-live)-(p) で、 flame-(livep) だとおかしいという理由だと思います。
そう考えれば ｀leaf-truep｀ は (leaf)-(truep) であって、 (leaf-true)-(p) ではないので、 leaf-truepはありだと思いますが。。
燃えた

takaxp [17:39]
んむw
まぁそれ言い始めたら， ｀ture｀ 不要じゃない？説もある． （編集済み） 

shishi [17:41]
正直なところElispの命名規則良く分からんのでスルーしている

takaxp [17:42]
旨そうにケバブを焼ければそれでOK

conao3 [17:44]
data.cを眺めてたら、確かに。。と思う一方 ｀user-ptrp｀ という関数を見つけてしまった。 ｀ptr｀ は ｀pointer｀ の略

shun [17:46]
確かにそれも一理ありますね…
テキトーに探してみたら ｀json-plist-p｀ という関数がありました
｀user-ptrp｀ は何なんでしょう…

conao3 [17:56]
何なんでしょう。の意味が取れませんが、定義しているところが分からないということであれば、data.cを読んでもらえればと。
｀truep｀ の心はelispで ｀t｀ として評価されるべきものをきちんと ｀t｀ として正規化してくれる関数ですね。
Org Modeのソースを読んでた時に仕入れた知識です。 ｀(not (not｀ や ｀(null (not｀ を書いたほうがタイプ数少ないんじゃないかという点はさておき。笑

shun [18:07]
すみません．「 ｀user-ptrp｀ (が ｀-p｀ でない理由)は何故なんでしょう…よく分かりませんね」という意図でした

takaxp [18:13]
｀(when VAL t)｀ でもOKなのかな

conao3 [18:14]
結果は同じですね。

conao3 [18:24]
最終的なS式のフォーマットを考えると少し違うかもしれません。
一般的なところで言えば、列挙する系のリストに対しては ｀map｀ がきれいに見えますし、 一つの変数にリストが入っている場合は ｀dolist｀ のほうがインデントがきれいですね。
そういえば ｀mapc｀ ≒ ｀dolist｀ だと思いますけど、 ｀mapcar｀ に対応する ｀dolist｀ 系の関数はあるんでしょうか。。

syohex [18:37]
ないというか, そもそも対応が取れるものでもないかと. doなんちゃらは副作用があることが前提なので.

conao3 [18:38]
｀mapc｀ が ｀map｀ 系の例外という感じなんでしょうか
なるほど。

** 2018/12/28
tomoya [23:05]
2日かけてセットアップして、まだTypeScriptで快適に開発できる環境が整いませんね。Emacsの設定はなかなか難しい。
でも楽しい。
久しぶりにパッケージをインストールして設定という流れを繰り返すと、最近のエディタはパッケージを入れた段階で有効になるのに対して、Emacsの場合はほとんど明示的に設定を書いて有効かしないといけないところが大きく違うことに気づきました。 （編集済み） 
たいてい有効化する設定は global-hoge-mode なんですけど、それを知らない人は、わざわざドキュメントや設定を読んで調べないといけないのが学習コスト高な気がしました。

yoshitia [23:13]
確かにvimrcよりinit.elの方が行数多いですね

conao3 [23:23]
その指摘、確かにライトユーザーにとっては辛い点かもしれません。
feather.elではmelpaのレシピをもとにGitHubやGitLabから指定コミットだけをshallow cloneする予定なのですが、ついでに各パッケージの標準設定をダウンロードしてきてもいいかもしれません。その標準設定誰がメンテするの問題はありますが。

yoshitia [23:28]
私もevil-modeとEmacs実践入門でようやくはじめられた感じですね
本当ありがたかったです

yoshitia [23:41]
Vimはデフォルトキーバインドからしてテキストエディタであることを主張してる気がするんですが
Emacsは「お前はEmacsをどういうツールとして使いたいの？」と問われているイメージはあります （編集済み） 

conao3 [00:02]
面白そうだったので leaf.el に ｀:defaults｀ キーワードとして入れました。標準設定を丸腰で信じるのはやばいので、使うのはライトユーザーだけだと思います。
標準設定のみでパッケージの設定が終わるなら、 ｀(leaf foo :ensure t :defaults t)｀ でパッケージの設定ができることになります。
https://github.com/conao3/leaf.el/pull/69
conao3
#69 Feature#68
Implement #68.
conao3/leaf.el12月29日投稿したメンバー: GitHub

takaxp [00:23]
> たいてい有効化する設定は global-hoge-mode なんですけど、それを知らない人は、わざわざドキュメントや設定を読んで調べないといけないのが学習コスト高な気がしました。
｀package.el｀ のドローバックだと思う．一覧から選んでインストール => 設定できずに詰む．
GitHub 等頒布元に来てくれれば，丁寧な README が用意されているのに．

conao3 [00:27]
そうですね。たいていレポジトリのルートにReadmeがあるので、それが見られないと辛いですね。気づいたのはEmacsを使ってから結構してからでした。
あと、Webの記事を見るよりパッケージのヘッダーのところに丁寧な説明を用意してくれてるパッケージが多いことにも気づくのに時間かかりましたね。。

takaxp [00:28]
インストール方法，初期設定と動かし方が大抵は書いてあって，
場合によっては，この関数呼べばおすすめキーバインドまで設定できますよ，とかしてくれている．

buzztaiki [01:01]
find-library を覚えてパッケージのコメントを見るようになると大分変わりますよね。

yoshitia [01:33]
なる。`M-x find-library` でelisp開ける （編集済み） 
Emacsの慣習に従ってるパッケージならelispのファイルのコメントの説明きっちり書いてあるから
それ見ればいいってことか

yoshitia [02:05]
https://ja.stackoverflow.com/questions/24068/elisp-%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E9%9A%9B%E3%81%AB-%E5%85%83%E3%81%AE%E5%A0%B4%E6%89%80%E3%81%B8%E6%88%BB%E3%82%8B%E3%81%AB%E3%81%AF
スタック・オーバーフロー
elisp のコードリーディングをしている際に、元の場所へ戻るには？
elisp のソースコードリーディングをしていると、知りたい関数・変数のうえで <f1> f や <f1> v を実行して、それがどこのソースからきているのかを確認し、かつそのヘルプ画面からソースコードにジャンプするなどを行います。 このジャンプして、対象の関数・変数の挙動を把握したら、もともと読んでいた場所へ戻りたくなりますが、これを簡単に行う方法はありますか。
それと ｀M-.｀ , ｀M-,｀ でジャンプと戻るの使えば・・・便利だな

takaxp [10:42]
> find-library を覚えてパッケージのコメントを見るようになると大分変わりますよね。
｀M-x find-library｀ でソース表示できたんですね！
help で関数を調べて，そこからソースを辿ってました…

conao3 [11:12]
｀find-library｀ 知らなかったです。いつも ｀M-.｀ で定義場所に飛んで、 ｀M-,｀ で帰ってきてました。同じバッファで飛ぶので、参照元と定義場所の両方を見たい時は別途バッファ切り替えが必要ですが。。 （編集済み） 
あ、yoshitiaさんがすでに話されていた。

** 2018/12/29
takaxp [11:38]
Screen Shot 2018-12-29 at 11.35.02.png 

el-get さん，ディスク食べるの巻

conao3 [11:39]
el-getはレポジトリ全部落としてくるんでしたっけ

takaxp [11:40]
git clone します．shallow できるので，それが↑の 404MBの方．
.git でかいパッケージランキングがこちら
Screen Shot 2018-12-29 at 11.37.26.png 

｀python-mode｀ 何してくれんの

conao3 [11:43]
https://emacs-jp.slack.com/archives/C1B5WTJLQ/p1536743283000100
前「random」でその話が出た時は epkg と elpa が重かったことになってますね。
conao3

#random への投稿2018年9月12日メッセージを確認する

takaxp [11:45]
elpa には何入ってます？その中にもパッケージが入ってそう

conao3 [11:49]
elpaはレポジトリで配布するパッケージをすべて持ってるので、その歴史も合わせてその容量になってるんだと思います。 straightもう消したのでわからないですが。。 （編集済み） 

takaxp [11:49]
ほむほむ

takaxp [11:59]
｀python-mode｀ は zip DL だと 559KB
これに限らず，とりあえず動いてくれれば良いパッケージの入手に 150MB と 0.5MB の違いがあるのって…
el-get は zip DL も対応済みだっけかな？

** 2018/12/29
conao3 [12:05]
各ブランチ先端の歴史１つは ｀--depth 1｀ で取ってこれますが、あるコミットや、あるタグで歴史１つを持ってくる方法がわからなくて困っています。
現状、下のURLで紹介されてるコマンドを逐一Emacsから叩いて実現しています。
https://yo.eki.do/notes/git-only-single-commit
葉月夜堂
コミット・タグを指定してその時点でのツリーだけをgit cloneしてくる
タイトルは若干釣りだが……。 超でかいプロジェクトがあって、その ある時点での ソースコードに対して grep とかしたい、というような状況で必要になった。 やってみたところ、 ある時点での っていうところを満たすためには git-clone ...

yoshitia [12:08]
https://qiita.com/pumbaacave/items/bb781802d191d5113427
Qiita
gitで、特定のコミットからファイルを取り出す方法 - Qiita
# 問題 昨日作業したファイル（例えばHEAD^^^にある）が欲しい時、どうしましよう - github, bitbucketなどから copy & paste; バージョン管理できてない気がします、ファイル数が多い時手間がかかりま...
こういうのですかね？
https://qiita.com/kuriya/items/3b72c90eebd79a10b7a4
Qiita
Gitで特定のディレクトリだけcloneする方法 - Qiita
gitで複数のプロジェクトファイルを管理していた場合などに、特定のディレクトリ配下だけcloneしたい場合などあると思います。そんな時に便利なgitの使い方があったので紹介します。 ## git cloneする ``` git cl...
ディレクトリだとこれか
git色々すごすぎてわけわからん

takaxp [12:16]
いろいろある

conao3 [12:19]
すべての歴史をフェッチしてチェックアウトすれば取り出せるのは当たり前なんですが、そもそものフェッチを歴史１個分だけにしたいという要求ですね
straightは全歴史をフェッチしてチェックアウトする設計になってるので、遅すぎて使えない。。

yoshitia [12:22]
1個分、か

yoshitia [13:11]
｀git clone --depth 1｀ みたいなのが特定のコミットだけ指定してできるものはなさげですね
不便
できちゃった場合、それをうっかりcommitできてしまった場合のリカバリー考えると開発する剛の者いるのかな？

takaxp [14:10]
サーバ側でタグ付きのコミットだけzip化して切り離しておくのが親切かも．

zk-phi [14:47]
タグが振られていれば ｀git clone <url> --branch <tag> --depth 1｀ でいけそうな雰囲気があります :両目:
https://git-scm.com/docs/git-clone
>｀--branch｀ can also take tags and detaches the HEAD at that commit in the resulting repository.

conao3 [14:49]
あ、タグも行けるんですね。ブランチだけかと。。
確認できました！ありがとうございます！

conao3 [15:00]
コミット指定はできなさそうなので、ワンパスには出来ませんでしたが簡略化になりました！

zk-phi [15:04]
tag まで行けるなら sha1 でも指定したくなっちゃいますね…w でもよかったです :祈る:

** 2018/12/30
tomoya [16:03]
Atom で Cmd + Alt + → or ← によるタブ移動に慣れてしまったので、こんなの書きました。
switch-code-buffer 
(defvar ignore-buffer-regex “^\\(\*\\|magit.+:\\)“)
​
(defun switch-code-buffer (&optional previous)
 “Switch buffer ignore no code buffers.
if you want to switch to previous buffer, set first argument non-nil.”
 (interactive)
 (let* ((previous (or previous nil))
     (bread-crumb (buffer-name)))
  (message “%s” previous)
  (or (and previous (previous-buffer))
    (next-buffer))
  (while
    (and
     (string-match-p ignore-buffer-regex (buffer-name))
     (not ( equal bread-crumb (buffer-name) )) )
  (or (and previous (previous-buffer))
    (next-buffer)))))
​
(defun next-code-buffer ()
 “Switch next buffer ignore no code buffer.”
 (interactive)
 (switch-code-buffer))
​
(defun previous-code-buffer ()
 “Switch previous buffer ignore no code buffer.”
 (interactive)
 (switch-code-buffer t))
​
;; Key bindings
(define-key global-map (kbd “<M-s-right>“) ’next-code-buffer)
(define-key global-map (kbd “<M-s-left>“) ’previous-code-buffer)
折りたたむ 
久しぶりに Elisp 書いた感ある。

tomoya [16:51]
あと、コードの自動修正が保存と同時にできればとりあえず Emacs で TS の開発ができる環境が整いそう。

conao3 [17:57]
｀previous｀ を ｀(or previous nil)｀ で束縛しているのはオプショナル引数を省略した場合に ｀nil｀  にしたいのでしょうか。省略した場合は ｀nil｀ が自動的にセットされていると思いますが。。省略した場合のデフォルト値を明示的に指定したいのであれば ｀cl-defun｀ が使用できます。
｀｀｀(or (and previous (previous-buffer))
        (next-buffer))｀｀｀
は  ｀(or (when previous (previous-buffer)) (next-buffer))｀ と1行で書いたほうがorリストっぽくて読みやすいのではないかなと思います。
無題 
(defmacro cl-defun (name args &rest body)
 "Define NAME as a function.
Like normal `defun', except ARGLIST allows full Common Lisp conventions,
and BODY is implicitly surrounded by (cl-block NAME ...).
​
The full form of a Common Lisp function argument list is
​
  (VAR...
  [&optional (VAR [INITFORM [SVAR]])...]
  [&rest|&body VAR]
  [&key (([KEYWORD] VAR) [INITFORM [SVAR]])... [&allow-other-keys]]
  [&aux (VAR [INITFORM])...])
​
VAR may be replaced recursively with an argument list for
destructuring, `&whole' is supported within these sublists. If
SVAR, INITFORM, and KEYWORD are all omitted, then `(VAR)' may be
written simply `VAR'. See the Info node `(cl)Argument Lists' for
more details.
​
\(fn NAME ARGLIST [DOCSTRING] BODY...)"
折りたたむ 

conao3 [18:09]
あと ｀let*｀ で同名の変数を（特に ｀let*｀ バインドの中で）使用した場合の名前解決どうなるのかちょっと悩んでしまいました。
｀let｀ だと必ず外の変数を見るのは明らかなので、やはり文脈に依存しない場合は ｀let｀ のほうが余計なことを考えずに済むなと思いました。 （編集済み） 

tomoya [20:28]
添削どうもどうも。
optional はデフォルト値 nil なのね。忘れてた。
or で入り組んできた場合、なんとなく1行目でnon-nil のとき、2行目でnilのとき、みたいな感じで書いてますね。

** 2018/01/01
tomoya [03:13]
新年初の Elisp 書き初めしました

｀｀｀(defun checkout-head-revision ()
  "Checkout HEAD revision on current buffer."
  (interactive)
  (vc-git-checkout (buffer-file-name) "HEAD"))

(define-key global-map (kbd "M-s-z") 'checkout-head-revision)｀｀｀

これで Atom 同様に Cmd + Alt + z でカレントバッファをいつでもHEADに戻せます。

tomoya [03:26]
｀｀｀(defun checkout-head-revision ()
  "Checkout HEAD revision on current buffer."
  (interactive)
  (or (and (buffer-file-name)
           (vc-git-checkout (buffer-file-name) "HEAD")
           (message "File reverted: %s" (buffer-file-name)))
      (message "Can not revert. Because this buffer is not a file.")))｀｀｀

ちょっと仕上げした
やっぱり、こういう感じでささっと拡張できるのがEmacsの良いところですねぇ

tomoya [03:56]
global-auto-revert-mode がうちの markdown-mode で効かない。 （編集済み） 
でも (auto-revert-active-p) は t だ

* elisp
** 2016/05/24
kozo2 [12:04]
elispにPythonのdir()のようなものってあったりするでしょうか

syohex [17:58]
#elisp に参加しました。

syohex [18:00]
ないですね.

kozo2 [18:02]
なるほど。漠然としてて申し訳ないのですがとにかく何かをinspectしたい時にどうするのかなと思い伺いました

syohex [18:04]
表示させてみたり, type-ofで型をみたり程度ですかね.

kozo2 [18:06]
なるほど。「表示」には何を用いられていますか?  vimscriptにおけるechoのようなものってelispで何かわかってなくて
あとdir()にはinspect以外に list objects in the working environment 的な働きもあると思うんですが

syohex [18:07]
ielm(REPL)ですかね. M-: とかも使いますが.

kozo2 [18:07]
こういうものもelispにあったりしないかなとか
ielmで表示させたいものの名前だけ打ってenter、ってことですかね

syohex [18:08]
はい.

kozo2 [18:08]
なるほど。ありがとうございます （編集済み） 

syohex [18:08]
scratch bufferで C-x C-eとか C-jとかでもいいかもしれないですが.

kozo2 [19:09]
type-of 知りませんでした
Untitled 
ELISP> (type-of (shell-command-to-string "ls"))
string
情報あざした

rubikitch [17:45]
lispxmpもよかったらどうぞ。

** 2016/05/30
takaxp [22:02]
ox-qmd をMELPAに加えようと画策しています．とりあえず指摘されそうなところを直したものを作者の方（0x60dfさん）に取り込んでいただきましたが，登録に際してまだ抜け等のお気づきの点がありましたらご指摘願います．
https://github.com/takaxp/ox-qmd/blob/6072ad5a6bd117742a1fd423c17e5f4c7ded40d3/ox-qmd.el （編集済み） 
GitHub
takaxp/ox-qmd
ox-qmd - Qiita Markdown Back-End for Org Export Engine

syohex [09:49]
https://github.com/0x60df/ox-qmd/blob/master/ox-qmd.el#L8

の ox-mdは不要ですね. org-mode自身に bundleされているファイルのようなので.
(ちなみにバージョンが何でもいい場合は指定しないのではなく, "0"と指定した方が良いです. パーサ的には許可しているようですが, 仕様としては指定することになっているので).
GitHub
0x60df/ox-qmd
ox-qmd - Qiita Markdown Back-End for Org Export Engine
ato
今回は関係ありませんが, MELPAに登録するパッケージは org-plus-contrib の依存があったとしても明記しないようにしてください. MELPAにあるパッケージは GNU ELPAと MELPAで依存を完結させるというのが purcell氏の方針のようです.

takaxp [11:24]
なるほど勉強になります．org-modeのバージョンは8以上を表現したいのですが，パーサ的にはどうなんでしょう... （編集済み） 

syohex [11:26]
それは今のままの"8"でいいです. 上記の指摘は ｀(ox-md)｀に対してのものです.

takaxp [11:28]
了解です！
> MELPAにあるパッケージは GNU ELPAと MELPAで依存を完結させるというのが purcell氏の方針のようです.
私はMELPAを経由せず org を入れているので，MELPAのパッケージで org への依存が書かれていると org が勝手にインストールされて困っています（今は導入されたら強制削除） （編集済み）

** 2018/06/16
takaxp [21:02]
run-at-time で過去の時間を指定して評価すると、引数の function が即座に実行されるのですが、仕様と理解して良いでしょうか。それとも私だけとか... （編集済み） 

syohex [09:06]
再現しました. ドキュメントには過去の時間については記載されていませんね. 仕様ということでいいのだろうか...

takaxp [10:25]
確認ありがとうございます．run-at-time のコードをみると，過去時間をスルーしているっぽいので，advice/before で弾くようにしてみます．

** 2018/07/19
takaxp [18:16]
https://github.com/ludwigpacifici/modern-cpp-font-lock
GitHub
ludwigpacifici/modern-cpp-font-lock
modern-cpp-font-lock - C++ font-lock for Emacs

syohex [18:21]
C++はちゃんとしたパーサで解析しないときつい言語だ. 正規表現で頑張るのは厳しい.

yyuta [11:06]
modern-cpp-font-lockの作者さん、rtagsから足りないハイライトのデータ取ろうとしてるみたい https://github.com/Andersbakken/rtags/issues/677
GitHub
Syntax highlighting · Issue #677 · Andersbakken/rtags · GitHub
Is it completely insane to ask whether it would be possible to write a major mode for C++ that uses rtags to query the type of token for syntax highlighting, instead of doing it regex based? I fou...

syohex [10:59]
libclangで highlightってのは Vimであったような.
C++は正直記号選びのセンスが微妙だからなぁ.

syohex [11:15]
しかし Emacsでそういう highlighting効率的にできるのかな ?

shougo [07:44]
https://github.com/arakashic/chromatica.nvim
GitHub
arakashic/chromatica.nvim
chromatica.nvim - Clang based syntax highlighting for Neovim
これですかね

** 2016/08/13
yyuta [10:15]
https://github.com/ensime/ensime-emacs/issues/312
GitHub
Optimize semantic highlighting. Somehow... · Issue #312 · ensime/ensime-emacs · GitHub
1) We unconditionally clear all overlays before applying new ones, so small edits with purely local effects end up triggering big repaints. 2) The results of a highlight are often invalidated befo...
ensimeがすでにsemantic highlightingができるみたいだけど、効率的ではないみたいですね

nasa9084 [23:32]
#elisp に参加しました。

tarao [12:05]
ensimeのその問題はたぶんsemantic highlightingの問題というよりはoverlayでやっていることの問題、全体のハイライトをやり直しているのが効率的でない、ということだとおもいます
ふだんensime使ってますが、Scalaはそもそも1ファイルはそんなに大きくならないのがふつうなので、ハイライトが遅いのが体感できるほどではない、という印象です

** 2016/08/22
takaxp [15:46]
胸熱！https://github.com/orgcandman/pcap-mode
GitHub
orgcandman/pcap-mode
pcap-mode - emacs lisp pcap file viewer

** 2016/08/30
takaxp [15:56]
pass コマンド良いですね．割と有名ですか？
https://www.passwordstore.org/
passwordstore.org
Pass: The Standard Unix Password Manager
Pass is the standard unix password manager, a lightweight password manager that uses GPG and Git for Linux, BSD, and Mac OS X.
https://github.com/jabranham/helm-pass
GitHub
jabranham/helm-pass
helm-pass - Emacs helm interface for pass, the standard unix password manager
id-manager.el からお引越ししようかなと．

syohex [15:59]
どうなんでしょう ? OSXだと標準のやつがありますし, Linuxでも gnome keyringとかありますし.

takaxp [16:01]
どちらかと言えば 1Password や KeyPass の代替的位置付けですかね．スクリプトもご丁寧に用意されてます．
https://git.zx2c4.com/password-store/tree/contrib/importers/1password2pass.rb

syohex [16:02]
こういうのって GPGキーが失効したらどうなるんだろう ?

takaxp [16:02]
expired フラグが立ってても無視とか...

syohex [16:03]
その辺を把握しておかないと怖い.

takaxp [16:03]
確かに
https://gist.github.com/orymate/a6bd9d2417fa5af70962
10年で設定して気にするなやー，的な．

syohex [16:08]
なるほど…

takaxp [16:10]
gnupg でも一般ユーザは無期限設定でええってしてますね．https://www.gnupg.org/gph/en/manual.html
そういっても確かに気軽に移行はちと怖いです...

takaxp [16:20]
追加．バックアッププラン => http://h12.me/article/password-management
データは Git に投げてマスターパスワードだけは忘れるな．（キーもエクスポートしてオフサイトバックアップせよ）φ(. _. )

** 2016/08/30
syohex [17:40]
https://github.com/bbatsov/projectile/pull/1046
GitHub
Replace dash with cl-lib by abo-abo · Pull Request #1046 · bbatsov/projectile · GitHub
Using e.g. the standard cl-remove-if in place of 4 aliases (-remove, --remove, -reject, --reject) improves code quality and eases new contributions and refactoring. I've also rewritten Makefile, b...
別に使ってもいいと思うけどなぁ...

takaxp [17:48]
お疲れ様です，としか言いようがないような...

pogin503 [17:50]
そんな標準ライブラリ原理主義にならなくても…

niku [17:55]
Railsと外部ライブラリを利用したアプリケーションを数年間作り続けている身としては気持がわかるところもあります．
フレームワークをアップデートしたとき，アップデートに追従できない外部ライブラリがあると修正がしんどいです．

同様にEmacsのアップデートをしたときに，dashが追従できなくなっていたら直すのがしんどいのではないでしょうか．私は読み易さがそれほど変わらないのなら，標準ライブラリを直接利用するのが好きです．

takaxp [18:02]
さもありなん．あとは dash側をオープンに修正して回避ですかね．（個人的には標準が好きです．後から安易に全とっかえするのは…な印象）

syohex [18:15]
Emacs本体が互換性どうなのかなってのもありますけどね. わりとすぐに obsoleteにするし. (なかなか消えはしないですけど)

lurdan [20:13]
Helm を見た後では、emacs 本体の obsolete フラグは神かな？ ってなります

** 2016/08/31
yyuta [10:52]
Emacs標準のcapf(completion-at-point-function)を実装するとcompany-modeでも補完がつかえるとしって、おぉ！って思ったんですけど、あとでググったらauto-completeもac-capf経由で補完作れるんですね。

syohex [10:53]
言われてとりあえず作ったものでちゃんと動いているのだろうか ?

yyuta [10:58]
nimlang用にcapfを作っていたんですが、company用の要素をac-capfでも同じように表示できたらすごくいいとおもいました。（:company-docsig?とか型情報を表示するやつなど）

syohex [11:00]
｀:summary｀ propertyに設定するとかですかね.

yyuta [11:02]
racerのemacs拡張が参考になったのですが、:company-docsig, :company-location, :company-doc-buffer というpropertyを使っていたのでこれらをそのまま使えると補完拡張の作者は
company vs. auto-completeを気にしなくてよくなるのでいいとおもいます。

yyuta [11:11]
あっすいません。`:summary`についてよくわかってないのですが、capf用の設定なのですか？

syohex [11:15]
｀auto-complete｀の 各候補(popup object)のプロパティです.

yyuta [11:25]
ありがとうございます。（popupのコード理解できてないのですが）:summaryに設定することで解決できそうな雰囲気を感じました

** 2016/08/31
mopemope [13:34]
mini bufferに関数のsignatureとか出るの、アレ誰が出してるの？

syohex [13:38]
eldoc

mopemope [13:41]
お、なるほど。ありがとうございます
go-eldoc 参考にします

** 2016/09/10
takaxp [04:41]
https://github.com/NicolasPetton/jade (24以下はお断り)
GitHub
NicolasPetton/jade
jade - JavaScript Awesome Development Environment (in Emacs)

** 2017/02/27
kakakaya [17:34]
Emacs25用にジョイスティックのデモが作成されたそうで
https://github.com/skeeto/joymacs
github.com
GitHub - skeeto/joymacs: Joystick support for Emacs
joymacs - Joystick support for Emacs
これ利用してジョイスティックでtetris動かしてみたいですね

** 2017/03/29
pogin503 [01:22]
https://www42.atwiki.jp/elisp/pages/19.html
連想リストの操作の仕方を思い出せなかったので少し書きました。ある程度書いたらQiitaに書いてもいいのかなと。
逆引きEmacs Lisp
逆引きEmacs Lisp - 連想リスト
連想リスト連想リストを定義する 連想リストからエントリを取得する 連想リストのキーから値を取得する 連想リストのキーの値を修正する 連想リスト 連想リストを定義する &#40;setq trees ...

syohex [11:25]
｀alist-get｀は ｀assq｀を使っている = 比較が ｀eq｀であることは注意が必要ですね. (文字列やリストだと通常うまくいかない).
｀assoc｀は ｀equal｀なので ｀assoc｀ + ｀cdr｀と ｀alist-get｀は厳密には同じではなく. ｀assq｀ + ｀cdr｀が同じになります.
｀assoc｀ + ｀cdr｀は ｀assoc-default｀と等価なのでそちらの方が括弧が少なく書けます.

pogin503 [12:11]
@syohex
>｀alist-get｀は ｀assq｀を使っている = 比較が ｀eq｀であることは注意が必要ですね. (文字列やリストだと通常うまくいかない).
そこらへんをまだ書けていないので書いていきたいです。
>｀assoc｀は ｀equal｀なので ｀assoc｀ + ｀cdr｀と ｀alist-get｀は厳密には同じではなく. ｀assq｀ + ｀cdr｀が同じになります.
確かにそうでした。例として適切ではないですね…。
>｀assoc｀ + ｀cdr｀は ｀assoc-default｀と等価なのでそちらの方が括弧が少なく書けます.
ふむふむ、それはわかってなかったので。参考にします。

レビューありがとうございます。 （編集済み） 

** 2017/07/23
kakakaya [00:09]
ddskkの ｀skk-activate｀ 関数を呼ぶと ｀(void-variable -)｀ が出るんですが、同様の症状の方いますか？

｀｀｀GNU Emacs 24.5.1
ddskk 20170630.317｀｀｀
｀｀｀Debugger entered--Lisp error: (void-variable -)
  byte-code("\306\307\310\311\312$\210\313\307\312\"\210\306\314\315\311\312$\210\313\314\312\"\210\306\316\317\311\312$\210\313\316\312\"\210\306\320\321\311\312$\210\313\320\312\"\210\322\323!\210\210    \210\n\210\210\f\210
\210\207" [- Peer has closed the GnuTLS ad-add-advice modify-frame-parameters (ccc-ad nil t (advice lambda nil (when (and (assq (quote cursor-color) (ad-get-arg 1)) (null ccc-buffer-local-cursor-color)) (ccc-set-frame-cursor-color (ad-get-arg 0) (cdr (assq (quote cursor-color) (ad-get-arg 1))))) (when (and (assq (quote foreground-color) (ad-get-arg 1)) (null ccc-buffer-local-foreground-color)) (ccc-set-frame-foreground-color (ad-get-arg 0) (cdr (assq (quote foreground-color) (ad-get-arg 1))))) (when (and (assq (quote background-color) (ad-get-arg 1)) (null ccc-buffer-local-background-color)) (ccc-set-frame-background-color (ad-get-arg 0) (cdr (assq (quote background-color) (ad-get-arg 1))))))) after nil ad-activate custom-theme-checkbox-toggle (ccc-ad nil t (advice lambda nil (setq ccc-default-cursor-color (ccc-current-cursor-color) ccc-default-foreground-color (ccc-current-foreground-color) ccc-default-background-color (ccc-current-background-color)) (ccc-set-frame-cursor-color (selected-frame) (ccc-current-cursor-color)) (ccc-set-frame-foreground-color (selected-frame) (ccc-current-foreground-color)) (ccc-set-frame-background-color (selected-frame) (ccc-current-background-color)))) enable-theme (ccc-ad nil t (advice lambda nil (ccc-setup-current-colors))) disable-theme (ccc-ad nil t (advice lambda nil (ccc-setup-current-colors))) provide ccc connection] 5)
  require(ccc)
  (progn (require (quote ccc)))
  (if (featurep (quote emacs)) (progn (require (quote ccc))))
  (when (featurep (quote emacs)) (require (quote ccc)))
  (progn (when (featurep (quote emacs)) (require (quote ccc))))
  eval((progn (when (featurep (quote emacs)) (require (quote ccc)))) nil)
  #[128 "\301\302\303B\"D\207" [lexical-binding quote eval progn] 5 1628116]((when (featurep (quote emacs)) (require (quote ccc))))
  (eval-and-compile (when (featurep (quote emacs)) (require (quote ccc))))
  eval-buffer(#<buffer  *load*> nil "/home/kakakaya/.emacs.d/elpa/ddskk-20170630.317/skk-cursor.el" nil t)  ; Reading at buffer position 1337
  load-with-code-conversion("/home/kakakaya/.emacs.d/elpa/ddskk-20170630.317/skk-cursor.el" "/home/kakakaya/.emacs.d/elpa/ddskk-20170630.317/skk-cursor.el" nil t)
  skk-cursor-set-1(nil)
  skk-cursor-set()
  skk-j-mode-on()
  skk-mode(1)
  skk-activate()
  eval((skk-activate) nil)
  eval-last-sexp-1(nil)
  #[257 "\204｀｀｀
Debian 8から9に上げてから出たけど、Emacsのメジャーバージョンは同じなので謎なんですね

lurdan [00:17]
パッケージの ddskk ですか？

kakakaya [00:23]
MELPAから取ってこれる最新版のやつです。
｀ddskk 20170709.839｀ に更新したものの同様の現象……ここで聞くよりIssue立てたほうが早いかもですね

lurdan [01:02]
うちは sid の emacs25 ですけど、melpa の ddskk を読んでも特に問題ないですね……
(-Q で起動して (require 'skk) (skk-activate) を実行するだけなら)

katz [22:55]
自分はちょっと前にmelpaから入れた ddskk-20170610.1729 で問題なく動いてます。
Windows10 64bit
GNU Emacs 25.2.1 (i686-w64-mingw32) of 2017-04-22

takaxp [09:24]
byte-compile し直すとか．

syohex [11:16]
*.elcファイルを消してエラーが出るかを確認ですかね.

kakakaya [19:20]
色々試した結果、自作パッケージが悪さをしていたようです。
お騒がせしました :おじぎ:

** 2017/07/31
takaxp [13:20]
うーむ…
- https://github.com/dajva/rg.el/blob/master/rg.el
- https://github.com/nlamirault/ripgrep.el/blob/master/ripgrep.el
GitHub
dajva/rg.el
rg.el - Emacs frontend to ripgrep
GitHub
nlamirault/ripgrep.el
ripgrep.el - Emacs front-end for ripgrep, a command line search tool

syohex [15:45]
(一応) 拙作の helm-agでコマンドを変えれば動きます.

takaxp [15:45]
↑ 採用( ' -‘)b というか使っているので早速変えて使いますw

** 2017/08/06
takaxp [02:38]
ほう．https://github.com/raxod502/straight.el
GitHub
raxod502/straight.el
straight.el - :四葉のクローバー: Next-generation, purely functional package manager for the Emacs hacker.

shishi [07:53]
next generation って売り文句のものは早い内に消えるという不思議経験則がw

** 2017/08/07
takaxp [18:23]
おそロシアw
output.gif 

[緩募] モードラインでイコライザして遊ぶパッケージ

takaxp [18:36]
[緩募] 遠隔地に住むお爺ちゃんの心拍数をモードラインにリアルタム表示するパッケージ
output.gif 

例外処理が地獄だな…

** 2017/08/09
takaxp [09:30]
随分前の勉強会で話題になったカラーピッカーですが，QT経由でGUI呼び出すパッケージがありました．
https://github.com/sabof/edit-color-stamp
GitHub
sabof/edit-color-stamp
edit-color-stamp - Edit hex color stamps using a QT, or the internal color picker
MacOSX(El Capitan)でも可
Screen Shot 2017-08-09 at 9.31.02 AM.png 

** 2017/08/21
syohex [14:17]
https://gitlab.com/emacs-ci/emacs/commit/8e394b082bd6ecd9ba212cb3ca07cbace66767a6#72d5297a0976cc5d15a5b09d1982576ef28fbb18

久しぶりにビルドし直して気づいたけど, find-fileのこの変更で popwin入れていると, find-fileの挙動がひどいことになる.
GitLab
Preserve point under 'dired-auto-revert-buffer' (third case) (8e394b08) · Commits · emacs-ci / emacs
lisp/files.el (find-file): Use pop-to-buffer-same-window instead of switch-to-buffer. This preserves Dired window point when dired-auto-revert-buffer is non-nil. (Bug#27243) * test/lisp/dired-tests.el (dired-test-bug27243-01) (dired-test-bug27243-02, dired-test-bug27243-03): New tests. The first two replace a...

takaxp [13:31]
興味本位でビルドしてみたのですが，
Checking /Users/taka/devel/git/emacs/lisp/leim/quail/cyril-jis.el ...
Fatal error 11: Segmentation faultmake[4]: *** [../lisp/leim/leim-list.el] Abort trap: 6 (core dumped)
make[3]: *** [leim] Error 2
と残念な結果に :考え中:

** 2017/09/14
takaxp [19:35]
新人イジメコード 
(add-hook 'pre-command-hook
	 #'(lambda () (setq kill-emacs-hook nil) (kill-emacs)))

zk-phi [19:52]
｀｀｀(add-hook 'kill-emacs-query-functions #'(lambda () nil))｀｀｀
とかも地獄っぽいです :うふふ: （編集済み） 

takaxp [19:53]
なかなかの絶望感ですw

takaxp [20:00]
非推奨 
(advice-add 'kill-emacs :override #'(lambda (&optional ARG) nil))
オワタw
kill-emacs-query-functions に引っ掛ける場合では，M-: から kill-emacs を呼べる余地があるφ(. _. ) （編集済み）

** 2017/09/17
sfus [23:25]
helm-mode on で direx 使うと ｀C｀ (direx:do-copy-files) が効かない…という知見を得ました…
https://twitter.com/_sfus/status/909410937907462145
sfus (えすふす)@_sfus
direx で ｀C｀ (direx:do-copy-files) でコピーしようとしたらコピー先ファイル名の末尾に ｀/｀ が付いてしまってコピーできない…？と思って調べてたら、⇛
Twitter2017年9月17日

** 2017/10/06
takaxp [16:48]
delight.el メジャーモード用設定を add-hook に書かなくていいから diminish よりもスッキリ．
Untitled 
(when (require 'delight nil t)
  (delight
   '(;; Major modes
    (c-mode "C" :major)
    (c++mode "C++" :major)
    (js2-mode "JS" :major)
    (csharp-mode "C#" :major)
    (prog-mode "Pr" :major)
    (emacs-lisp-mode "El" :major)
    (python-mode "Py" :major)
    (perl-mode "Pl" :major)
    (web-mode "W" :major)
    (change-log-mode "ChangeLog" :major)
    (lisp-interaction-mode "Lisp" :major)
    ;; Shorten
    (ggtags-mode " G" "ggtags")
    (orgstruct-mode " OrgS" "org")
    ;; No display
    (centered-cursor-mode nil "centered-cursor-mode")
    (volatile-highlights-mode nil "volatile-highlights")
    (aggressive-indent-mode nil "aggressive-indent")
    (all-the-icons-dired-mode nil "all-the-icons-dired")
    (yas-minor-mode nil "yasnippet")
    (auto-complete-mode nil "auto-complete")
    (ws-butler-mode nil "ws-butler")
    (isearch-mode nil "isearch")
    (auto-revert-mode nil "autorevert")
    (global-whitespace-mode nil "whitespace")
    (emmet-mode nil "emmet-mode")
    (abbrev-mode nil "abbrev")
    (doxymacs-mode nil "doxymacs")
    (editorconfig-mode nil "editorconfig")
    (rainbow-mode nil "rainbow-mode")
    (highlight-symbol-mode nil "highlight-symbol")
    (which-key-mode nil "which-key")
    (fancy-narrow-mode nil "fancy-narrow")
    (smartparens-mode nil "smartparens")
    (selected-minor-mode nil "selected"))))

** 2017/10/29
yyuta [16:54]
flymake/flycheckのシンタックスハイライト版？みたいなの作ってみました　https://github.com/yuutayamada/flyhigh
GitHub
yuutayamada/flyhigh
Contribute to flyhigh development by creating an account on GitHub.
emacs 26
（途中でエンター押してしまいました）emacs26のrewriteされたflymakeからほぼ流用しているので新しくなったflymakeようにbackend書いたことあるかたならすぐバックエンド作れると思います
（でもパッケージ依存性よくわからないのでemacs 26がメジャーになるまでMELPA登録はしないかも）

takaxp [17:02]
ほほう．見た目にはどんな感じでしょうね．SS（スクリーンショット）があれば見たいです．

yyuta [17:05]
https://github.com/nim-lang/nim-mode/issues/140
GitHub
use nimsuggest's `highlight` method · Issue #140 · nim-lang/nim-mode
TODO list 1. make PR to nimlang/nimsuggest.nim, not merged yet (nim-lang/Nim#6562) 2. implement highlight package for emacs (maybe ensime is good example) 3. package (2) improvement. it still h...
(ここでスクリーンショット貼る方法わからずリンクでごめんなさい）
上のスクリーンショットはnim-mode本体のfont-lockキーワード抜きでnimsuggestというeditor/ide toolsのハイライト情報だけでハイライトした状態です。
このツールに問題があって、コンパイラ字にfalseとなるところは大胆にハイライト情報欠落しているので、ちょっと残念な感じになっています

takaxp [17:09]
画像D&Dでいけまっせ！
32141745-0faaed36-bc45-11e7-9439-8d9b4d3d9420.png 


yyuta [17:09]
ありがとうございます！

takaxp [17:10]
なるほど．ハイライトされてますね．良さげです．

yyuta [19:00]
ハイライトリッチになったけど、新たに色考えるのめんどうで結局font-lock-XXX-faceから流用であんまかわらないという。。。

** 2017/11/21
niku [22:40]
plantuml-mode で C-u C-c すると画像のプレビューできて便利なのですが，カーソルもプレビューwindowに移ってしまいます．カーソルは元の位置にいて(戻って)欲しいときはどんな感じで書くとモダンな感じですか https://github.com/skuro/plantuml-mode/blob/fce628885b54635b0287b3337626752b2725369d/plantuml-mode.el#L266
GitHub
skuro/plantuml-mode
plantuml-mode - A major mode for editing PlantUML sources in Emacs

syohex [13:22]
｀save-selected-window｀ ?

niku [13:22]
おおっ調べてみます

** 2017/12/05
takaxp [00:04]
https://github.com/NicolasPetton/elbank
GitHub
NicolasPetton/elbank
elbank - Elbank is a personal finances application for Emacs
Paypal がいけるので，意外と良いかも．でも怖いわー（笑 http://weboob.org/applications/boobank
weboob.org
Weboob - Application - Boobank
Boobank is a console application able to list your bank accounts balances on supported websites and to see the expenses details, transfer money, etc.

** 2017/12/19
takaxp [12:49]
なかなか良さげ
https://emacs.cafe/emacs/guest-post/2017/06/26/hierarchy.html
emacs.cafe
Hierarchy.el
Introduction

** 2017/12/28
niku [18:11]
alist にアクセスするのに ｀let-alist｀ が便利なことを知りました

｀｀｀(let-alist '((a . 100)
             (b . 200)
             (c . 300))
  (+ .a .c)) ; => 400｀｀｀

json から alist に変換するのもとても簡単なんですね

｀｀｀(json-read-from-string "{\"a\": 100, \"b\": 200, \"c\": 300}")
; => ((a . 100) (b . 200) (c . 300))｀｀｀

(処理の負荷を気にしないなら)プロセス間通信とか json でいいじゃんという気になってきました．

syohex [18:14]
最近(??) ｀--with-json｀をつけてコンパイルすると native実装が使われているようになったし, 速度的にもましになっている.(要 jansson)

** 2018/01/03
kozo2 [13:26]
自分で定義した関数の定義をprintする方法ってありますかね
｀｀｀ELISP> (defun even? (num) (= 0 (% num 2)))
even\?
ELISP> (describe-function 'even?)
#("even\\? is a Lisp function.\n\n(even\\? NUM)\n\nNot documented." 36 39
  (face help-argument-name))｀｀｀
これだと定義内容がprintできないみたいで

pogin503 [13:35]
とりあえず取得できる方法なら。
Untitled 
(with-temp-buffer
 (insert (eldoc-get-fnsym-args-string 'setq))
 (buffer-substring-no-properties (point-min) (point-max)))
;=> "setq: ([SYM VAL]...)"

pogin503 [13:46]
ん?関数定義...?

kozo2 [14:24]
｀｀｀> cor
function (x, y = NULL, use = "everything", method = c("pearson", 
    "kendall", "spearman")) 
{
    na.method <- pmatch(use, c("all.obs", "complete.obs", "pairwise.complete.obs", 
        "everything", "na.or.complete"))
    if (is.na(na.method)) 
        stop("invalid 'use' argument")
    method <- match.arg(method)
    if (is.data.frame(y)) 
        y <- as.matrix(y)
    if (is.data.frame(x)) 
        x <- as.matrix(x)
    if (!is.matrix(x) && is.null(y)) 
        stop("supply both 'x' and 'y' or a matrix-like 'x'")
    if (!(is.numeric(x) || is.logical(x))) 
        stop("'x' must be numeric")
    stopifnot(is.atomic(x))
    if (!is.null(y)) {
        if (!(is.numeric(y) || is.logical(y))) 
            stop("'y' must be numeric")
        stopifnot(is.atomic(y))
    }
    Rank <- function(u) {
        if (length(u) == 0L) 
            u
        else if (is.matrix(u)) {
            if (nrow(u) > 1L) 
                apply(u, 2L, rank, na.last = "keep")
            else row(u)
        }
        else rank(u, na.last = "keep")
    }
    if (method == "pearson") 
        .Call(C_cor, x, y, na.method, FALSE)
    else if (na.method %in% c(2L, 5L)) {
        if (is.null(y)) {
            .Call(C_cor, Rank(na.omit(x)), NULL, na.method, method == 
                "kendall")
        }
        else {
            nas <- attr(na.omit(cbind(x, y)), "na.action")
            dropNA <- function(x, nas) {
                if (length(nas)) {
                  if (is.matrix(x)) 
                    x[-nas, , drop = FALSE]
                  else x[-nas]
                }
                else x
            }
            .Call(C_cor, Rank(dropNA(x, nas)), Rank(dropNA(y, 
                nas)), na.method, method == "kendall")
        }
    }
    else if (na.method != 3L) {
        x <- Rank(x)
        if (!is.null(y)) 
            y <- Rank(y)
        .Call(C_cor, x, y, na.method, method == "kendall")
    }
    else {
        if (is.null(y)) {
            ncy <- ncx <- ncol(x)
            if (ncx == 0) 
                stop("'x' is empty")
            r <- matrix(0, nrow = ncx, ncol = ncy)
            for (i in seq_len(ncx)) {
                for (j in seq_len(i)) {
                  x2 <- x[, i]
                  y2 <- x[, j]
                  ok <- complete.cases(x2, y2)
                  x2 <- rank(x2[ok])
                  y2 <- rank(y2[ok])
                  r[i, j] <- if (any(ok)) 
                    .Call(C_cor, x2, y2, 1L, method == "kendall")
                  else NA
                }
            }
            r <- r + t(r) - diag(diag(r))
            rownames(r) <- colnames(x)
            colnames(r) <- colnames(x)
            r
        }
        else {
            if (length(x) == 0L || length(y) == 0L) 
                stop("both 'x' and 'y' must be non-empty")
            matrix_result <- is.matrix(x) || is.matrix(y)
            if (!is.matrix(x)) 
                x <- matrix(x, ncol = 1L)
            if (!is.matrix(y)) 
                y <- matrix(y, ncol = 1L)
            ncx <- ncol(x)
            ncy <- ncol(y)
            r <- matrix(0, nrow = ncx, ncol = ncy)
            for (i in seq_len(ncx)) {
                for (j in seq_len(ncy)) {
                  x2 <- x[, i]
                  y2 <- y[, j]
                  ok <- complete.cases(x2, y2)
                  x2 <- rank(x2[ok])
                  y2 <- rank(y2[ok])
                  r[i, j] <- if (any(ok)) 
                    .Call(C_cor, x2, y2, 1L, method == "kendall")
                  else NA
                }
            }
            rownames(r) <- colnames(x)
            colnames(r) <- colnames(y)
            if (matrix_result) 
                r
            else drop(r)
        }
    }
}
<bytecode: 0x000000000d4ad950>
<environment: namespace:stats>｀｀｀
例えばR言語のREPLだとこんな感じで ｀cor｀ という相関を計算する関数の定義が見れるんですが （編集済み） 
(REPLで引数無しで関数名だけ書いてenter)
これに相当することをelispのREPLでもできないものかと

pogin503 [22:18]
見る限りではよくわかりませんでした...。 （編集済み） 

pogin503 [22:33]
む、ielm-send-return, ielm-return にアドバイスで仕込めばいけるのかな。

kozo2 [00:44]
情報ありがとうございます。基本的にそういったものは用意されてなくて自作する必要がある，と認識しました

lurdan [21:00]
(symbol-function 'cor) とかではダメ？

takaxp [01:04]
Matlab 的なのが想定されてそう．関数の実装を見たいだけならば，imenu.el でジャンプすれば良さそう．

takaxp [01:05]
helm-swoopとの組み合わせもあるってるびきち先生のブログに書いてあったです．https://github.com/alezost/imenus.el
GitHub
alezost/imenus.el
imenus.el - Imenu for multiple buffers

kozo2 [03:49]
このスレッドに返信しました :
情報ありがとうございます。symbol-function でダメではなかったです。symbol-function が求めていたものぽいです新しい返信を確認する

kozo2 [03:49]
このスレッドに返信しました :
｀｀｀ELISP> (defun square (num) (* num num))
square
ELISP> (symbol-function 'square)
(lambda
  (num)
  (* num num))｀｀｀

kozo2 [03:51]
このスレッドに返信しました :
imenu は ielm で使う方法がわかりませんでした
｀｀｀ELISP> (imenu 'square)
'*** Eval error ***  Unknown imenu item: square｀｀｀


takaxp [13:57]
なるほど．失礼しました:天使の笑顔:

kozo2 [14:03]
いえ imenu の情報も助かります。ありがとうございました

** 2018/01/17
takaxp [18:35]
https://twitter.com/zk_phi/status/953556684437270528
ぜろけー@zk_phi
Emacs で時の流れを感じる on @Qiita https://qiita.com/zk_phi/items/11a419911db861b9211e
Twitter2018年1月17日

yoshitia [18:38]
これはアツイ

takaxp [18:39]
これならモードラインに居場所をあげても良い感じ

zk-phi [19:16]
:祈る: （編集済み） 
QOL高まります

peccu [20:39]
そういえばフレームに対するモードラインみたいなものってあるんでしょうか。
全てのウィンドウに必要じゃないものが場所を占めると分割時に残念な感じに

tak.kunihiro [07:54]
モードラインはバッファに付属すると考えるようです。(setq mode-line-format nil)

zk-phi [11:01]
システムモニタ的なものを書いたときはあきらめてミニバッファに出しました…w https://github.com/zk-phi/symon
GitHub
zk-phi/symon
symon - [Emacs] tiny graphical system monitor

** 2018/01/18
takaxp [12:50]
@ayato-p #org-mode の ivy 話の続きですけど，これって絞り込みのためにキーストロークしている時に
モードラインが上から下に降りてくるんですか？

ayato-p [12:52]
モードラインは固定で広がったままですね

takaxp [12:53]
お．なるほど．
そこは helm と同じですね．
helm では上下二分割していると，一時的にそれが消えて下側がhelmバッファになるので，このあたりがビジュアル的な違いですかね．

ayato-p [12:55]
そうですね :にこっ:

takaxp [12:56]
ほむ．地味だけど使い勝手に影響しそうw その点では私は ivy の方が好きだな．

lurdan [12:57]
helm って auto-resize-mode とかで縮んでいきませんでしたっけ

takaxp [12:58]
お，そうなんですね
helm-autoresize-mode φ(. _. )
helm-always-two-windows なんてのもあったり．まだ helm も使いこなせていないということね:爆笑: （編集済み） 

ayato-p [13:04]
あと、helm-swoop相当のswiperは編集が弱いですね
swiper -> ivy-occur -> ivy-wgrep-change-to-wgrep-mode みたいにやらないと swoop 上で C-c C-e したときのような編集ができないので手間です。

takaxp [13:05]
ほむほむ

ayato-p [13:10]
https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/
https://github.com/syl20bnr/spacemacs/pull/8069/files
この辺参考にすれば一発でいけそうな気もしますが、僕はまだやってないですね(そもそも今朝までできないって思ってたので笑
sam217pa.github.io
Nuclear weapon multi-editing via Ivy and Ag · Samuel Barreto
Replace each occurence of string in your current directory
GitHub
ivy: Add C-c C-e to edit counsel-ag search results by aaronjensen · Pull Request #8069 · syl20bnr/spacemacs
Adds C-c C-e like helm-ag to edit search results in ivy.

takaxp [13:21]
swoopは重宝してるので、試す価値アリです:+1:

tak.kunihiro [13:25]
Occur は生命線なので、標準派です。(multi-occur-in-matching-buffers “\\`[^＊].＊[^*]\\’” regexp t)

tak.kunihiro [13:31]
Occur は中身しか見えず、外身の検索に弱い。(find-dired dir (format “-iregex \“.*%s.*\“” regexp))

shougo [13:49]
helm counsel話が盛り上がってる
話について行かないと

shougo [14:13]
なるほど。
おおむね理解しました
そもそもhelmは一時的に画面構成を変えるのを知らなかった

takaxp [14:48]
一時的とはいえレイアウト崩れるので，実は好ましくないと思ってます．

shougo [15:42]
ふつうに画面分割増やせばよい気もする
なんでウインドウを消すのかな？

takaxp [15:44]
3分割している時は，今いるウィンドウ+helm の2分割に切り替わって，選択後に3分割に戻る．
なんで消すんでしょう
あ
お
今別のを試したら3分割を維持した．にゃーん．
Screen Shot 2018-01-18 at 3.50.06 PM.png 

3分割一番上で M-x すると，helm は上から二番目に候補を出す．
Screen Shot 2018-01-18 at 3.50.13 PM.png 

選択ウィンドウがミニバッファに統一されてるなら ivyのが良いな…

tak.kunihiro [16:27]
M-x のみは  smex  がおすすめ

takaxp [16:29]
command history を優先して表示はしてくれますかね．

tak.kunihiro [16:29]
してくれます。

takaxp [16:30]
あらすてき:うふふ:

lurdan [16:33]
smex が入ってると、counsel-M-x も頻度情報を拾ってくれるようになりますョ

yoshitia [16:38]
単体でsky-color-clockみたいな時刻表示するソフトって検索してもないもんだな
emacs開く機会増えそうで便利

takaxp [16:39]
いいなぁ 育つM-x 好き

ayato-p [18:58]
ivy-smexも一応あるはありますよね

** 2018/01/23
takaxp [04:44]
emacs 26 から popup.el 代替機能(child-frame)が載るのかな？ company-mode でのバグ報告スクショが楽しいことになってますけどw
https://github.com/company-mode/company-mode/issues/745 （編集済み） 
GitHub
Suggest:  Add a frontend based child-frame feature of emacs 26 · Issue #745 · company-mode/company-mode
Emacs 26 add child-frame feature, which can be used to show menu. I have tested with the below example, it is faster than popup.el. so I suggest add a new frontend based this feature (defvar my-ch...
child-frame って複数フレームを透過させて重畳とかエモいこともできるのかな…

takaxp [18:05]
26.0.90 でシンボリックリンクを find-file するとスラッシュが補完される地味な問題が，26.0.91 で解消されていますね．幸せ． （編集済み） 

** 2018/02/01
niku [21:47]
projectile.el をお使いのかたに相談です https://github.com/bbatsov/projectile/compare/master...niku:config_src-dir_and_test-dir?expand=1 みなさまがお使いの言語/フレームワークのプロジェクトでデフォルトの実装フォルダとテストフォルダの名前は何ですか．もし Ruby と Elixir 以外でわかるやつがあれば教えてもらえると PR に含めようと思います．
GitHub
bbatsov/projectile
projectile - Project Interaction Library for Emacs

ayato-p [07:45]
デファクト的な感じならClojureの場合、Leiningenかなという気がするので
テストコマンドは lein test
実装フォルダは src
テストフォルダは test
とかになると思います(実装フォルダが複数になったりするケースはどうしたらいいんだろう…。)

niku [12:59]
ありがとうございます．一晩寝て考えた結果まずリファクタリングのPRを送ろうという気持になりました
https://github.com/bbatsov/projectile/pull/1216
GitHub
Make project settings declarative by niku · Pull Request #1216 · bbatsov/projectile
I found some setting for project could be declared by using projectile-register-project-type. Thanks to #1204, #1207. I beleive we are easy to understand that settings about a project type in the o...

niku [11:06]
さきほど ↑ の PR がマージされました．相談にのってくれた人ありがとうございました．

** 2018/04/16
kosh [17:12]
https://github.com/rocky/elisp-bytecode
rocky/elisp-bytecode
Let's document Emacs Lisp Bytecode (Lisp Assembly Program) instructions
Watchers
12
Stars
52
Forks
2
Last updated
5 days ago
rocky/elisp-bytecode2017年12月19日投稿したメンバー: GitHub

** 2018/04/21
shun [22:32]
最近参加したばかりで，まだ空気がつかみきれていないのですが，質問をしても良いのでしょうか？
良いのだと信じて，質問させていただきます．(ダメなのであれば遠慮なくご指摘ください)
emacsのフォント設定についての質問です．
このあとアップロードする画像のように，英数字と日本語文字の高さがズレてしまっています．
これを揃えたいのですが，何か方法やアイディアなどありますでしょうか？
なお，幅は既に揃っているので， ｀face-font-rescale-alist｀ では上手くいきません．
emacs_ja_font.png 

なお，フォントまわりの設定は以下の通りです．
｀｀｀(set-face-attribute 'default nil :family "Ricty Diminished" :height 120)
(set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Migu 1M"))｀｀｀
正直なところ，フォントまわりのことは全然分かってないので，「こんなワードでググると幸せになれるかもよ」くらいの助言でもすごく助かります．

takaxp [15:28]
質問もちろんOKですがな( ' -')b

takaxp [15:43]
http://asukiaaa.blogspot.jp/2017/11/ubuntuemacs.html

takaxp [15:59]
(似たような問題でRicty辞めてる人居ますねw)

takaxp [17:48]
あー．再現しましたわ．

zk-phi [18:07]
(さわらびゴシックとSource Code Pro併用しようとした時に同じような問題に当たって、諦めてfontforgeでオレオレフォントを合成した記憶があります…)

shun [19:10]
割と闇が深いんですね…
リンク先の方法(｀face-font-rescale-alist｀)は，英数字と日本語文字の幅の比が1:2となることを諦めることになりますよね？
そうするとddskkとかで困ったことに…
フォントを自分で合成するんですか…なるほど．
フォントの知識が無な自分には少しハードルが高いような気もしますが，勉強の機会だと思って調べてみることにします．

takaxp [19:44]
横幅はピッタリ合わせられますけど，縦も同時になるとちょっと面倒ですね．
ラインごと(日英両方入るのもあり)に高さを固定できれば問題無さそうですが，そういう手段あるのかな．ライン間は制御(line-spacing)できますけどね．

shun [20:27]
そういう機能があれば完全に解決しますが果たして…

takaxp [20:28]
ところで縦が揃わないと具体的にどんな問題が生じるのでしょう…
Untitled.gif 

↑これが気持ち悪いとか？

shun [20:30]
特に問題が起きるわけではなくて、ただ単に「気持ち悪い」だけですね。なので、解決できなくても別に支障はないです
その画像では、英数字しかない行なのに日本語の高さに合わせられてるのでしょうか？
僕の環境では、
「英数字のみの行では英数字の高さ」
「日本語が1文字でも含まれると日本語の高さ」
となります。
なので、途中まで英数字だけだった行に途中で日本語を追加すると、急に行の高さが増えて、その行とそこより下の行が全てガタッとずれることになります。
割と鬱陶しいですが、まあ気にしなければ良いだけではありますね。
ずれると言ってもほんの少しですし

takaxp [20:36]
なんとなく状況わかりました．いえいえ，結構そういうの一度気になり始めると精神的に良くないので解決すべきと思います( ' -')b

shun [20:39]
確かにそうですねw
色々と情報ありがとうございます。もう少し調べてみます。

shun [22:14]
すごくいまさらなんですが，上記の画像はgifアニメだったんですね…
スマホで見ていたせいか，ただの静止画に見えていました．
なんか会話が噛みあっていなかったのはそのせいです…すみません…
gifアニメの通りの現象が僕の環境でも起きていて，それが気持ち悪いという話です （編集済み） 
(今はPCで開いているので気付きました)
肝心の行の高さの問題ですが，おかげさまで解決の糸口は見つかりました！
普通にドキュメントのLine Heightの項目(https://www.gnu.org/software/emacs/manual/html_node/elisp/Line-Height.html)にありました．
> A newline can have a line-height text or overlay property that controls the total height of the display line ending in that newline.
実際のサンプルコードとしてこのあたりが参考になります
https://emacs.stackexchange.com/questions/20514/increase-line-spacing-on-top
emacs.stackexchange.com
Increase line-spacing on top
line-spacing adds space at the bottom. Here is what I mean - Image link. The docs say that the space is added below lines of graphic displays. I want the space to be added at the top. How do I do t...
text propertyでやるよりはoverlay propertyでやった方が色々と良いような気がするので，こんな感じで使うのが良いでしょうか．
｀｀｀(ov (line-end-position)
    (line-beginning-position 2)
    'line-height 1.2)｀｀｀
とりあえず ｀eval-expression｀ (｀M-:｀) で試した感じでは期待通りの動作をしているように見えます．
あとはこれを適当なminor modeに組み込んで自動適用する，といったところでしょうか．
諸事情により今日はこの辺で終わりにしますが，近いうちにちゃんと使える形にしたいと思います．

takaxp [00:41]
おお糸口が( ' -')b
Untitled 
(add-text-properties (point-min) (point-max)
           '(line-spacing 0.25 line-height 1.25))
https://stackoverflow.com/questions/26437034/emacs-line-height
stackoverflow.com
Emacs Line Height
I am trying to set the line height of text in an Emacs buffer so there is space above and below the letters. I am trying to decipher the documentation but it makes no sense. There is no line-height
みたいな idea もある模様

** 2018/04/26
ayato-p [07:26]
ちょっとした質問なんですが、プロジェクト毎に「このプロジェクトならこのファイルとこのファイルを開いて、このコマンドを最初に実行して…」みたいな定型作業を一挙にやる上手い方法ありませんか?
例えば画面を縦に3分割して、一番左にmagit-statusを開いておいて、真ん中で.cljファイルを開いてcider-jack-inして…みたいなことをやりたいんですけど、任意のプロジェクトだけで有効にしたいのでどうしたものかと思って…。

blue [07:51]
@ayato-p just ideaなのですが https://github.com/pashinin/workgroups2/blob/master/README.md のようなものを利用する感じでしょうか？ もしかしたらfileを開く作業はこのpackageに任せられるかも。(そのアクションにhookしてcider-jack-in を発火させることもできる？https://github.com/pashinin/workgroups2/blob/master/README.md#hooks)
README.md
pashinin/workgroups2投稿したメンバー: GitHub
README.md
pashinin/workgroups2投稿したメンバー: GitHub
特に自分で触った訳ではないので自信はありませんが、ご参考になれば嬉しいです

ayato-p [08:30]
ありがとうございます!ただ、ちょっと僕の思っているイメージと異なる気がしています。
Emacsが設定や状態を管理するんじゃなくて、プロジェクト側で用意した状態になってほしい、というイメージですね。
たぶんナイーブにやるなら、適当なファイルをプロジェクトルートに置いておいてloadする、みたいになる気がしています。

peccu [08:53]
うろ覚えですがwindows.elとrevive.elの組み合わせで実現できそうだった気がします

ayato-p [08:59]
状態の保存/復元とはイメージが違うんですよね…。どちらかというと毎回最初にやることをやる、みたいなイメージなのです。
あー、でもメジャーモードに対応して、コマンドを実行できるのであれば、たしかにこれでもいいかもしれないですね （編集済み） 
ちょっと試してみることにします!ありがとうございます。

tak.kunihiro [10:03]
こんなのどうですか。;; -＊- eval: (split-window-below) -＊-

takaxp [13:57]
こういう時に projectile.el なのかしら… あとは e2wm.el とか desktop.el とか… すみません適当です．

ayato-p [14:10]
すみません、 ｀;; -*- eval: (split-window-below) -*-｀ の方はちょっと良くわからなかったです… :おじぎ:

projectile にあったら嬉しかったなーとは思いましたが、どうもない気がしています。
e2wmもウィンドウ管理なので、ちょっと違うんですよねー…

takaxp [14:16]
https://github.com/bbatsov/persp-projectile
bbatsov/persp-projectile
Projectile integration for perspective.el
Watchers
3
Stars
50
Forks
8
Last updated
8 days ago
bbatsov/persp-projectile2015年12月20日投稿したメンバー: GitHub
どうかなー．projectile の拡張として転がってそう．

mopemope [14:30]
｀.dir-locals.el｀でやるのでは？

mopemope [14:31]
elasticsearchの中の人がemacsで書いてるので ｀.dir-locals.el｀ をリポジトリにおいてますね （編集済み） 

syohex [14:32]
https://github.com/apple/swift/blob/master/.dir-locals.el

Swiftもなぜかあった.
.dir-locals.el
｀｀｀;;; Directory Local Variables
;;; For more information see (info "(emacs) Directory Variables")

((nil
  (eval let*｀｀｀
 もっと表示する
apple/swift投稿したメンバー: GitHub

ayato-p [15:41]
あー、 ｀.dir-locals.el｀ でできたんですね。 ｀eval｀ 使えないって思ってました :にこっ:

tak.kunihiro [18:59]
マスターファイルの先頭行に -＊- eval: (split-window-below) -＊- と書けば何でも好きな事ができると考えました。

peccu [22:02]
このスレッドに返信しました :
これですね。
https://github.com/elastic/elasticsearch/blob/master/.dir-locals.el
｀.dir-locals.el｀知りませんでした


takaxp [08:48]
org のリポジトリにも入ってますね． Emacs 24以前は.dir-settings.el とφ(. _. )

** 2018/05/05
shun [14:52]
melpaからanythingが消えてるっぽいですね…。
なぜこんなことに…？

masasam [23:40]
https://github.com/melpa/melpa/issues/3004#issuecomment-375912059
anythingがなくなったのは、melpaが認証されていないアップストリームからパッケージを取得するのを拒否する方針になったので
連絡をとっていたけどずっと返事がなかったのが原因です。 （編集済み） 

shun [12:41]
なるほど…。ありがとうございます。
これを機にそろそろhelmに移行した方が良いんですかね。helmは非互換な変更が少し怖いですが、その辺はどうなんでしょうか？
バージョン固定する術を用意して移行するのが良いのかな

tak.kunihiro [13:54]
helm はそれ単体で使うのなら問題はほぼ発生しないです。そうはいっても、helm-for-files が使えないと大変困るので、anything-for-files も呼べるようにしています。

shun [10:51]
なるほど。
実際にhelm-for-filesが使えなくなったことがあったのですか？

tak.kunihiro [12:06]
自分で拡張していた頃はしょっちゅう動かなくなってました (例: helm-for-files-preferred-list をいじるなど)。最近、自分で拡張をやめたところ安定して動いております。
だいたい，こんな感じにしています．
(global-set-key (kbd “C-;“) ’helm-for-files)
(define-key helm-map (kbd “C-;“) ’helm-next-source)
(global-set-key (kbd “C-o”) ’anything-for-files)
(define-key anything-map (kbd “C-o”) ’anything-next-source)
自分は、移行でなく共存という方針です。自家製ツールは anything で作成。 （編集済み） 

shougo [12:20]
更新が頻繁な代わり、互換性は崩れやすいみたいですね
そこは他の人も批判してたと思う

tak.kunihiro [13:44]
詰め切れてないのですが、Windows で helm-input-idle-delay が 0.01 (標準) だと固まることが多いように感じています。 （編集済み） 

roswell [23:45]
#elisp に参加しました。

shun [19:10]
(遅れてしまいすみません…)
なるほど…。僕もanythingはかなり拡張しているので、移行はやめておいて、共存を目指した方が良さそうですね。
日常的に使うものなので、互換性ガン無視なのはちょっと辛いですよね…
Windowsは(コーディングには)滅多に使わないので今のところは関係なさそうですが、そんなこともあるんですね…
ひとまず共存の方向で色々試してみます。ありがとうございましたm(_ _)m

** 2018/05/11
takaxp [09:47]
https://github.com/bbatsov/emacs-lisp-style-guide φ(. _. )
bbatsov/emacs-lisp-style-guide
A community-driven Emacs Lisp style guide
Watchers
45
Stars
532
Forks
33
Last updated
7 hours ago
bbatsov/emacs-lisp-style-guide2014年9月4日投稿したメンバー: GitHub

ayato-p [09:47]
bbatsov w
結構、昔からあったみたいですね。知らなかった…。
それにしても、このオッサン、スタイルガイド好きだなー…
https://github.com/bbatsov?utf8=%E2%9C%93&tab=repositories&q=style-guide&type=&language=
Bozhidar Batsov
Hacker. Emacs fanatic. VP of Engineering @toptal. I'm not the best, but I'm pretty good.
Company
Toptal (@toptal)
Location
Sofia, Bulgaria
URL
http://batsov.com
Repositories
102
@bbatsov2009年7月11日投稿したメンバー: GitHub

takaxp [09:49]
同感ですw スタイラー

niku [09:49]
Ruby のスタイルガイドも書いてますよね
ああ上にリンクが……

ayato-p [09:50]
昔、Ruby書いてたのでrubocopでこの人知っていて、Clojure書きはじめてもClojureのスタイルガイドこの人がやってたので驚いた記憶

niku [09:50]
フォーマッタも書いてくれたらいいな

ayato-p [09:55]
:bbatsov:

** 2018/06/13
roswell [15:47]
Wanderlust  で、
(setq wl-user-mail-address-list
    '("user@company.com"
   "user@isp.com"
   "user@gmail.com"))
として、正常に、動作しているのですが、

(setq wl-from "user@company.com")
(setq isp-smtp-posting-user "user@isp.com")
(setq gmail-smtp-posting-user "user@gmail.com")

(setq wl-user-mail-address-list
    '(wl-from
   isp-smtp-posting-user
   gmail-smtp-posting-user))

とした場合、Summary バッファで、メールのregion refile 等すると
elmo-delete-if: Wrong type argument: char-or-string-p, wl-from
と、ミニバッファーにエラーが表示されます。

リスト中で、wl-from, isp-smtp-posting-user, gmail-smtp-posting-user が
展開される書き方をご教示いただけますか？


syohex [15:52]
quote使わず, ｀list｀使うか  backquoteと comma使うかですかね. 全部展開だと ｀list｀でいいのではないでしょうか ?

｀｀｀;; list
(list wl-from  isp-smtp-posting-user gmail-smtp-posting-user)

;; backtick
`(,wl-from  ,isp-smtp-posting-user ,gmail-smtp-posting-user)｀｀｀

コードを貼るときはコードブロックを使うと見やすいです. backtick(backquote)3つ.

shun [17:45]
こういうのを正しく書くためには、「シンボル」「評価」「quote」あたりの概念をしっかりと理解してないといけないと思うんですが、
その辺がまとまった文献って何かありますかね？
僕自身も、emacs lispを書き始めたばかりの頃はその辺の理解が曖昧で、結構苦労したんですよね。
るびきち本にもあんまりハッキリとは書いていませんでしたし、ネットで調べてもイマイチ適切なものが見つかりませんでした （編集済み） 

roswell [17:49]
@syohex さん　ありがとうございます。
＊scratch＊ で確認した結果、
｀｀｀(list wl-from  isp-smtp-posting-user gmail-smtp-posting-user)｀｀｀
を用いました。

｀｀｀(setq wl-user-mail-address-list
      '(,wl-from ,isp-smtp-posting-server ,gmail-smtp-posting-server))
'((\, wl-from) (\, isp-smtp-posting-server) (\, gmail-smtp-posting-server))｀｀｀
となってしまうので。

syohex [17:53]
カンマを使う場合は, シングルクォートでなく, バッククォート(日本語キーボードだと shift+@ でしたっけ)です.
@shun san

http://amzn.asia/0jBElEa

この本が個人的にはおすすめです. Common Lispで Lispインタプリタを実装する内容です. amazonだと高いですが, ジュンク堂だとわりとありそうです.
amazon.co.jp
対話によるCommon Lisp入門 POD版
対話によるCommon Lisp入門 POD版

tak.kunihiro [17:56]
@shun (elisp) Backquote あたりがいいと思います。
問題は、そこにたどりつけるくらいなら、理解しているということでしょう。

roswell [17:58]
｀｀｀`(,wl-from  ,isp-smtp-posting-user ,gmail-smtp-posting-user)｀｀｀
に関しては、,リスト内の要素を評価するってのを、過去に購入した 
"リスト遊び - Emacsで学ぶLispの世界 - 山本 和彦 著"
で、今日知りました。:おいしい:
いつも、見よう見まねで、そのときに、WebやGNU Emacs Lisp Manual Version 18 2nd DRAFT 製本版  みてってな具合で...
普段 elisp て、Emacsの設定変更程度しか書かないので...
こうして、調べてもわからない場合に、アドバイスいただける場は、ありがたいです。

niku [17:58]
qiita に私がなるほどと思ったよくまとまっていた記事があったのですが思い出せませんでした……

shun [18:01]
@syohex ありがとうございます．本屋で探して立ち読みしてみます．
CommonLispとEmacsLispってどれくらい異なっているのでしょうか？
(上述のシンボル，評価，quoteなどの)根本的な言語仕様は同じという認識で良いのですかね？

roswell [18:03]
@syohex さん
> カンマを使う場合は, シングルクォートでなく, バッククォート(日本語キーボードだと shift+@ でしたっけ)です.
ありがとうございます。バッククォートで正しくなりました。
分かりづらいですね。 list の方が、明快でいいですね。

takaxp [18:03]
マクロに踏み込むと使わざるおえない印象．http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/whenToUseMacros.html
asahi-net.or.jp
On Lisp --- いつマクロを使うべきか
Paul Graham氏の著書On Lispの邦訳を無償で公開しています．Common Lispのマクロに関する貴重な情報がいっぱいです．

shun [18:04]
@tak.kunihiro すみません，意図を捉みかねているのですが，"Backquote"という文献があるということでしょうか？
@niku qiitaにあったのですか．探してみます．

syohex [18:06]
> 上述のシンボル，評価，quoteなどの)根本的な言語仕様は同じという認識で良いのですかね？

@shun その辺は一緒です.  そこまで深く触らない限りは大差ないと思います. 細かいことをいうといろいろありますが, Lisp系言語共通のことを学ぶのであれば, Common Lispや Schemeの方がいいですね. (Emacs Lispは再帰より loop推奨とか あまり Lisp系っぽくないところがありますし)
> 分かりづらいですね。 list の方が、明快でいいですね。

あるものは quote, あるものは評価したいみたいな場合(マクロぐらいしか出番はないですが), back quoteの方が楽ですかね.
@shun C-h f backquote 等で調べられます.

tak.kunihiro [18:09]
@shun (info "(elisp) Backquote")

syohex [18:09]
｀info｀の方を言っていたのか.

takaxp [18:09]
http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/macros.html の逆クォートに一通り言及されてますね．`(a ,b c ,d)は(list ’a b ’c d)と等価であるとか．
asahi-net.or.jp
On Lisp --- マクロ
Paul Graham氏の著書On Lispの邦訳を無償で公開しています．Common Lispのマクロに関する貴重な情報がいっぱいです．

niku [18:11]
これだ https://qiita.com/snmsts@github/items/ef625bd6be7e685843ca
Qiita
'`'と',' - Qiita
#lisp advent calendar 四日目の記事らしいです。 他のカレンダー参加者のレベルが高すぎて困りました。 以下について、利用の方言はCommon Lispです。 処理系は多分cltl1以降に準拠なら大丈夫だと思います。...

shun [18:16]
@syohex なるほど．ありがとうございます．ひとまず先程教えていただいた本を眺めてみます．
@tak.kunihiroありがとうございます．
確かにこれを初心者が読むのは厳しいですね…

shun [18:22]
@niku ありがとうございます． backquoteをネストするとは…なかなか楽しげなことをしていますねw
@takaxpありがとうございます．リンク先の文献は色々とまとまっていて面白そうですね．後程読んでみたいと思います．
あ，なんか話題が混線していたからか，僕の書き方が悪かったからなのかは分かりませんが，
僕の当初の意図はbackquoteに限らず，elispにおける評価機構全体をまとめた文献ということでした．
いずれにせよ色々と面白そうな文献を挙げていただいたので，電車内などで読んでみることにします．

** 2018/07/02
takaxp [19:45]
( ' -’)b https://github.com/lassik/emacs-format-all-the-code
lassik/emacs-format-all-the-code
Auto-format source code in many languages with one command
Stars
14
Language
Emacs Lisp
lassik/emacs-format-all-the-code2018年3月24日投稿したメンバー: GitHub

これから入門って人にはぜひ最初から使って欲しい感じ．

** 2018/07/09
mhatta [20:21]
愛用している小松さんのword-count-modeをMELPAに入れてもらおうとしたらelispの書き方が古すぎるのでダメと言われてしまった
https://github.com/melpa/melpa/pull/5587
mhatta
#5587 Add word-count
＊Brief summary of what the package does＊

A minor mode which shows the number of characters/words/lines of the current buffer in the modeline.

＊Direct link to the package repository＊

https://github.com/mhatta/word-count-mode

＊Your association with the package＊

I assume I'm the current maintainer.

＊Relevant communications with the upstream package maintainer＊

This elisp was originally written by Hiroyuki Komatsu years ago. After a long period of inactivity (and the upstream website has long gone), Tomasz Skutnik salvaged it from Wayback Machine and made it work with Emacs 24. I made it work with Emacs 26.

I contacted with Tomasz via e-mail, and with his blessing, I prepared for MELPA.

＊Checklist＊

Please confirm w… もっと表示する
Comments
4
melpa/melpa2018年6月29日投稿したメンバー: GitHub
古い言われてもなあ…
何か代わりになるようなものはあるだろうか

syohex [20:26]
modernに書き直すとか. top levelでいろいろしているのはあまりいい印象を受けませんね. loadしただけで挙動が変わってしまうので.

mhatta [20:27]
もともとmellとかいうライブラリで書かれていたのを、たぶん一つにまとめたんですよね
何か他にリアルタイムで文字数カウントするようなelispありますかね
wcはちょっと違うしなあ

syohex [20:30]
リアルタイムはなさそうですね.

mhatta [20:31]
Wordライクで重宝してるんだが、あんまりそういう需要ないのかなあ（わらい
まあGithubに置いておけばCaskで落とせるから、別にいいんだけど…

** 2018/07/12
kosh [01:52]
view-modeとedebugを同時に有効にするとview-modeのキーマップが優先されるのが不便
一応 e (view-exit) キーで解除はできる

** 2018/08/17
takaxp [21:44]
https://emacs.cafe/emacs/javascript/indium/2018/08/14/indium.html
emacs.cafe
The new Indium
Now that Indium 2.0 is around the corner, it’s about time to write this post!
良さげ( ' -’)b

** 2018/08/30
tak.kunihiro [08:13]
ESS のおすすめ設定
(setq ess-ask-for-ess-directory nil
     ess-default-style 'RStudio
     ess-eldoc-show-on-symbol t)
(setq-default ess-dialect "R")
(ess-toggle-underscore nil)

ESS のおすすめ学習項目
(info "(ess)ESS tracebug")

tak.kunihiro [08:22]
org-babel では org-table をデータ元とすることができます。ess-mode で org-table をデータ元とするには工夫が必要です。

** 2018/09/19
conao3 [20:58]
elisp力が低すぎてこんな感じの関数ができました。
｀｀｀(defun parsestring (str)
  "string to key_code

Example
(parsestring \"k1\")
 -> [((key_code . \"k\"))
     ((key_code . \"1\"))]"
  
  (format "[%s]" (mapconcat #'(lambda (x)
                                (format "((key_code . \"%s\"))" x))
                            (cdr (split-string str "")) "")))｀｀｀
Exampleで書かれてるような返り値を文字列で得たいと考えています。
｀(split-string str "")｀ が ｀("" "k" "1" "")｀ を返すので先頭を落としてmapconcatしてますが、末尾を落とす方法がわからず止まってしまいました。
そもそも文字列を一文字ずつ処理したい時のテンプレートなどありますでしょうか。
初心者質問で申し訳ありません。

syohex [21:02]
あまりに Emacsが古すぎるとダメですが, split-stringの第三引数(OMIT-NULL)を tにすると空文字列が除去できます.
> そもそも文字列を一文字ずつ処理したい時のテンプレートなどありますでしょうか。

｀｀｀(cl-loop for c across "hello world"
     collect c)

(mapcar (lambda (c) c) "hello world")｀｀｀

とかですかね. 数値でくるので, 文字列として扱いたければ char-to-stringをかます必要がありますが.

conao3 [21:10]
なるほど。mapcarは文字列を受け取ることが出来るんですね。

syohex [21:11]
そのあたりの関数は sequenceなら何でも扱えます.

https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html
seqパッケージがあるから今は seqの方を使うほうがいいのかな.

conao3 [21:13]
なるほど。seq.elっていつか見て何故か苦手意識持ってました。。

conao3 [21:16]
今回はsplit-stringの第三引数をtにすることで解決できましたが、「リストの末尾を削除する」というのはelispではどうなるのでしょうか？

syohex [21:17]
古典的な方法だと

｀｀｀(reverse (cl-rest (reverse '(1 2 3))))｀｀｀

こんな感じですかね.

conao3 [21:18]
φ(..) cl-rest

syohex [21:19]
cdrです.
car = cl-first, cdr = cl-rest

conao3 [21:19]
なるほど。いまソース見て気づきました。
｀｀｀(defalias 'cl-caaar 'caaar)
(defalias 'cl-caadr 'caadr)
(defalias 'cl-cadar 'cadar)
(defalias 'cl-caddr 'caddr)
(defalias 'cl-cdaar 'cdaar)
(defalias 'cl-cdadr 'cdadr)
(defalias 'cl-cddar 'cddar)
(defalias 'cl-cdddr 'cdddr)
(defalias 'cl-caaaar 'caaaar)
(defalias 'cl-caaadr 'caaadr)
(defalias 'cl-caadar 'caadar)
(defalias 'cl-caaddr 'caaddr)
(defalias 'cl-cadaar 'cadaar)
(defalias 'cl-cadadr 'cadadr)
(defalias 'cl-caddar 'caddar)
(defalias 'cl-cadddr 'cadddr)
(defalias 'cl-cdaaar 'cdaaar)
(defalias 'cl-cdaadr 'cdaadr)
(defalias 'cl-cdadar 'cdadar)
(defalias 'cl-cdaddr 'cdaddr)
(defalias 'cl-cddaar 'cddaar)
(defalias 'cl-cddadr 'cddadr)
(defalias 'cl-cdddar 'cdddar)
(defalias 'cl-cddddr 'cddddr)｀｀｀
これは歴史上の理由なんですかね。。。

syohex [21:22]
元々の名前のことですかね ? ｀cl-｀ prefixのこと ?

conao3 [21:23]
あ、もともとあるのをなぜaliasしてるんだろうと思いまして。。

syohex [21:24]
それは commonlisp由来のものは全部 cl-をつけるべきとなったからです. (本質的に何の意味もないことだと思いますが. Emacs Lispは namespaceもないので)


conao3 [21:25]
なるほど。そこら辺の話闇深そうですね。。。
ありがとうございました！

conao3 [19:12]
このスレッドに返信しました :
別の調べごとをしていたのですが、そのものな関数がsubr.elに実装されていたので共有します。
｀｀｀(butlast '(a b c))
;; => (a b)
(butlast '(a b c) 2)
;; => (a)

(last '(a b c))
;; => (c)
(last '(a b c) 2)
;; => (b c)｀｀｀

** 2018/09/25
shun [01:45]
emacsで「tooltip的なもの」を表示する場合の選択肢って，
「 ｀overlay｀ で頑張る」か「 ｀tooltip.el｀ を使う」かの二択という認識で合ってますか？
目的としては以下の2つ，特に前者を想定しています．
- ｀company-mode｀ や ｀ddskk｀ などにおける候補リストのインライン表示
- ｀eldoc｀のようなドキュメントのインライン表示
(後者は現状ではminibufferに表示していますが…) （編集済み） 

shun [01:56]
文章に「全角文字」や「widthの異なる文字」が混入している場合に「候補リストのインライン表示」のレイアウトが崩れてしまい，少し悲しい気持ちになるのです．
｀comapny-mode｀ や ｀ddskk｀ は ｀overlay｀ を使って頑張って表示していると(ソースを読まずに)推測しているのですが，
それが正しいのであれば(全角文字はともかく)「widthの異なる文字」の混入への対処はほぼ不可能ですよね．
前に代替案として ｀tooltip.el｀ を試してみたのですが，
確か表示された文字列の更新があまりうまくできなかった記憶があります．

shun [02:05]
この辺りの状況ってどうにか改善できないものでしょうか…

syohex [10:07]
>｀overlay｀ で頑張る」か「 ｀tooltip.el｀ を使う」かの二択という認識で合ってますか？

そうです.
｀-nw｀で使う人もいるので, そうせざるを得ないというのもあると思いますが.

shun [17:17]
たしかに ｀-nw｀ を考慮すると厳しいのかもしれませんが、あくまでデフォルトの動作として ｀overlay｀ を使用し、オプションとしてリッチな表示ができても良いのではないかと思います。
しかし既存のものにはそういうのはないのですかね…。

tak.kunihiro [12:26]
今のところ skk-show-tooltip t で困ったことありません。

shun [07:16]
それは知りませんでした。ありがとうございます。
試してみたところ、少なくともddskkに関してはこれで解決しそうです。

** 2018/10/01
takaxp [14:42]
https://twitter.com/shima_tetsuo/status/1046634225749831680
島鉄雄@shima_tetsuo
ちょっとしつこいかもしれないけど…
先日 Qiita にアップした GUI 版 Emacs で画像をポップアップする記事を、ツールチップを使用するものに変更しました。
非常にシンプルになったんで、この件はもうこれで最後にします…

https://qiita.com/chuntaro/items/be3451c1dd27e8e61cd3
Twitter2018年10月1日
;

peccu [15:40]
emacsformacosx.com の26.1-2ではツールチップに ｀a｀ が表示されるだけだった。何か足らないのかな。。。

takaxp [15:42]
Mac では動作未確認のようですね
Screen Shot 2018-10-01 at 15.44.39.png 


peccu [16:18]
はい。試してみたのですが動かず。というところでした

takaxp [20:04]
｀｀｀(propertize "a" 'display image)｀｀｀
みたいに画像埋め込むのはモードラインに画像突っ込む時に使われているみたいですね．なんで今回は出ないんだろう．
画像というよりIconという方が良いのかな

peccu [10:56]
モードラインの画像、nyan-cat出てるのでできそう

takaxp [11:03]
なるほど

** 2018/10/08
poipoi [09:02]
Mac OS(El Capitan)でEmacs 25.2を使ってるのですが、このエラーを対処したことのある方いらっしゃいますか。
スクリーンショット 2018-10-08 8.59.47.png 


takaxp [12:07]
https://blog.vifortech.com/posts/emacs-tls-fix/
Vifortech Solutions - Blog
Fixing Emacs' unknown and untrusted authority TLS error
I recently upgraded my MacOS version of Emacs to 25.3 and was looking to install a couple of new packages. Installing packages I have the following in my init.el (or equivalent): (require 'package) (
2017年10月24日
上の方にあるリンクですけど，↑も同じ理由な気がする． （編集済み） 

poipoi [14:10]
リンクのアドバイスを試したところエラーが解消されパッケージがダウンロードできました。助かりました。ありがとうございます。:スマイリー:

** 2018/10/10
takaxp [09:59]
https://qiita.com/sensuikan1973/items/74cf5383c02dbcd82234
Emacs になさそう（私が知らない）のは，
GitLens，Output Colorizer，Partial Diff だけかな．
後は同等パッケージがあるはず．
Magit 使いからすれば，GitLensは同等といえちゃうかな？
Messages のカラー化は盲点だった．
Partial Diff は ｀ediff-regions-linewise｀ で良さそう．

takaxp [10:11]
出力のカラー化は，ログファイルに限れば logview ってのあるんですねφ(. _. ) https://github.com/doublep/logview
doublep/logview
Emacs mode for viewing log files.
Stars
51
Language
Emacs Lisp
doublep/logview2015年8月3日投稿したメンバー: GitHub

tarao [10:13]
GitLensのコミット単位の比較はMagitでなんかたぶんできそうで、blameはgit-messengerそのままな感じがしますね

takaxp [10:16]
φ(. _. ) http://syohex.hatenablog.com/entry/20130515/1368629961
syohex’s diary
git-messenger.elを書いてみました - syohex’s diary
TokyoVim #14 に参加して git-messenger.vim を作ってみた - sorry, uninuplemented: の Emacs版です。まだその行のコミットログをポップアップする 機能しかありません。 リポジトリ https://github.com/syohex/emacs-git-messenger コード popup.elが必要になりますので、利用する際は前もってインストールして おいてください。 ;;; git-messenger.el --- Port of gitmessenger.vim ;; Copyright (C) 2013 by Syohei YO…
2013年5月15日
なるほどね〜
VSCode のキレイなUI観てると，やはりこのギャップは埋めたくなる…

takaxp [10:23]
｀magit-blame｀
Screen Shot 2018-10-10 at 10.23.47.png 


takaxp [10:44]
｀(setq ediff-split-window-function 'split-window-horizontally)｀ を設定して
｀magit｀ で ｀ediff｀ 呼ぶと side-by-side で比較できますね．
Screen Shot 2018-10-10 at 10.44.19.png 

でも何かが違う…

takaxp [11:05]
｀logview.el｀ 便利だった．
Screen Shot 2018-10-10 at 11.05.29.png 


peccu [11:13]
Rainbow csv良さげ

tarao [11:20]
ediffのside-by-side、追加/削除されてる行の分綺麗に揃ってくれないので、なんかその辺をいい具合にするやつ、というのを作りかけていたけど、放置してしまっていて、どこまでできていたのか忘れてしまった (たぶんside-by-sideにするの自体はだいたいできてたはず...)
https://github.com/tarao/ediff-side-by-side-el
tarao/ediff-side-by-side-el
Language
Emacs Lisp
Last updated
2 years ago
tarao/ediff-side-by-side-el2016年6月27日投稿したメンバー: GitHub
たぶん行数の違いをうまいことoverlayで埋めるのと、スクロールを追従するのをやってくれる、はず （編集済み） 

takaxp [11:26]
おお．試してみます( ' -’)b

tarao [11:32]
なんか使い方も忘れてしまった(ひどい)のでけっこうむずいとおもいます...
本当はGitHubに書き込めるようにするのグッズを揃えていって、レビューをEmacsでやりたいという壮大な目標があったんですが、diffをいい具合にするところまでで頓挫してしまったのでした。
おかげでレビューは相変わらずブラウザでやってしまうのでdiffをいい具合にするのも普段は使ってないという始末です。
あ、なんかこれ使い方のヒントっぽい:
https://github.com/tarao/dotfiles/blob/117f01c8d57f59dfcd74923e52260f14aaca1448/.emacs.d/init/ediff.el
.emacs.d/init/ediff.el
｀｀｀(setq-default ediff-window-setup-function 'ediff-setup-windows-plain
              ediff-keep-variants nil
              ediff-sbs:wide-display-grows-to 'left)

(with-eval-after-load-feature 'winner｀｀｀
 もっと表示する
tarao/dotfiles投稿したメンバー: GitHub
基本的には ｀(require 'ediff-side-by-side)｀ してるだけに見える

takaxp [19:42]
私がヘタレなせいで，すぐ動かなかった．
あと http://emacs.rubikitch.com/diffview/ も見つけた．
るびきち「新生日刊Emacs」
diffview.el : 【パッチブラウザ】unified diffをわかりやすくside-by-sideで閲覧する
概要 unified diffは、side by sideで見るとわかりやすいです。 diffview.el はそれを行ってくれます。 M-x diffview-current はカレントバッファ全体、 M-x diff・・・
2015年9月27日

ardggy [00:45]
#elisp に参加しました。

tarao [12:07]
diffviewたぶん事前に調べてたとおもいますが、なにかが気に入らなかったような気がしますね (なんだったかは全く覚えてませんが...)
magitと食い合わせが悪い??

takaxp [12:10]
実は、私の環境のmagitが ediff 呼び出しでエラー吐くんで、まだ正しい比較に入れないのが現状です（汗

tarao [12:10]
なるほどー


takaxp [12:10]
のんびりお待ちくださいw

** 2018/10/22
takaxp [06:01]
https://github.com/purcell/ns-auto-titlebar
purcell/ns-auto-titlebar
In Emacs, set the MacOS transparent titlebar to match the current theme
Stars
2
Language
Emacs Lisp
purcell/ns-auto-titlebar2018年10月21日投稿したメンバー: GitHub

** 2018/11/01
conao3 [00:13]
今use-packageのようなものを書いています。
しかし慣れないマクロを使っているせいか、思い通りに行きません。

具体的にはscratchにある通り、 ｀:unless｀ キーワードを使ったときなどに ｀(if t｀ などが何故かついてしまいます。
コードの全体は https://github.com/conao3/leaf.el にあります。お時間ありましたら考えていただけないでしょうか。

コードの主要部
｀｀｀(defmacro leaf-core (name args)
  (let ((args* (leaf-sort-values-plist
        (leaf-normalize-plist
         (leaf-apply-defaults args) t))))
    (leaf-process-keywords name args*)))

(defmacro leaf (name &rest args)
  (declare (indent 1))
  "leaf macro"
  `(leaf-core ',name ,args))｀｀｀

scratchでの結果
｀｀｀(macroexpand '(leaf foo :unless t))
(if t nil (progn (require (quote foo) nil nil)))

(macroexpand '(leaf foo :when t))
(if t (progn (progn (require (quote foo) nil nil))))

(macroexpand '(leaf foo :if t))
(if t (progn (require (quote foo) nil nil)))

(macroexpand '(leaf foo :desabled t))
(progn (require (quote foo) nil nil))

(leaf-sort-values-plist
        (leaf-normalize-plist
         (leaf-apply-defaults '(:unless t)) t))
(:unless (t) :require (t))


(leaf-process-keywords 'foo '(:unless (t) :require (t)))
(unless t (progn (require foo nil nil)))｀｀｀
conao3/leaf.el
Support your setting init.el like use-pacage
Language
Emacs Lisp
Last updated
8 minutes ago
conao3/leaf.el2018年10月24日投稿したメンバー: GitHub

conao3 [00:37]
下2つの実行結果は ｀leaf-core｀ マクロの ｀let｀ の中身の例を示しています。

一番下の結果では ｀(unless｀ から始まる目的のリストを ｀leaf-process-keywords｀ が返しているのですが、
一番上の結果ではなぜか ｀(if t nil｀ などの要素に変換されており大混乱しています。。

conao3 [08:00]
一度寝て起きたら解決しました。 ｀macroexpand｀ で ｀unless｀ マクロも展開されているんですね。。

別件ですが、 ｀use-package｀ も ｀use-package｀ マクロから ｀use-package-core｀ マクロを呼ぶような構成になっています。
しかし ｀macroexpand-1｀ では ｀use-package｀ マクロと ｀use-package-core｀ マクロの2つのマクロが解決されているように思えます。
この動作はどのようにして実現されているのでしょうか・・？？

｀｀｀(macroexpand-1 '(leaf foo :when t))
 => (leaf-core (quote foo) (:when t))

(macroexpand-1 '(use-package foo :when t))
 => (when t (require (quote foo) nil nil))｀｀｀

conao3 [12:37]
Capture 2018-11-06 12.35.27.png 

続けて失礼します。前回の件はマクロの返り値を ｀macroexp-progn｀ という関数から受け取ることで実現していることがわかりました。
いろいろいじっていたのですが、マクロの動作で理解できないことが起こったので、続けて申し訳ありませんが質問させてください。

1. use-package-coreの ｀use-package-process-keywords｀ にてname変数がカンマされていない。直接実行した場合は当然エラーになるが、use-packageマクロから使われたときはなぜか動く。

2. leaf-coreを直接実行した場合は当然 ｀name｀ 変数が展開されるが、leafマクロから実行された場合はなぜか展開されない。
なお ｀name｀ 変数は展開されていないが、 ｀args｀ 変数は展開されているように見える。

use-packageは検証用に抜粋したものです。よろしくおねがいします。
無題 
(defmacro leaf-core (name args)
 `(let* ((name* ',name)
	 (args* (leaf-sort-values-plist
		 (leaf-normalize-plist
		  (leaf-apply-defaults ,args) t))))
   (prin1 name*)
   (prin1 args*)
   (leaf-process-keywords name* args*)))
​
(defmacro leaf (name &rest args)
 (macroexp-progn
  `(,(leaf-core name args))))
​
(defmacro use-package-core (name args)
 `(let* ((args* (use-package-normalize-keywords ,name ,args)))
   (use-package-process-keywords name args*)))
​
(defmacro use-package (name &rest args)
 (macroexp-progn
  (use-package-core name args)))
折りたたむ 

syohex [13:38]
｀macroexp--expand-all｀等で実際に展開してはどうでしょうか.

conao3 [14:33]
Capture 2018-11-06 14.33.36.png 

｀macroexp--expand-all｀ でそれぞれを展開しました。
leaf-coreの展開結果を見ると ｀name*｀ に ｀'foo｀ が代入されているように見えますが、実際はなぜか ｀name｀ と出力されています。。。

｀use-package-core｀ の展開結果も同様に ｀use-package-process-keywords｀ にはクオートされていない ｀name｀ が渡たり、void-variableエラーが出るように思えますが、 ｀use-package｀ マクロは通常通り動いているように見えます。。

conao3 [15:13]
無題 
(defun tmpfunc (name args)
 `(progn (require ',name) ,args))
​
(defmacro leaf-core (name args)
 `(let* ((name* ',name)
	 (args* ,args))
   (prin1 name*)
   (prin1 args*)
   (princ "\n")
   (tmpfunc name* args*)))
​
(defmacro leaf (name &rest args)
 (macroexp-progn
  `(,(leaf-core name args))))
​
;; ==== scratch ====
(macroexpand '(leaf foo :when t))
 => name(:when t)
   (progn (require (quote name)) (:when t))
​
​
(leaf-core foo '(:when t))
 => foo(:when t)
   (progn (require (quote foo)) (:when t))
折りたたむ 
小さいコードを用意しました。
leaf-coreを直接呼ぶと僕が期待するS式が返っているのですが、leafから呼ぶとnameという仮引数がそのまま渡ってしまい、不正なrequire文を生んでいます。

そもそも ｀leaf-core｀ で ｀leaf｀ の第１引数をクオートしてtmpfuncに渡しているので、tmpfuncではクオートはいらないのではないか？？と思っています。。

kosh [15:34]
｀｀｀(defmacro foo-inner (x y)
  `(list ',x ,y))
(defmacro foo (name args)
  (foo-inner name args))

(symbol-function 'foo)
;;=> (macro lambda (name args) (list 'name args)) ; `foo-inner' が展開される
(macroexpand '(foo-inner (+) (*)))
;;=> (list '(+) (*))
(macroexpand '(foo (+) (*)))
;;=> (name (*))｀｀｀
（編集済み）
マクロ定義内でマクロをバッククオート(`)なしで呼び出すと、インラインで展開されるのが原因ではないでしょうか

conao3 [15:46]
なるほど。ありがとうございます。
こちらでも、もう一度考えてみます。

conao3 [15:58]
｀｀｀(pp-to-string (symbol-function 'leaf))
"(macro lambda
       (name &rest args)
       (macroexp-progn
    (list
     (let*
         ((name* 'name)
          (args* args))
       (prin1 name*)
       (prin1 args*)
       (princ \"\\n\")
       (tmpfunc name* args*)))))
"｀｀｀
leafを ｀symbol-function｀ でみてみると、このように展開されており、leaf-coreの展開結果が期待通りでありませんでした。
そして ｀use-package-core｀ のnameがなぜカンマされていないかも分かりました。マクロをこのように使うと混乱しますね。。。
ありがとうございました！！

** 2018/11/08
tak.kunihiro [13:41]
user-emacs-directory を変更しようと思ったら server-auth-dir がややこしい．妥協して (setq server-auth-dir "~/.emacs.d/server/") としよう．

conao3 [14:41]
ディレクトリを直接設定すると.emacsのポータビリティが下がると思います。。
user-emacs-directory下に置かない理由はなにかあるのでしょうか？？

tak.kunihiro [19:53]
user-emacs-directory の下に server-file 置くと emacsclient --server-file=<server-file> と指定することになります．外から user-emacs-directory を参照できないため、ディレクトリを直接指定する必要が出てきます。こちらもまたポータビリティの低下で、困るというわけであります．

conao3 [19:59]
なるほど、emacsclient関連の不都合なんですね。emacsclientは便利そうだなと思いつつ、あまり使いこなせてません。。
ありがとうございますー！

** 2018/11/11
conao3 [2018年11月11日 09:53]
昨日のOrg Mode会のあとに話させてもらった、今ハマっていることについて質問させてください。
再現コードはgistに上げました。
https://gist.github.com/conao3/51214524263617771e5a8b3285b5a7b5


3 件の返信
kosh [2ヶ月前]
"run-testの動作確認" の引数がquoteされているため、内部の ｀'a｀, ｀(return-symbol)｀は評価されず、シンボルではなくconsセルそのままの形で比較されていますね （編集済み）


kosh [2ヶ月前]
たとえば equal2 は multi-comp 内部では ｀(equal '(return-symbol) '(quote a))｀ と扱われ、見た目の異なる「リスト同士の比較」なので当然 nil が返ります


チャンネルにも投稿済
conao3 [2ヶ月前]
ありがとうございます。 ｀(multi-comp key a b)｀ を ｀(multi-comp key (eval a) (eval b))｀ に変更することで全てのテストが通るようになりました。
｀(eval 'a)｀ は当然エラーになるので、 ｀run-test｀ の中でも ｀(eval a)｀ と書いたらエラーになると勘違いしていました。
実際のところ、 ｀(eval ''a)｀ となっていて、この式は ｀'a｀ を返すんですね！ありがとうございました。

あと補足するなら、テスト用の引数と期待値はどちらも（式よりは）定数の方がより良いかと。evalで評価しないと分からない値をそのままテストに使うと後々面倒なことになるかも

conao3 [23:44]
むむ。テストケースをこのように管理すると、定数でも式でも必ずevalしないといけないと理解したのですが違うのでしょうか。
逆にあまり考えずにevalできるので、変に条件分岐しなくて良いので喜んでいたのですが。。

例えばeq1は定数と定数のテストですが、evalしないとするとこれを通すためにはどういう方法があるのでしょうか？

kosh [22:19]
@conao3 さんがやりたいのは ｀run-test｀ の動作確認のハズなので単純にクオートなし ｀'(("eq1" (:eq a a)) ...)｀ で良いんじゃないですかね。
定数が～というのは、例えば関数fに対する単純なブラックボックステスト f(x)=y を行いたいなら x と y は極力シンプルな値（≒定数）のほうがデバッグが簡単になるという話です。仮に引数 x の評価時に print 文が入っていたり10秒待つなどの副作用があると、問題点が f なのか x なのかが一見して分かりにくくなります。 （編集済み） 

kosh [22:58]
ついでに上記は ｀run-test｀ が関数だったらの話で、汎用的なテストを行いたいのであれば ｀cl-assert｀ や ert を利用する方が安心安全。それらは大抵関数ではなくマクロとして書かれています

conao3 [09:27]
なるほど。ありがとうございます！
リストの段階で評価するようにすれば全部のテストが通りますね。
｀｀｀;; run-testの動作確認
(run-test `(("eq1" (:eq a a))
        ("eq2" (:eq ,(return-symbol) ,(return-symbol)))
        ("equal1" (:equal a a))
        ("equal2" (:equal ,(return-symbol) a))
        ("equal3" (:equal ,(return-symbol) ,(return-symbol)))))
eq1 is passed
eq2 is passed
equal1 is passed
equal2 is passed
equal3 is passed
nil｀｀｀
ertを使えればもちろん話は簡単になるんですが、use-packageもどきのleaf.elをEmacs-22から動かしたいという縛りをしてるので関連ツールから書き直しているところです。。
上記のコードは https://github.com/conao3/srt.el から主要部を抜き出したものでした。質問に答えていただき、ありがとうございます！
conao3/srt.el
Simplify extended Emacs unit test framework
Language
Emacs Lisp
Last updated
14 hours ago
conao3/srt.el2018年11月7日投稿したメンバー: GitHub

** 2018/11/14
conao3 [18:39]
無題 
(srt-deftest leaf-test/:if-1
 (:equal
  (macroexpand-1 '(leaf foo :if t))
  '(if t
	(progn
	 (require (quote foo) nil nil)))))
​
(srt-deftest leaf-test/:if-2
 (:equal
  (macroexpand-1 '(leaf foo :if (and t t)))
  '(if (and t t)
	(progn
	 (require (quote foo) nil nil)))))
​
(srt-deftest leaf-test/:if-3
 (:equal
  (macroexpand-1 '(leaf foo :if nil))
  '(if nil
	(progn
	 (require (quote foo) nil nil)))))
	 
;; ...
​
;; ほとんどのテストケースが (srt-deftest NAME (:equal (macroexpand 'FORM) 'EXPECT))
;; -> (FORM 'EXPECT) から (:equal (macroexpand 'FORM) 'EXPECT) を返すマクロの作成
​
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
​
;; leafの簡略版
(defmacro package-require (package)
 `(require ,package))
​
;; FORMをマクロ展開してEXPECTとequalで比較するテストケースを作成するマクロ
(defmacro match-expansion (form expect)
 `(:equal (macroexpand ',form) ,expect))
 
(srt-deftest package-require0
 (:equal (macroexpand '(package-require 'use-package))
	 '(require 'use-package)))
​
(srt-deftest match-expansion0
 (:equal (macroexpand
	  '(match-expansion
	   (package-require 'use-package)
	   '(require 'use-package)))
	 '(:equal
	  (macroexpand
	   '(package-require 'use-package))
	  '(require 'use-package))))
  
(srt-deftest match-expansion1
 (match-expansion
  (package-require 'use-package)
  '(require 'use-package)))
  
折りたたむ 

conao3 [18:45]
度々申し訳ありません。。
「マクロが要求するS式が典型的なので、そのS式をマクロで生成したい」という要求は有り得る話だと思いますが、いろいろ試してみたものの、うまく行かなかったので質問させてください。
use-packageはertを使っているのですが、use-package-test.elでは「shouldマクロ内にmacroexpandで囲われたuse-packageを展開する」match-expansionというマクロを使用しています。
それを真似して自作のsrtでも使おうと思ったのですが、match-expansionが展開されずにそのままsrtに渡ってしまい、テストが失敗します。
ert-deftestはcl-defmacroで定義されており、そこに原因があるのかなと思いますが、普通のdefmacroではこのような簡略化はできないのでしょうか。。

コード中のテストでは ｀package-require0｀ ｀match-expansion0｀ はpassしますが、 ｀match-expansion1｀ は（展開されずに渡されているため） ｀match-expansion｀ を比較関数に使用しようとして落ちてしまいます。。
kosh [22:15]
｀(srt-deftest (NAME KEYS))｀ はリーダーが読み取りした時点で ｀KEYS｀ の形が ｀(:key form expect)｀ であることを期待してる（らしい）ので match-expansion1 が失敗するのは当然といえば当然。マクロ展開後のS式はそのまま評価できる形であることが基本パターンなので、内部でさらに式を加工しようとしてややこしくなっているのでは？

conao3 [22:19]
なるほど。srt-deftestよりmacro-expansionが先に評価されて渡されてほしいんですが、elispのリーダーの制約として難しい。ということですかね。。

conao3 [1ヶ月前]
@kosh さんに教えていただいた、 ｀symbol-function｀ でmacroかどうか判別できることに気づいて、srt-deftestの先頭にマクロだったら展開する処理を足して ｀match-expansion1｀ のテストが通ることを確認しました。
｀srt.el｀ の実装では関数のときも評価することにしました。
｀｀｀(defmacro srt-deftest (name keys)
  (let ((symbol (car keys)))
    (if (fboundp symbol)
      (if (eq (car (symbol-function symbol)) 'macro)
      (setq keys (macroexpand keys))
    (setq keys (eval keys)))))
;; ...
)｀｀｀

** 2018/11/20
takaxp [14:39]
https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/
vxlabs
Configuring Emacs, lsp-mode and Microsoft’s Visual Studio Code Python language server.
In a previous post I showed how to get Palantir’s Python Language Server working together with Emacs and lsp-mode. In this post, we look at the brand new elephant in the room, Microsoft&#8217…
2018年11月19日
ﾉｰｺﾒﾝﾄで…

** 2018/11/26
takaxp [15:43]
作ろかなーと思っていたやつ．タイマー実装だけど，やはり他に手がないかな．https://github.com/mnp/dispwatch/blob/master/dispwatch.el
dispwatch.el
｀｀｀;;; dispwatch.el --- watch displays

;; Copyright (C) 2018 Mitchell Perilstein

;; Author: Mitchell Perilstein <mitchell.perilstein@gmail.com>｀｀｀
 もっと表示する
mnp/dispwatch投稿したメンバー: GitHub

** 2018/12/03
takaxp [16:41]
https://gist.github.com/takaxp/1e1d57164af68ad7f995dd8b83a1b3ee
この疑似 hook を使って，hl-line を制御する実験（カーソル移動で hl-line 表示．指定秒後に消す）
Untitled 
(defvar my-hl-active-period 2
 "Disable `hl-line' after this period")
(defun my-hl-line-disable ()
 "Disable `hl-line'."
 (global-hl-line-mode -1))
(defun my-hl-line-enable ()
 "Enable `hl-line'."
 (unless global-hl-line-mode
  (global-hl-line-mode 1)))
(add-hook 'move-cursor-hook #'my-hl-line-enable)
(run-with-idle-timer my-hl-active-period t #'my-hl-line-disable)
(add-hook 'focus-in-hook #'my-hl-line-enable)
(add-hook 'focus-out-hook #'my-hl-line-disable)

takaxp [14:46]
私が求めていたのはこれだった( ' -’)b
｀｀｀(setq magit-repository-directories
      '(("~/devel/mygit" . 1)
        ("~/devel/git" . 1)))｀｀｀
↑設定してからは ｀C-c m｀ で Sourcetree のようにプロジェクト一覧から管理したいものを辿れるのね． （編集済み） 

conao3 [14:51]
Magitひょんな事で動かなくなるっていう先入観があって使ってないですね。
Magitがどんなgitのコマンドを叩くのか分からないのが怖いので、全部コマンドでやってます。

takaxp [14:52]
｀M-x magit-list-repositories｀ で登録ディレクトリに入れている全プロジェクトを一覧できる．（カラムの要素はカスタマイズできそう）

niku [14:53]
えっ、便利そう……

takaxp [14:53]
Screen Shot 2018-12-12 at 14.53.05.png 

↑ ｀M-x magit-list-repositories｀ の結果．ディレクトリに何個プロジェクトを格納してるかで，表示に時間がかかる．
> Magitがどんなgitのコマンドを叩くのか分からないのが怖いので、全部コマンドでやってます。
ほぼ同じ意見．私もちょっとずつ試してるところ．

conao3 [15:00]
｀M-x shell｀ とかdiffが表示できないので、今はEmacsで完結してないんですよね。
Magitでdiff確認して、その後shell-popでgitのコマンド打つとかするとEmacs引きこもり環境ができるのだろうか。。

takaxp [15:01]
ま，無理に引きこもらなくてもw

syohex [15:01]
diffなら vc-diffでいいのでは.

conao3 [15:01]
むむ。調べます！

syohex [15:02]
｀C-x v =｀で現在のファイルの差分は見れたかと.

conao3 [15:02]
最高の環境が手に入ってしまった。。ありがとうございます！

takaxp [15:03]
2秒で解決w

conao3 [15:03]
素晴らしいです。。！

ayato-p [20:20]
magit、基本的にmagit-statusしか使ってないんですが(ターミナルでコマンド打つの面倒なのと、hunkを操作しやすいので)、地味に便利機能あるんですね…

katsyoshi [21:16]
めっちゃべんりやった
https://emacs-jp.slack.com/archives/C1B73BWPJ/p1544593577005000
takaxp
私が求めていたのはこれだった( ' -’)b
｀｀｀(setq magit-repository-directories
      '(("~/devel/mygit" . 1)
        ("~/devel/git" . 1)))｀｀｀
#elisp への投稿12月12日メッセージを確認する

blue [22:47]
Magitはちょっと重いので、結局ターミナルかSourceTreeでGit操作しちゃってる
あとコマンドが多くて覚えきれない……. （編集済み） 

tarao [10:42]
｀magi-list-repositories｀ ってあったのか...
(ghqに一本化してるしEmacsからghqのディレクトリ一覧をhelmで開けるようにしてるからまぁたぶん使わなそう)

ladicle [10:45]
ghqをprojectileからみてました

katsyoshi [11:26]
｀magit-list-repositories｀ って ｀.git｀ がない場所で ｀magit-status｀ を開くと勝手に開いてくれるのね

mopemope [15:42]
みんなghq使ってるのか。私もですけど

duckling_jelly_kazoo [16:54]
#elisp に参加しました。

takaxp [18:05]
あー．↑の方で ｀C-c m｀ ってあるのは，私のカスタマイズですごめんなさい．デフォルトは ｀C-x g｀ (magit-status) です． （編集済み） 

** 2018/12/17
κeen [15:53]
@conao3 昨日話てたmacroexpand-1の問題ってautoload-do-loadがないとmacroexpand-1が定義できないのが問題なんですか？
https://github.com/conao3/leaf.el/blob/master/leaf-tests.el#L41
leaf-tests.el:41
           ｀｀｀(fboundp 'autoload-do-load))｀｀｀
conao3/leaf.el投稿したメンバー: GitHub

conao3 [15:54]
そうです。 ｀autoload-do-load｀ がC言語ベースで、すでにビルド済みのEmacs-22で動かせない、、詰んだ、、という感じですね。

κeen [15:57]
適当にevalして無理やりロードさせるのではダメですか？

conao3 [16:01]
Capture 2018-12-17 16.00.53.png 

定義はできますが、やはり展開するときに ｀autoload-do-load｀ を通ってしまうようです。
｀autoload-do-load｀ のelisp実装を与えても解決するんですが、 ｀macroexpnad-1｀ のelisp実装を与えるのとどっちが楽なのかはよくわからないです。。

κeen [16:05]
?
マクロ展開をevalするとloadが走ると思うのでそれをautoload-do-load代わりにできないかという提案です。
因みにautoload-do-loadの中身読んでみましたがelisp実装はわりかし簡単そうに見えます。

conao3 [16:08]
なるほど！leafをevalするんですね。てっきり不完全な ｀macroexpnad-1｀ を無理やりevalするのかと思っていました。
試してみます！
Capture 2018-12-17 16.10.40.png 

leaf全体をevalするとrequireまでevalしてしまいエラーになります。確かにwhenは見えているので、この時点のS式を取り出せればいいんですが。。

podhmo [11:22]
#elisp に参加しました。

κeen [13:50]
> 因みにautoload-do-loadの中身読んでみましたがelisp実装はわりかし簡単そうに見えます。

本件、プルリク投げておきました。ほぼline to lineの写経ですがCでしか実装できない部分は飛ばしてます。
ただしそれはロード失敗時にundoする処理なのでそもそも失敗したら終了するようなテストでは問題ないと思っています。

https://github.com/conao3/leaf.el/pull/36
KeenS
#36 implement autoload-do-load and use it; removing some polyfills
It is not an exact implementation of autoload-do-load, but almost the same.  
The behavioral differences can be observed only when the autoload fails.  
In the emacs' implementation, it undoes all the definitions and ｀provides｀ in the load chain, but this function does not (more to say, cannot. The definition history is held only in C).  
However, I think this is sufficient for polyfill for testing.
conao3/leaf.el12月19日投稿したメンバー: GitHub
ところでemacs 22のためのpolyfillだと認識してるのですがemacs 22でCI走らないんですね

conao3 [13:52]
ありがとうございます！
そうなんですよね。。Travis用のバイナリを用意してくれてるとこが、Emacs-22を提供してないのでTravisでは動かしてないです。。
個人開発だったのでEmacs-22はローカルで見てたのですが、用意したほうが良さそうですね。

syohex [13:58]
macOSが emacs22なの, GPL3回避なためだけだろうし, 作り古いし, モダンなコンパイラではビルド通らないし(厳密には 24.2ぐらいまでビルド不能だが). サポートするコストを上回るメリットが特にないと思われる. (macOSは今後一生アップデートしないだろうし. いっそのことなくすべきだと思っているが)

κeen [14:03]
プロジェクトの存在意義が揺らぐ発言ですね

conao3 [14:07]
いえいえ、こういうコメント歓迎です。
実はEmacs-22対応は「ついで」であって、僕のモチベーションは「自分で ｀use-package｀ を作りたい」という興味のみです。
実際、 ｀use-package｀ のコードを読んで独自のキーワードを増やそうとしたのですが、1週間悩んで諦めてしまいました。
｀leaf｀ ならもちろん自分が開発しているのでわかりやすいのもあると思いますが、キーワード追加はものの数分です。
takaxpさんが悩まれている、 ｀use-package｀ 自体の読み込みが遅いというのも解決すると思いますし、 ｀leaf.el｀ のパッケージインストールを担う ｀feather.el｀ はそれはそれで面白くなると思いますので、楽しんで開発してる状況です。

takaxp [14:13]
｀use-package｀ に書き換えるのが面倒ってのが先にありますw

conao3 [14:15]
笑。
実際 ｀leaf.el｀ も ｀cort.el｀ も ｀-*- lexical-binding: t; -*-｀ にしてるので、Melpaに登録する時もEmacs-24以上で申請すると思います。

conao3 [15:22]
言葉少なだったところを補足します。
ついでとはいえ、 ｀leaf.el｀ がEmacs-22をサポートするのは私が決めた仕様であり、変わることはありません。その点でテストケースが ｀macroexpand-1｀ が存在しないことによってテストケースが煩雑になっていたことは悩みの種で、 ｀autoload-do-load｀ は明らかに「欠けていたピース」でした。
そのピースを埋めていただいた @κeen さんに改めて感謝します。

** 2018/12/23
buzztaiki [07:02]
いつのまにか、seq.el なんてものが標準で入ったんですね。 ｀seq-reduce｀ とか ｀seq-some｀ とか定義されてる。 （編集済み） 

** 2018/12/26
Kenta Kozuka [09:43]
elisp 初心者なのですが、以下のコードが ｀Wrong type argument: characterp, concat｀ になる理由を教えていただけますか？
｀｀｀(mapconcat #'identity '("lee" (concat "hoge" "foo")) "-")｀｀｀
（編集済み）

tak.kunihiro [09:47]
(mapconcat #’identity `(“lee” ,(concat “hoge” “foo”)) “-”)

syohex [09:54]
:上矢印: で答えはあるのですが, ｀'("lee" (concat "hoge" "foo")) "-")｀の部分が quoteがついているのですべてそのまま評価されているため 2つめの要素が ｀(concat "hoge" "foo")｀のまま mapconcatに渡されていることが原因です. 引数となるリストを評価するには :上矢印: にあるように backquote + カンマを使うか, quoteは使わずに以下のように listを使う必要があります.

｀｀｀(mapconcat #'identity (list "lee" (concat "hoge" "foo")) "-")
; => "lee-hogefoo"｀｀｀

conao3 [10:06]
バッククオートについてはよく紹介される資料があります。
http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/macros.html
https://qiita.com/snmsts@github/items/ef625bd6be7e685843ca
asahi-net.or.jp
On Lisp --- マクロ
Paul Graham氏の著書On Lispの邦訳を無償で公開しています．Common Lispのマクロに関する貴重な情報がいっぱいです．
Qiita
'`'と',' - Qiita
#lisp advent calendar 四日目の記事らしいです。 他のカレンダー参加者のレベルが高すぎて困りました。 以下について、利用の方言はCommon Lispです。 処理系は多分cltl1以降に準拠なら大丈夫だと思います。...
なおバッククオートはマクロと相性がとても良いので、事実On Lispでもマクロの章でバッククオートが登場していますが、今回の例のようにマクロ以外の場所でも有用です。
https://www.mew.org/~kazu/doc/elisp/backquote.html
> 上記のようにバッククオートは、単独で使っても便利だ。 というわけで、バッククオートとマクロと一緒に語るのは、 バッククオートにとって不幸である。

Kenta Kozuka [10:25]
なるほど、バッククオートとか全然詳しくなかったのですが、勉強になります:イルカ:
みなさん、ありがとうございます:おじぎ_男性:

syohex [10:29]
scratch bufferであれば, C-x C-e でどの S式でも評価できるので, 気になる箇所を個別に評価してどうなっているかを確認するのがよいかと思います.

conao3 [10:33]
｀C-x C-e｀ の評価はメジャーモードに取られてなければどこでも使えると思います。 ｀org-mode｀ になっているバッファーでも実行できました。
｀lisp-interactive-mode｀ で特筆すべきは ｀C-j｀ での評価ではないかと思います。これはバッファが書き換わってしまうので式途中の評価には向きませんが。。
S式の部分実行は便利なパッケージがあると思いますが、init.elの編集まで間に合ってないので下記関数をscratchバッファで便利に使っています。
｀｀｀(defmacro p (form)
  `(progn
     (pp (macroexpand-1 ',form))
     nil))

(defmacro po (form)
  `(progn
     (pp ,form)
     nil))｀｀｀

** 2018/12/28
takaxp [01:34]
https://github.com/emacs-jp/japanese-holidays/
いつもお世話になっています．で，たぶん来年更新されますね．ふふ．

** 2018/12/29
Kenta Kozuka [23:25]
｀y-or-n-p｀ のように空文字チェックを行う、ミニバッファーからの入力を受け付ける関数はありますか？

syohex [23:42]
自分で文字入力のループ等で実装する他なさそうです. (y-or-n-pがそんな作り

Kenta Kozuka [23:48]
そうなんですね、ありがとうございます:びっくり_赤:
あれば便利そうなんですが、、、

* event
** 2018/09/13
supermomonga [15:00]
Atom IDE リリースすごそう

tadsan [15:09]
なるほど、実態は ｀atom-ide-ui｀ と ｀ide-php｀ みたいな言語個別のパッケージなのか https://ide.atom.io/

supermomonga [21:07]
https://github.com/atom/atom-languageclient というLSP層で抽象化してるっぽい
GitHub
atom/atom-languageclient
atom-languageclient - Language Server Protocol support for Atom
Emacsでも同様のLSPクライアント層作ればe2wmとか使って同様のことができそう
しかしAtomやVS Code見てるとWeb Componentは表現力高くてうらやましいなぁと思う

takaxp [00:39]
ほんとそうですね．いつまでもたってもEmacsのUIは芋っぽさから抜けられない．

tomoya [10:51]
LSPも普及してきたなぁ

** 2017/09/25
syohex [15:14]
.clang-formatが置かれるようになっている. 完全ではないそうだが…

takaxp [16:23]
.clang-format は clang 用 editorconfig な位置づけ？

syohex [16:24]
clang-formatっていう C, C++, Objective-Cのフォーマッタ(コマンド)があってそれの configですね. 最近の主要な C, C++プロジェクトではだいたい使っています.

takaxp [16:25]
あー以前も紹介してもらったような．
復習しておきますφ(. _. )

syohex [16:31]
フォーマットを気にせず書けて便利. ifdef等(カッコの数がペアになっていない場合)も考慮してくれるし. (C++のクラスの初期化とかはやや面倒で, 改行入れて読みやすく書いても一行にされてしまったりする. JSONインスタンスの初期化で 以下のようにJSON風に初期化を書いた場合など. 行末にコメント入れると回避できるのですが...)

｀｀｀auto v = {
   {"name", "hoge"},
   {"age", 42},
   {"items", [1,2,3...]}
}

// 以下みたくなってしまう
auto v = {{"name", "hoge"}, {"age", 42}, {"items", [1,2,3...}};｀｀｀ 

takaxp [16:32]
Oh…
http://ainame.hateblo.jp/entry/2014/04/06/022441 をみると，XCode だとアタリマエのように使ってますけど，要は YAML 君なんですね．Objective-Cでは完璧な動作って感じかな．
ainameの日記
Clang-FormatでObjective-Cのコードを整えたらレビュー捗る - ainameの日記
最近Objective-C書いてるのでClang-Formatというツールを試してみた。 些末なコードレビュー - naoyaのはてなダイアリー にもある通り、コードレビューするときにいちいちソースコードのフォーマットを指摘し続けるのはアンチパターンで、人間以外がやるべき仕事。 PerlならPerltidyというツールがあるけど、Objetive-C（C, C++）にはclang-formatというコマンドがある。暇なので社内で導入出来るように調べた。 ClangFormat — Clang 3.5 documentation 使い方 CLIの場合は以下のように実行する。-iで指定したファイル…
2014年4月6日

syohex [16:35]
map(dictionary) literalだとうまくいかなかったですね. 設定があるのかもしれないですが.
C, C++の方がうまく動くと思います. （編集済み） 

takaxp [16:36]
ほむ．なるほど．C/C++ でフォーマット制御は面白そうなので試してみます( ' -‘)b （Emacs任せでそこまで気にしてなかったw）

syohex [16:36]
clang-format.elってのがあります.

takaxp [16:37]
Yes! https://github.com/sonatard/clang-format 正にググってたw
GitHub
sonatard/clang-format
clang-format - Clang-format emacs integration for use with C/Objective-C/C++.

syohex [16:37]
ただ git push前にコマンドラインでまとめてやった方がいいかなと思います..

takaxp [16:37]
もしや pre-command-hook になんかぶら下げてウザいとか

syohex [16:37]
https://github.com/h2o/h2o/blob/master/misc/clang-format-all.sh

こんな感じで..
GitHub
h2o/h2o
h2o - H2O - the optimized HTTP/1, HTTP/2 server
> もしや pre-command-hook になんかぶら下げてウザいとか

それはなかったと思いますが, 3rd partyのものとか導入してうっかり formatしてしまうと面倒なので.
あと誰かのファイルを途中から変更する場合とか. （編集済み） 

takaxp [16:39]
なるほど．先に clang-format の振る舞いを理解してから Emacs と組み合わせるように進めるのが良さそうですね．

syohex [16:40]
gofmt的なものに慣れてしまうと, どの言語もそういうのがないと辛い...

takaxp [16:41]
ふと妄想したんですけど，フォーマットに従ったファイルが入力されたらパーサーの動作が軽くなるとか副産物ありえますかね．（もしくはフォーマットに従っていることを前提にしたパーサ）

syohex [16:44]
特にないんじゃないですかね..

takaxp [16:44]
明瞭なご回答ありがとうございました．:失恋ハート:

syohex [16:45]
削除されるであろう改行とかスペースを無駄に数 GB入れてとかだと変わるでしょうけど...

takaxp [16:45]
PDFみたいだな…w

* general
** 2016/06/05
インストール後機能の有効かどうかって関連する関数や変数が定義されているかを見るとかですかね.
Ubuntu/Debianだと apt-get build-dep emacsとかやったら関連する奴は全部入れれるので, 普段はそうしてますね.
いくらかは emacs -Qで起動して features変数の値を見ればわかりそうだけど, ロードしてないものは見れないだろうし, 不十分っぽいですね.

kozo2 [13:09]
@syohex: なるほど。情報ありがとうございます。ちなみにbuild-depってGUIに必要なものも入るんですかね
入りそうですね、build-depしたらGUI版出来上がるよ、無効にしたければ--without-xして、って追記しておきます （編集済み） 

kozo2 [13:20]
もしどなたか「どの機能にはどのdebが必要」ってレベルまでご存知の方がいらしたらさらに追記お願いしたいです （編集済み） 

github アプリ [13:33]
[emacs-jp.github.com:master] 1 new commit by Kozo Nishida:
｀b41f94a｀  apt-get build-dep, 拡張機能確認方法の追加 - Kozo Nishida

kozo2 [13:36]
emacs-jp/emacs-jp.github.com ってbuildとdeployが必要だったりしますかね
どうもビルドについては自動で行われて失敗したらメールが来ていた気がするんですが
何によってそれが実現されているのかわかっていません

rizaudo [13:49]
インストール後の機能が有効かどうかって、system-configuration-optionsに”without-*”が入ってなければ基本的に有効って考えて良いのでは無いでしょうか。多分大体の物はビルドする際にオプション無しでも含められます。

rizaudo [13:58]
あとArchlinuxで毎日masterをビルドしているので、時間があったらArchでのビルド書きたいです。

kozo2 [14:53]
ほう
'*** Welcome to IELM ***  Type (describe-mode) for help.
ELISP> system-configuration-options
"--disable-dependency-tracking --disable-silent-rules --enable-locallisppath=/usr/local/share/emacs/site-lisp --infodir=/usr/local/Cellar/emacs/24.5/share/info/emacs --prefix=/usr/local/Cellar/emacs/24.5 --with-xml2 --without-dbus --without-gnutls --with-ns --disable-ns-self-contained"
ELISP>
homebrewのだとこんなんでした。情報ありがとうございます

github アプリ [14:58]
[emacs-jp.github.com:master] 1 new commit by Kozo Nishida:
｀b02b78d｀  機能確認方法の変更とArch節の追加 - Kozo Nishida

kozo2 [14:59]
@rizaudo: Archのh1だけ追加したので時間ができたらお願いします

github アプリ [15:16]
[emacs-jp.github.com:master] 1 new commit by Kozo Nishida:
｀2e77a08｀  文の適切な節への移動 - Kozo Nishida

kozo2 [15:33]
@rizaudo: build-depしてない状態だとこうなってました
ELISP> system-configuration-options
""
ELISP>
libncurses-devしかinstallしてない状態で--without-*が表示されてなさそうなのでちょっと検討した方がいいのかもしれません

syohex [15:46]
system-configuration*なるオプションは知らなかった.

kozo2 [15:47]
今build-depした後はどうなるか見ようとしています

rizaudo [15:48]
むむ、build-depしてない状態だとそうなってるのは知らなかったです。ちょっと調べてみますね。

syohex [15:50]
 ｀emacs -Q --batch --eval '(message "%s" system-configuration-features)'｀こんなので機能一覧は出せるわけか.
｀｀｀% emacs -Q --batch --eval '(message "%s" system-configuration-features)' 
XPM JPEG TIFF GIF PNG RSVG IMAGEMAGICK SOUND GPM DBUS GCONF GSETTINGS NOTIFY ACL LIBSELINUX GNUTLS LIBXML2 FREETYPE M17N_FLT LIBOTF XFT ZLIB TOOLKIT_SCROLL_BARS GTK3 X11 MODULES｀｀｀
（編集済み）

kozo2 [15:51]
root@627353cce27e:~/emacs-24.5# emacs -Q --batch --eval '(message "%s" system-configuration-features)' 
Symbol's value as variable is void: system-configuration-features

syohex [15:52]
system-configuration-featuresは 25からっぽい.

kozo2 [15:52]
build-depした後でも
ELISP> system-configuration-options
""
ELISP>
でした。何かまずったかな

rizaudo [15:53]
でもwith-*もしくはwithout-*のどちらも入ってない場合に、どうなってるのかわからない物がありそう…(つまりデフォルトでenableかわからない)

syohex [15:53]
それは configure時のオプションっぽいので何もつけなければ何も出なさそう.

kozo2 [15:53]
dockerの中のubuntu:14.04でやってます
なるほど ./configureは何もつけてなかったです （編集済み） 

syohex [15:54]
明示的につけたものは残っていますね.

kozo2 [15:56]
ということはbuild-linux.mdで完璧を期すならやっぱりconfigureオプションの解説を加える必要があるかな

rizaudo [15:57]
system-configuration-featuresのコミットみたんですが、configure.acでやってるので24以下でelisp使って近しいことは厳しそう...

kozo2 [15:59]
やっぱ、もう25リリース近いらしいかつ system-configuration-features の方が楽そう、なので24.5はスキップしようと思います （編集済み） 
25向けにbuild-linux.md書き換えようと思います

syohex [16:06]
まあ今月出るみたいなので出てからでもよいでしょう.
ちなみに pretestと emacs25ブランチのものを常用していますが, 現在のところ問題らしい問題はありません.
** 2017/05/23
takaxp [20:05]
変数に値を入れる setq と custom-set-variables の実行コストを比較した方って居ます？（どちらを使うべきという議論はちょっと置いておいて純粋に処理コストの比較にて）

pogin503 [08:37]
イメージとしてはsetqの方がコスト低そう(今手元に環境がないので)

tarao [08:51]
｀custom-set-variables｀ が実際に変数に値を入れるところはけっきょく ｀set｀ になっていてそれなりに速そうですが、それ以外にも一時変数に ｀setq｀ したりとかでけっきょく ｀setq｀ 自体も呼んでしまっていて、単発の ｀setq｀ には勝てない、という感じがしますがどうでしょうか (｀setq｀ 自体を呼んでる以外にもいろいろ ｀put｀ するのでその分のオーバーヘッドもあります)

syohex [14:40]
｀｀｀(defvar var1 nil)
(benchmark-run-compiled 10000 (setq var1 t))
(defvar var2 nil)
(benchmark-run-compiled 10000 (custom-set-variables
                '(var2 t)))｀｀｀

｀custom-set-variables｀の方がかなり遅そう.

takaxp [21:09]
ありがとうございます．
benchmark-run との比較では，それぞれ差がなく，
setq vs. custom-set-variables の単純比較で100倍くらい差がありますね． （編集済み） 
Untitled 
#+BEGIN_SRC emacs-lisp
(defvar var1 nil)
(benchmark-run-compiled 10000 (setq var1 t))
#+END_SRC
#+RESULTS:
| 0.0014559999999999998 | 0 | 0.0 |
#+BEGIN_SRC emacs-lisp
(defvar var1 nil)
(benchmark-run 10000 (setq var1 t))
#+END_SRC
#+RESULTS:
| 0.001444 | 0 | 0.0 |
#+BEGIN_SRC emacs-lisp
(defvar var2 nil)
(benchmark-run 10000 (custom-set-variables
        '(var2 t)))
#+END_SRC
#+RESULTS:
| 0.163514 | 0 | 0.0 |
#+BEGIN_SRC emacs-lisp
(defvar var2 nil)
(benchmark-run-compiled 10000 (custom-set-variables
        '(var2 t)))
#+END_SRC
#+RESULTS:
| 0.297183 | 1 | 0.14077499999999965 |
折りたたむ 
custom-set-variables が色々やっているのがよくわかりました m(_ _)m

** 2017/07/13
takaxp [16:03]
http://hyperpolyglot.org/text-mode-editors
↑ 充実してますね．こういう比較を以前 {関東|関西}Emacs でやってたような気．どこいったかな．
管理元：https://github.com/clarkgrubb/hyperpolyglot
GitHub
clarkgrubb/hyperpolyglot
hyperpolyglot.org

kozo2 [16:22]
これはよさげですね
やったるぞ，って思ったんですがここまでは全然充実させれんかったです

** 2017/12/19
ちなみに今はielmより良いreplってあったりしますかね

syohex [22:17]
ielmじゃないんですかね..

kozo2 [22:19]
ん，特にielmより良いreplがあるとは聞かない，というご意図でしょうか

syohex [22:20]
はい. (というより他にあるのかがわからない)

tadsan [22:20]
comint以外でEmacs上のREPLの基盤はなさそう

kozo2 [22:20]
なるほど。情報ありがとうございます。
とにかく ielm が使われまくると emacs は何か楽しくなるんではないかと勝手に想像。(少なくともPython, Rはそのせいで愛されていると思いこんでいる) （編集済み） 

tadsan [22:22]
言語とか処理系にもよるけど、comintのおかげで割と簡単にEmacsで動くREPLが作れます

** 2018/01/03
takaxp [16:18]
package-archives に追加可能なリポジトリを自前で作っている方っていらっしゃいます?

tak.kunihiro [17:01]
(let ((package-local-dir (expand-file-name "~/devel-godigo/documentation/packages/")))
 (setq package-archive-upload-base package-local-dir)
 (require 'package-x)
 (defun package-write-and-install-package ()
   "Copy package on current buffer to local depository and install."
   (interactive)
   (package-upload-buffer)
   (let ((pkg-dir "~/.emacs.d/elpa"))
     (dolist (item (directory-files pkg-dir t))
       (if (string-match (file-name-base buffer-file-name) item)
           (delete-directory item t t))))
   (package-install-from-buffer)))
(add-to-list 'package-archives '("foo.bar" . "http://foo.bar/documentation/packages/"))

takaxp [22:39]
@tak.kunihiro ヒントありがとうございます！！
https://github.com/melpa/melpa/wiki/Custom-Melpa-Archive
GitHub
melpa/melpa
melpa - Recipes and build machinery for the biggest Emacs package repo
↑ 自分用MELPAの作り方も発見

takaxp [00:38]
とりあえず問題解決しました．ありがとうございます．
副産物です．https://qiita.com/takaxp/items/ede36da846099d2e5cf2
Qiita
Melpa+Cask環境で個人用レシピを使いたい - Qiita
# はじめに Emacsのパッケージを作ったら MELPA に登録して世界中に公開するのが良いですね．ただそうは言っても，とりあえずローカルで自分用に動かせれば事足りてしまうのも現実です． そこで今回は，ローカルにMelpaリポジ...

** 2018/01/25
kozo2 [18:19]
https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/
sam217pa.github.io
From helm, to ivy · Samuel Barreto
A user perspective.
結構前だけど 記事末尾の比較tableがよいと思った （編集済み） 

** 2018/01/29
niku [2018年1月29日 09:13]
helm-for-files 相当のものが見あたらず，なければ自分で用意するかという気持になりました．それ以外は私のユースケースだと必要十分でした．


8 件の返信
チャンネルにも投稿済
tadsan [11ヶ月前]
｀counsel-find-file｀ を使うか、それを参考に定義する……？ (そういう話ではない？)


niku [11ヶ月前]
あってます！


niku [11ヶ月前]
ファイルやバッファを開くときはそのコマンドを使うだけでいいようにしたい


tadsan [11ヶ月前]
｀(ivy-mode 1)｀ と ｀(counsel-mode 1)｀ を設定すれば、いい感じになるはず…?


tadsan [11ヶ月前]
https://github.com/abo-abo/swiper/blob/master/counsel.el#L4491-L4505
GitHub
abo-abo/swiper
swiper - Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!
 


niku [11ヶ月前]
buffer一覧やrecentfも対象になりましたっけ．試したと思うのですが最初に色々やっているときだったので勘違いしているかもしれない．もう一度試してみよう．


tadsan [11ヶ月前]
バッファ一覧は ｀(ivy-mode 1)｀ の方で有効になりそう。 ｀recentf｀ の方は個別に設定する必要がありますね。


チャンネルにも投稿済
niku [11ヶ月前]
なるほど．ivy/counsel を use-package で設定しているの今こんな感じです
https://github.com/niku/uti/blob/2addd321832ecb95f40bfd1c9e7536cc98b66e75/.emacs.d/init.el#L219-L234
｀C-;｀ を ｀counsel-find-file｀ にバインドして，ソース一覧に recentf を足すと望み通りになりそうかな．やってみます．

** 2018/02/12
takaxp [11:52]
LibreOffice とのからみで hunspell が使えるのが理想ですが，挙動が好みじゃないので私は aspell に戻っています．
で，日本語まじり赤線問題はIMEがONになったら flyspellを休ませるというトリックを導入して，定期的に赤線を取ってます．
本質的な解決策があるなら私も知りたい( ' -')b

tak.kunihiro [13:46]
こんなのどうでしょう．
(defun flyspell-ignore-ja (beg end info)
 "Tell flyspell to ignore Japanese character.
Call this on `flyspell-incorrect-hook'."
 (save-excursion
   (goto-char beg)
   (looking-at "[一-龠ぁ-🈀ァ-𛀀ー・、。]")))
(add-hook 'flyspell-incorrect-hook 'flyspell-ignore-ja)

takaxp [14:23]
Screen Shot 2018-02-12 at 2.22.25 PM.png 

Screen Shot 2018-02-12 at 2.23.23 PM.png 

おお，なんかイケそうですね( ' -')b

tak.kunihiro [14:25]
もともと漢字には赤線が引かれないので、ひらがなの心配だけしたらいいのかもしれません。

takaxp [14:27]
はい．良さそうなんで，しばらく運用してみます．

takaxp [00:14]
確かに aspell では出ませんね．


tak.kunihiro [10:03]
本家に相談しました．
http://lists.gnu.org/archive/html/help-gnu-emacs/2018-02/msg00142.html
　英語のスペルをチェックしているのだから，英語以外の言葉に対する反応は，機能の外側に範疇されるものである，と考えるのがよさそうです．
　つまり「Flyspell + Hunspell + 英語まじり日本語」の組み合わせによるバッファが下線まみれとなる状況は不具合でなく，「Flyspell + Aspell + 英語まじり日本語'」バッファにおける日本語下線なしの状況が，偶然の産物と考えるのがよさそうです．
　そう考えると， Aspell 及び Hunspell のどちらも用いるにしても，@lurdan さんが言及されているよう， ispell-skip-region-alist で日本語を英語スペルチェックの対象からはずことが正しいように思います．そう思ってウェブを検索すると，確かに
 https://texwiki.texjp.org/?Aspell
 (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+"))
などの例を見かけます．自分の環境だとこれだとうまく動きません． （編集済み） 

takaxp [10:09]
ispell-skip-region-alist が hunspell 側で効かないのはその通りですね．上の例でOrgのソースブロックを外すとか aspell の場合は細かな調整が効きます．
個人的にはやはり「日本語interne」のようなブロックとして辞書問い合わせが発生しているのがおかしいと思ってます．
実際には，「日本語interne」がブロックで，interneだけスペルチェックが発生し，incorrect なので「日本語interne」というブロック全体のfaceが書き換わっていると理解しています．
ちゃんとしたロジックはコードをちゃんと読まないとダメそうですね．
実のところ flyspell-incorrect-hook の解決策はとても良い感じだと思います:天使の笑顔: （編集済み） 

tak.kunihiro [10:38]
ispell-skip-region-alist を設定したら M-x ispell-buffer が正常に動くようになりました。これはこれで重要ながら、下線とは関係ないようですね。

tak.kunihiro [10:47]
こんなんでどうでしょう．
#+BEGIN_SRC emacs-lisp
(defvar ispell-regexp-ja "[^\000-\377]+"
 "Regular expression to match Japanese characters.")
(add-to-list 'ispell-skip-region-alist (list ispell-regexp-ja))
(defun flyspell-ignore-ja (beg end info)
 "Tell flyspell to ignore Japanese characters.
Call this on `flyspell-incorrect-hook'."
 (string-match ispell-regexp-ja (buffer-substring beg end)))
(add-hook 'flyspell-incorrect-hook 'flyspell-ignore-ja)
#+END_SRC

** 2018/02/20
Kazuki Yoshida (kaz_yos) [04:28]
homebrew emacs --HEADでのこのタイトルバーの文字が変な色になる問題を解決できたかたいらっしゃいますか?
https://github.com/d12frosted/homebrew-emacs-plus/issues/55#issuecomment-366517400
GitHub
Title bar text color broken · Issue #55 · d12frosted/homebrew-emacs-plus
I am having an issue with the transparent title bar. I am using Spacemacs, and the config for the title bar can be seen at the top of this screenshot. I have seen screenshots where it doesn't look ...

syohex [12:11]
今日時点でも再現しますか ? 2月 11日 macOSのタイトルバー周りの修正があります.

syohex [12:21]
http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=f7a853d818d4ef04ceefe5e34d445fd73da8fe11

syohex [13:34]
最新版と上記コミットの前で適当に試しているがどちらも再現せず.. (minimalな再現コードが欲しい). フォントによるとか??

tadsan [14:33]
EmacsPlus、何やってくれるのかよくわからなくて使ってない

takaxp [18:10]
https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb
GitHub
d12frosted/homebrew-emacs-plus
homebrew-emacs-plus - Emacs Plus formulae for the Homebrew package manager
パッチとビルドオプションの指定制御のようですね．
スクショだと all-the-icons と neotree が有効ですけど上のファイルには記述されてないんで，Spacemacs 前提？:考え中:

Kazuki Yoshida (kaz_yos) [22:31]
こんな感じの設定でバックグランドもタイトルバーも黒くしたときに発生しました。いまhomebrewでupdateかけているので再度チェックしてみます。
;;; Transparent titlebar
;; https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb#L98
;; https://github.com/d12frosted/homebrew-emacs-plus/issues/55
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Properties-in-Mode.html#Properties-in-Mode
(when (memq window-system '(mac ns))
 (add-to-list 'default-frame-alist '(ns-appearance . 'dark))
 (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))) （編集済み） 
syohex
最新版と上記コミットの前で適当に試しているがどちらも再現せず.. (minimalな再現コードが欲しい). フォントによるとか??
#general への投稿2018年2月20日メッセージを確認する
GitHub
d12frosted/homebrew-emacs-plus
homebrew-emacs-plus - Emacs Plus formulae for the Homebrew package manager
GitHub
Title bar text color broken · Issue #55 · d12frosted/homebrew-emacs-plus
I am having an issue with the transparent title bar. I am using Spacemacs, and the config for the title bar can be seen at the top of this screenshot. I have seen screenshots where it doesn't look ...

takaxp [22:35]
野良ビルドの私の環境でも変になりますね… 


Kazuki Yoshida (kaz_yos) [22:37]
野良ビルドの私の環境でも変になりますね…|takaxp 


Kazuki Yoshida (kaz_yos) [22:37]
takaxpさんのファイル : 野良ビルドの私の環境でも変になりますね… にコメントしました
まさにこの症状です。黒文字、白縁取り、黒背景になってしまっているのだと思います。さらに私のところでは、emacsが他のアプリのバックグラウンドに行くとなぜか見えるようになりました。

takaxp [22:38]
Screen Shot 2018-02-20 at 22.38.20.png 

私のところではバックグラウンドに送ってもダメですね（ダークスタイルの場合）

Kazuki Yoshida (kaz_yos) [23:03]
homebrew最新HEADでもあいかわらずでした。
Foreground 

他のアプリがアクティブだとなぜか改善。
Background 

font faceの関係かも?

takaxp [23:14]
んー．これ私もそうなんですけどタイトルの内容いじってますよねw
とりあえず内容いじりは無関係のようです（確認なう

Kazuki Yoshida (kaz-yos) [00:22]
そうか、タイトルバーのテキストいじっているのを、すっかり忘れていました。

syohex [13:58]
確かに若干霞んだような感じになりましたが, 色の組み合わせによる錯覚のようにも思えるのは気のせいか.. 上記のようにウインドウを後ろにすると(文字色が白になると)問題なく見えるので.

nukosuke [10:59]
#general に参加しました。

Kazuki Yoshida (kaz-yos) [21:18]
これは’darkじゃなくて dark だけで良いようです。なぜか前より字が細いような気がしますが改善しました。この場合シンボルじゃなくていいんですね。
Kazuki Yoshida (kaz_yos)
こんな感じの設定でバックグランドもタイトルバーも黒くしたときに発生しました。いまhomebrewでupdateかけているので再度チェックしてみます。
;;; Transparent titlebar
;; https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb#L98
;; https://github.com/d12frosted/homebrew-emacs-plus/issues/55
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Properties-in-Mode.html#Properties-in-Mode
 もっと表示する
#general への投稿2018年2月20日メッセージを確認する

** 2018/04/10
tak.kunihiro [08:14]
https://lists.gnu.org/archive/html/emacs-devel/2018-04/msg00258.html
Emacs pretest 26.1 RC1 がでたそうです。

takaxp [08:15]
:rms:

grugrut [08:49]
｀｀｀** The new user option 'confirm-kill-processes' allows the user to
skip a confirmation prompt for killing subprocesses when exiting
Emacs.  When set to t (the default), Emacs will prompt for
confirmation before killing subprocesses on exit, which is the same
behavior as before.｀｀｀
へー、設定で制御できるように

shougo [09:18]
新機能が気になりますね
どこかに情報が載ってないかな

takaxp [09:21]
バイナリ 
NEWS
74 kB バイナリ
RCにくっついているNEWSファイルです．mode: outline 指定されていて下手にTAB打つと残念なことになります（org mode ユーザ）

shougo [09:25]
見てみたところ、マイナーな変更点が大量にある感じですな

takaxp [09:26]
たしか child-frame が新機能だったような．ウル覚え

shougo [09:26]
そもそも26.0でなにが変わったのかも認識していない…。

takaxp [09:40]
'** The variable ‘emacs-version’ no longer includes the build number.
This is now stored separately in a new variable, ‘emacs-build-number’.
地味にこれがデカイw
'** The locale language name ‘ca’ is now mapped to the language
environment ‘Catalan’, which has been added.
これって独立騒動と繋がってたり… まさかね．

shougo [09:47]
なるほど

takaxp [09:48]
あ，そういえばこれがありましたね．
'** Emacs now supports optional display of line numbers in the buffer.
This is similar to what ‘linum-mode’ provides, but much faster and
doesn’t usurp the display margin for the line numbers.

shougo [09:53]
ああ、これはEmacs26について調べてたときに出てきました
これは行番号表示が組み込みになったということですか？

takaxp [09:55]
ですね．linum-mode はもう使わないで〜と．

shougo [09:55]
なるほど。やはりパフォーマンス稼ぐには組み込みしかないか

takaxp [09:57]
xdisp.c 内で扱ってますね．
'*** Images are automatically scaled before displaying based on the
‘image-scaling-factor’ variable (if Emacs supports scaling the images
in question).
画像表示周りも最適化されてるっぽい．これは嬉しい
ワロタw
(pixel-scroll-pixel-up 1)
ピクセル単位でスクロールする機能が付いたらしい．誰得だw => macOS向けのスクロール最適化だった模様 The new variables ‘ns-mwheel-line-height’,
‘ns-use-mwheel-acceleration’ and ‘ns-use-mwheel-momentum’ can be used
to customize the behavior. （編集済み） 
お．これも地味にいい感じですね．
'** New package ‘auth-source-pass’ integrates ‘auth-source’ with the
password manager password-store (http://passwordstore.org).
passwordstore.org
Pass: The Standard Unix Password Manager
Pass is the standard unix password manager, a lightweight password manager that uses GPG and Git for Linux, BSD, and Mac OS X.

niku [10:09]
おおこんなものが

takaxp [10:11]
影響ないと思いますが…
'** ‘min’ and ‘max’ no longer round their results.
Formerly, they returned a floating-point value if any argument was
floating-point, which was sometimes numerically incorrect.  For
example, on a 64-bit host (max 1e16 10000000000000001) now returns its
second argument instead of its first.
これも地味に影響受けるかも
'** Using ‘&rest’ or ‘&optional’ incorrectly is now an error.
For example giving ‘&optional’ without a following variable, or
passing ‘&optional’ multiple times:

   (defun foo (&optional &rest x))
   (defun bar (&optional &optional x))

Previously, Emacs would just ignore the extra keyword, or give
incorrect results in certain cases.
地味なの多いですねw

grugrut [11:17]
trampのGoogle drive対応ってのが気になります

peccu [12:40]
pixel-scrollいいですね

** 2018/04/12
tak.kunihiro [12:35]
おすすめ設定
(setq mouse-wheel-tilt-scroll t
     mouse-wheel-flip-direction (eq system-type 'darwin)
     mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control)))
     mouse-wheel-progressive-speed nil
     pixel-resolution-fine-flag t)
(pixel-scroll-mode 1)
もうひとつのおすすめ設定
(setq mouse-drag-and-drop-region 'meta)
MS-Windows の人はぜひバイナリをダウンロードして試しましょう。https://lists.gnu.org/archive/html/emacs-devel/2018-04/msg00287.html

** 2018/05/29
kosh [00:47]
Emacs 26.1 がリリースされたようです https://lists.gnu.org/archive/html/emacs-devel/2018-05/msg00765.html （編集済み） 

blue [00:48]
!!!!!!!!!!!!!!!!!!

tomoya [01:47]
祭りと聞いて
｀｀｀configure: WARNING: This configuration installs a 'movemail' program
that does not retrieve POP3 email.  By default, Emacs 25 and earlier
installed a 'movemail' program that retrieved POP3 email via only
insecure channels, a practice that is no longer recommended but that
you can continue to support by using './configure --with-pop'.
configure: You might want to install GNU Mailutils
<https://mailutils.org> and use './configure --with-mailutils'.｀｀｀

とりあえず、./configure でこんな警告がでました。 (macOS) （編集済み） 

tomoya [02:04]
｀｀｀GNU Emacs 26.1 (build 1, x86_64-apple-darwin15.6.0, NS appkit-1404.47 Version 10.11.6 (Build 15G20015))
 of 2018-05-29｀｀｀

無事、ビルドできた

tak.kunihiro [08:34]
Emacs 実践入門の改訂版はまだでないのでしょうか。

takaxp [08:35]
w （編集済み） 

ayato-p [08:44]
期待!

tak.kunihiro [09:44]
新機能，テキストのドラッグアンドドロップをお試しください．

(setq mouse-drag-and-drop-region 'meta)

リージョンでハイライトされたテキストを，マウスを用いて運搬できるように なります．ハードコアユーザーには不要でしょうが，わたしのような軟弱ユー ザーとしてはテキストを視界から消せずに移動できるのはいいなぁと思ってお ります．ちなみに Meta キーを押した状態でドロップすると移動でなくコピーとなります．
新機能，マウス水平スクロールをお試しください．

(setq mouse-wheel-tilt-scroll t)
(setq mouse-wheel-flip-direction (eq system-type 'darwin))

長い行の全貌を，マウスのみを用いて眺めることができます．
新機能，pixel-scroll-mode をお試してください．

(pixel-scroll-mode 1)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control))))
(setq mouse-wheel-progressive-speed nil)
(setq pixel-resolution-fine-flag t)

マウスホイールを回転させた時，バッファがつるっとスクロールします．ゆっくりであれば画像入りの eww バッファもつるっとスクロールします．めざせモダンエディタ!

niku [09:54]
osx では brew install したらもう入りました

tak.kunihiro [09:54]
あとは，新関数 dired-mouse-find-file をお試しください．

(define-key dired-mode-map [remap dired-mouse-find-file-other-window] 'dired-mouse-find-file)

いまさまながら Dired でクリックしたところが開きます．めざせモダンエディタ!

ayato-p [09:58]
むしろ、Diredでクリックして開かなかったんだって、今知りました…

peccu [13:49]
フレームの色がちょっと濃くなった気がする

peccu [14:04]
find-file関連がother-windowで開くようになってしまった

syohex [14:06]
popwinのせいですかね. 確か.

peccu [14:27]
すみません、その関連情報をいただけないでしょうか。

syohex [14:34]
https://lists.gnu.org/archive/html/emacs-diffs/2017-07/msg00323.html

ですかね. find-fileで使う関数が, ｀switch-to-buffer｀から ｀pop-to-buffer-same-window｀になった. （編集済み） 

peccu [14:40]
ありがとうございます。調べて見ます

peccu [15:07]
うまくいきました。ありがとうございました :おじぎ:
｀｀｀(setq display-buffer-function 'popwin:display-buffer)｀｀｀
これを
｀｀｀(popwin-mode 1)｀｀｀
これにすることで解決しました。
https://github.com/m2ym/popwin-el/issues/42 （編集済み） 
m2ym
#42 Don't use display-buffer-function
display-buffer-function is obsolete in GNU Emacs 24 and kept for compatibility. Use display-buffer-alist instead.
Labels
enhancement
Comments
2
m2ym/popwin-el2011年12月22日投稿したメンバー: GitHub

grugrut [22:10]
ubuntuのppaは数日待ってね、ってredditで見た気がするんですが、もう来てますね。emacs26
…とインストールしてみたら起動しない…… （編集済み） 

grugrut [22:22]
emacs25-commonがゴミとして残ってたので、それ消したら、とりあえず起動まではいきました

** 2018/05/30
roswell [20:24]
M-x replace-string あるいは、M-x replace-regexp で、
置換「後」の文字列を入力している際に、
置換「前」の文字列を再度編集したい場合、
どうやって戻ればいいか？
ご教示お願いします。

takaxp [20:26]
C-g してやり直し…（そうじゃないですよねw

roswell [20:28]
C-g だと、また M-% して、置換文字列を、最初から打ち直したり、あるいは M-p するのが面倒なんです。
Info の replace 読んだのですが、見当たらなくて... （編集済み） 

takaxp [20:30]
サポートしてくれるパッケージがあるかもしれませんね．

置換対象がすでにバッファにあるならば，replace-from-region.el が便利ですよ．
置換対象を選択した状態で M-x replace-from-region すれば，自動で変換前文字列を指定できます．

syohex [20:33]
｀replace-string｀については実装的に無理ですね. それぞれについて, read関数が呼ばれており, cancelに対応しているわけではない. しいてあるとすれば evil-modeの置換使うかですかね. ｀:s/from/to/｀と一度に書けるので, カーソルを戻せば from部を編集できそうですが.

roswell [20:34]
takaxpさん、replace-form-region.el の情報ありがとうございます。
replace-regexp 時に困りますね。
syohex さん
実装解説ありがとうございます。
なるほど、無理っぽいというのが分かっただけでも有益でした。

takaxp [20:35]
(replace-from-region には query-replace-regexp-from-region も実装されてたり)

roswell [20:37]
ちなみに、この様な質問は、#general で問題ないですか？ #random の方が適切ですか?

takaxp [20:38]
#beginner-helps というチャネルがありますけど，どこに投下してもらっても良いと思いますよ．

roswell [20:39]
takaxp さん #beginner-helps の紹介ありがとうございます。

peccu [22:17]
C-gでもう一度M-%した時に上キーでヒストリを使うのは違いますか？

roswell [7ヶ月前]
peccu さん、ご教示ありがとうございます。これ使えそうです。勉強になりました。

peccu [7ヶ月前]
よかったです :+1:

tak.kunihiro [12:43]
M-x query-replace 前の文字列 → 後の文字列 ! はどうでしょう。26 から。

syohex [12:49]
ありましたね, そんな機能.
デフォルトのやつどうやって直接打つのかがよくわかってませんが. https://www.fileformat.info/info/unicode/char/2192/index.htm この文字か.
fileformat.info
RIGHTWARDS ARROW (U+2192)
Get the complete details on Unicode character U+2192 on FileFormat.Info

tak.kunihiro [13:03]
(setq query-replace-from-to-separator " -> ") ですかね

syohex [13:05]
もともとは historyだけを想定したのでそんな文字になったんでしょうね. 直接打つのが困難な文字. ｀-｀ ｀>｀だとそれが含まれていること普通にありそうだし.

tak.kunihiro [13:06]
M-p ででてくるので、そこからパクればいいわけですね。では標準で問題なさそうです。

** 2018/06/11
takaxp [17:37]
https://www.masteringemacs.org/article/whats-new-in-emacs-26-1
↑わりと丁寧なコメント付き

kuroishi [17:47]
いまのところ display-line-numbers-mode は軽い感じでよさそうでした > 26.1

** 2018/06/13
shishi [17:59]
何年かぶりにWindowsでEmacsの情報見てみたんですけどIMEパッチの苦労がまだあるんですね。とてもつらい

tak.kunihiro [10:15]
理解できます。思い切って ddskk はどうですか。Mac, Windows, GNU/Linux のどの環境において、同様に日本語で思考し、日本語が書ける環境が実現します。

ただし、この場合 ddskk への学習投資と同時に、複数のプラットフォームにおける環境を一元管理する体制を構築する必要があります。
ddskk を利用した日本語入力にあたり Google CGI と利用すると、既存の IME とあまり使用感が変わらなくなることを最近知り、より快適になりました。

ayato-p [12:40]
僕もわりと真面目にddskkがいいと思いますね。
IMEパッチで悩むくらいならEmacs上の入力メソッドを使えばいいんや!派です

shishi [14:24]
うーんSKK…確かに一つの方法ですが全く触れずに来ましたね…

shishi [22:36]
SKK,せっかくおすすめされたので少し使ってみました。面白いのですが、カタカナの際にモードを変えるという思考にまったくならないのでそこが一番つらい

GitHub アプリ [23:18]
pogin503
＊1 new commit pushed to ｀master｀＊
｀f1d44254｀ - 次回を187回に更新
emacs-jp/reading-init.el
hico-horiuchi
Successfully deployed ｀baf157c｀ to github-pages
emacs-jp/reading-init.el

tak.kunihiro [23:57]
ひらがなをタイプしたのち、q でカタカナになります

tomoya [23:57]
カタカナはモードを変えずに、▽のときにqで変換できた気がする（体で覚えているからキーを覚えてない （編集済み） 

tomoya [00:01]
M-x skk-tutorial がよくできています

shishi [00:31]
skk tutorial やりました。melpaからインストールするとチュートリアルついてこないことに▽気づくのに
時間かかりました。
SKKで打ってたらなぜか三角がそのまま出力されてる。
そして三点リーダーの出し
方がわからない
GoogleIMEに戻した！三点リーダーが打てる！…

takaxp [00:50]
…

shishi [00:54]
CorvusSKKを使ってみてますがオプションの意味が全くわからん
送り仮名含めて辞書に▽載って
いるようなので
Shiftの開始がどこなのか判断に苦しみますね
あとEnter...

takaxp [00:57]
マニュアルがとても充実していて深遠な感じ．https://github.com/nathancorvussolis/corvusskk/blob/2.6.1/README.md
README.md
```

# CorvusSKK ver. 2.6.1

Windowsで動作するSKK風のIMEです。


## インストール


### 対応OS

'* Windows Vista (32-bit / 64-bit)

   + Service Pack 2
   + プラットフォーム更新プログラム ( [KB971644](https://support.microsoft.com/en-us/kb/971644) または [KB971512](https://support.microsoft.com/en-us/kb/971512) )

'* Windows 7     (32-bit / 64-bit)

   + Service Pack 1

'* Windows 8     (32-bit / 64-bit)

'* Windows 8.1   (32-bit / 64-bit)

   + S14 Update ( [KB2919355](https://support.microsoft.com/en-us/kb/2919355) )

'* Windows 10    (32-bit / 64-bit)


### インストール

corvusskk-X.Y.Z.exe を実行してください。 (X, Y, Z はバージョン番号)

アップデートの後はOSを再起動しておくと安全です。

インストール先

'* 32bit版 Windows

   + %SystemRoot%\System32\IME\IMCRVSKK

'* 64bit版 Windows

   + %SystemRoot%\System32\IME\IMCRVSKK
   + %SystemRoot%\SysW… もっと表示する
nathancorvussolis/corvusskk投稿したメンバー: GitHub

shishi [00:58]
文節区切りアイデアは確かに良いと思うのですが送り仮名判断は正直面倒だなってのが初心者の感想です

takaxp [01:00]
私がGoogleIME使うときも，極めて短い単位で変換するので，一時期SKKいけるかなと思ったのですが，挫折しましたOrz 合う人を選ぶ．

tomoya [01:02]
三点リーダ は z. ですね z+なにかで記号がでます

shishi [01:02]
Emacs上で日本語打つこと殆ど無い(コメントもコミットメッセージも基本英語)ので困ったときのツールとしては馴染みそう
日本語話者であることのハンデがつらい！

takaxp [01:11]
2ヶ月の海外出張を乗り切るために作られたって，ホントですかw 話者ハンデは実装で超えろってことですね！http://openlab.ring.gr.jp/skk/born-ja.html

** 2018/06/17
tak.kunihiro [08:54]
Emacs であんまり日本語を書かないなら、標準の Quail がいいと思います。
(setq default-input-method "japanese") 
(setq quail-japanese-use-double-n t)

tak.kunihiro [09:04]
skk の送り仮名判断の煩わしさは，脳と指のそれに分解できます．脳の煩わしさは，漢字ならびに送り仮名を思い描くこと．指の煩わしさは，シフトキーを打鍵すること．以下で，脳の煩わしさを解消することができす．

#+BEGIN_SRC emacs-lisp
;; (info "(skk) Google CGI API for Japanese Input を利用したかな漢字変換")
(add-to-list 'skk-search-prog-list
                 '(skk-search-web 'skk-google-cgi-api-for-japanese-input)
                 t)
#+END_SRC （編集済み） 

shishi [15:07]
Quail はどうやってもまともに変換できないと思っているのですがなにかコツでもあるのでしょうか…ひらがなとカタカナしかまともに打てないイメージありますw
「テスト」を変換しようとすると郵便番号記号が出るし…
完全に文節ごとに変換してあげれば文字は出せますね
SKK、GoogleのAPIに問い合わせるなどすれば送り仮名は気にしなくて良くなるのですがそうなるとSKKとは？って感じになってきました

tak.kunihiro [21:20]
シフトキーを押したくない場合は，以下をどうぞ．

#+BEGIN_SRC emacs-lisp
(defun skk-sticky-fingers-mode (arg)
 "Set ▽モード to be default on typing.
With a prefix argument ARG, enable Google Japanese Input if ARG is positive,
and disable it otherwise."
 (interactive "p")
 ;; (message "arg is %S" arg)
 (let ((is-interactive (called-interactively-p 'any)))
   (when (and is-interactive (equal arg 1))
     (setq arg (if skk-egg-like-newline -1 1)))
   (if (> arg 0)
       ;; turn on
       (progn
         ;; Enable ▽モード by default
         (advice-add 'skk-kana-input :before 'skk-kana-input--stickiest)
         ;; (info "(skk) 自動変換開始")
         (setq skk-auto-start-henkan nil) ; を
         ;; (info "(skk) どのように変換されるか")
         ;; (setq skk-auto-okuri-process t)
         ;; (info "(skk) ▼モードでの RET")
         (setq skk-egg-like-newline t)
         (when is-interactive
           (message "SKK sticky fingers mode enabled")))
     ;; turn off
     (when is-interactive
       (message "SKK sticky fingers mode disabled"))
     (advice-remove 'skk-kana-input #'skk-kana-input--stickiest)
     (dolist (var '(skk-auto-start-henkan
                    ;; skk-auto-okuri-process
                    skk-egg-like-newline))
       (custom-reevaluate-setting var)))))

(defun skk-kana-input--stickiest (func &rest args)
 "Switch to ▽モード from ■モード on typing.
This is supposed to be adviced before `skk-kana-input'."
 (let ((ch (skk-last-command-char)))
   (cond ((and (not (eq skk-henkan-mode 'on)) ; not ▽モード
               (memq ch '(?a ?b ?c ?d ?e ?f ?g ?h ?i ?j ?k ?m ?n ?o ?p ?r ?s ?t ?u ?v)))
          (skk-set-henkan-point-subr))
         ((and (eq skk-henkan-mode 'on) ; ▽モード
               (memq ch '(?, ?.)))
          (skk-kakutei)))))
#+END_SRC

shishi [21:38]
デフォルトで変換モードってSKKとはって感じですねw

shishi [22:22]
気が向いたらSKKで打つよう練習してますが、一番気に入ってるのは英和切り替えにAlt`、もしくは類するキーを押さないで済むことですね
Ergodox使ってるので配列に自由度はありますが頻繁に使うものとは言えそれ以外に使いみちのない入力切替にいい位置とられたくない…

uwabami [22:43]
そういや ac-mozc みたいなモードレス変換って今どうなったんかな。

tak.kunihiro [07:58]
Emacs の外、MS-Windows 環境においても  Alt+Shift とか Win+Space で和英切り替えられます。

shishi [22:51]
windowsで自分のemacs動くようにしてみたんですがwhitespaceとかなぜか効かないものがある

noah [01:38]
#general に参加しました。

tak.kunihiro [07:55]
自分の環境 (Windows 10) だと普通に whitespace-mode は動くように見えます。

** 2018/06/27
uwabami [18:37]
ご相談: recentf を ido-vertical で開く, ということをしているのですが recentf-list がフォルダのフルパスを持っているので, 深い階層だとファイルが見にくい. これを, zsh みたいに省略表示したいのですが, どなたかご存知ありませんか？
今は単に ido-completing-read で recentf-list を選んで, find-file に渡しているだけです. recentf-list を整形すれば良いんでしょうけれど...

tadsan [18:39]
｀recentf-list｀ を ｀mapcar｀ で整形するとよさそう
｀file-relative-name｀ https://www.gnu.org/software/emacs/manual/html_node/elisp/Relative-File-Names.html
｀recentf-list｀ なら ｀file-relative-name｀ じゃなくて、ホームディレクトリを ｀~｀ に置換するだけでいいか
> zsh みたいに省略表示
がよくわかってない

syohex [18:45]
｀/usr/local/bin/foo｀ -> ｀/u/l/b/foo｀ みたいなやつ ?

tadsan [18:52]
｀uniquify｀ の機能をいい感じに使ってさぼれないかな

takaxp [18:53]
80桁に収まるように ｀/User/hoge/ .... /hoge.org｀ みたいに中間パスを省略するとか？

uwabami [18:57]
@syohex そうそう.

syohex [19:00]
｀｀｀(defun find-file-like-zsh ()
  (interactive)
  (let ((files (mapcar (lambda (f)
                         (with-temp-buffer
                           (insert f)
                           (goto-char (point-min))
                           (when (eq system-type 'windows-nt)
                             (forward-char 2))
                           (while (re-search-forward "\\([^/]+\\)/" nil t)
                             (let ((matched (match-string-no-properties 1)))
                               (replace-match (concat (substring-no-properties matched 0 1)"/"))))
                           (cons (buffer-substring-no-properties (point-min) (point-max))
                                 f)))
                       recentf-list)))
    (let ((selected (ido-completing-read "Files: " (mapcar #'car files))))
      (find-file (assoc-default selected files)))))｀｀｀

Windowsだとそれらしくなったが Unix系でもいけるのだろうか. 慣れの問題だろうが 1文字になるとどこかさっぱりわからん. それを意識したディレクトリ構成になっていないので, ｀C:/a/a/a/a/foo.js｀みたくなってしまった.

uwabami [19:02]
たしかに（笑）
$HOME を ~/ にして, 中間ディレクトリが幾つか以上になったら, 全部 /.../ にして, 直前だけ表示, とかかな.
御提案ありがとうございます. やってみます.  ~/.../ディレクトリ名/ファイル とかかなぁ...

takaxp [19:05]
https://github.com/lewang/scf-mode
lewang/scf-mode
Emacs minor-mode for shortening long file-names in compile/grep output.
Stars
5
Language
Emacs Lisp
lewang/scf-mode2011年10月1日投稿したメンバー: GitHub
パクれるかも

uwabami [19:05]
お.

takaxp [19:13]
ん〜ん．basename 拾うだけっぽいですねOrz

uwabami [19:26]
とりあえず HOME の置換は abbreviate-file-name 使うだけで良いかな....

takaxp [19:46]
φ(. _. ) http://ayato.hateblo.jp/entry/20150521/1432215957
(define -ayalog '())
Emacs の上の方にファイルのパスを表示したかった - (define -ayalog '())
ずっと前からしたいなーって思ってたけど、思いの外簡単に出来たので満足している。 (setq-default header-line-format '("" (:propertize (:eval (shorten-directory default-directory 30)) face mode-line-folder-face) (:propertize "%b" face mode-line-filename-face))) (defun shorten-directory (dir max-length) "Show up to `max-length' characters of a…
2015年5月21日
nth と last で欲しい部分拾って concat するように改良すれば，うまい具合に表示できそうですね．勉強になるφ(. _. )

uwabami [19:53]
おお.

uwabami [22:57]
Untitled 
(defun my:shorten-file-path (fpath max-length)
 "Show up to `max-length' characters of a directory name `fpath' like zsh"
 (let ((path (reverse (split-string (abbreviate-file-name fpath) "/")))
    (output ""))
  ;; 先頭三つを切り出す
  (setq top (string-join (reverse (last path 3)) "/"))
  (setq vmax (- max-length 4 (length top)))
  ;; 残りを可能な限り縮める
  (setq path (butlast path 3))
  ;; メインループ
  (while (and path
        (and (< (length output) vmax)
           (< (length (concat "/" (car path) output)) vmax)))
   (setq output (concat "/" (car path) output))
   (setq path (cdr path)))
  ;; 省略
  (when path
   (setq output (concat "/..." output)))
  (format "%s%s" top output)
  ))
折りたたむ 
とりあえずでっち上げてみたわけですが,  setq ばかりで嫌ですねぇ.
"$HOME/hoge/hero/fuga/foo/bar/baz/baz2/baz3/foo.c" みたいな奴が "~/hoge/hero/.../baz3/foo.c" みたいになります.
@syohex @takaxp とりあえず目的は達成できました. ありがとうございました.

ayato-p [07:10]
おお、なんか僕の古いブログがひっぱられている…
それは元々どこかからひっぱってきたコードだったと思うんで、オリジナルは僕じゃないんですよねぇ(ファイル名を短くするところ) （編集済み） 

tak.kunihiro [07:57]
C-h v recentf-menu-filter を変更したのでどうでしょう。

uwabami [12:00]
@tak.kunihiro なるほどー...と思いましたが, recentf-open をそのまま使う訳ではないので. 勉強にはなります.

tak.kunihiro [14:36]
(mapcar 'car (recentf-apply-menu-filter
             'recentf-relative-filter
             (recentf-menu-elements recentf-max-menu-items)))

tak.kunihiro [14:46]
c:/emacs/emacs-26.1.50/share/emacs/26.1.50/lisp/mouse.el
c:/emacs/emacs-26.1/share/emacs/26.1/lisp/mouse.el
こういうのが区別つかなくなるのは大丈夫なものなんでしょうか。

tadsan [14:51]
区別つかなくなるってどういう意味だろう

syohex [14:52]
違うファイルなのに見た目(表示される候補)は同じになってしまうことでは. （編集済み） 

tadsan [14:53]
なるほど (リスト中で一意になるかどうかを判断して差別化しないと厳しそう)
そのあたりが気になったから、昨日最初に思い浮かんだのは ｀uniquify｀ を転用できないかだった

takaxp [16:08]
んー．recentf での省略表示にどこまでの精度を求めるか？という点だと思いますけど，上記のようなパターンはすでに2つのファイルを見比べていただろうから ｀uniquify｀ が有効ですよね．開いた後に区別できれば良さそうというスタンス．
ただ，ChangeLog とか README とかそこらじゅうのディレクトリにあるでしょう？と言われればそれはそうかも．

takaxp [16:16]
絞り込み中に「フルパス表示」と「省略表示」をトグルできるようにすれば OK っぽい．

tadsan [16:17]
｀completing-read｀ 中にスイッチするのはちょっとだるそう。 (｀ido-completing-read｀ にはよい方法あるのかなあ)

takaxp [16:23]
では絞り込みが進んで，リストされた全ての候補のファイル名が同じになったら，自動的にフルパス表示に切り替わる．とか:考え中:

uwabami [17:42]
最初三つは表示させて, あとは行の幅に合わせて上位ディレクトリを表示させる, という風にしたのです. （編集済み） 
@tak.kunihiro: その場合は c:/emacs/emacs26.1.50/.../lisp/mouse.el と c:/emacs/emacs26.1/../lisp/mouse.el になるかな. とはいえ, 表示桁上限は 70 にしているので, その例では省略されずに表示されます.
@takaxp: 今回はそこそこ長いディレクトリ名の深い階層にあるファイルを選択したかったが, ファイルが見えずに困った, ですね.
結局こんなん. ido-vertical or ido-grid 前提ですが. https://uwabami.junkhub.org/log/20180627.html#p01
平衡点
平衡点(2018-06-27)

takaxp [17:49]
@uwabami なるほどです．もし projectile が前提なら気にならなかったかもしれませんね．

uwabami [17:51]
はい. おっしゃる通り. projectile は以前挫折したんで, そのうち試します. ←なんでだったかな...

** 2018/08/20
uwabami [02:30]
package の作成と melpa へのチュートリアルってどっかにありますか？


kosh [03:51]
https://github.com/melpa/melpa/blob/master/CONTRIBUTING.org#making-your-package-ready-for-inclusion
CONTRIBUTING.org
```
'* Contributing a new recipe to MELPA

MELPA consists of /recipes/, each describing one /package/ in a
dedicated repository. This document describes how to propose a new
package for inclusion into MELPA.

Three contributor roles are involved in the maintenance of MELPA :

- MELPA maintainers :: They are responsible for reviewing new recipes
    and associated packages as well as keeping the system working.

- Recipe authors :: They responsible for submitting good recipes and
 もっと表示する
melpa/melpa投稿したメンバー: GitHub

全編英語ですがpackage作成時に気をつけることやmelpaに登録する手順は一通り書いてあります

http://syohex.hatenablog.com/entry/20130123/1358951475
http://syohex.hatenablog.com/entry/20121021/1350823391
日本語ならこれかなあ
syohex’s diary
MELPAへのパッケージの登録の仕方 - syohex’s diary
昨日の関西 Emacs勉強会でパッケージ管理の話がちらっと出たん ですけど、あんまり自分でパッケージを登録する人が少なそうだったん でその手順を簡単に示します。 recipeを書いて、pull requestを送る https://github.com/milkypostman/melpa 上記の MELPAのリポジトリを forkします。その中に recipesディレクトリに 目的のパッケージの レシピを追加して pull requestを送り、それが master ブランチにマージされたら、package.elからインストールできるように なります。 pull requestを送るに当たっ…
2012年10月21日


tak.kunihiro [08:08]
(info "(elisp) Packaging Basics")

日本語への翻訳をきっかけとして、本家の英語を直しているので、素晴らしいと思います。


tadsan [10:01]
途中まで訳した(作業中) https://qiita.com/tadsan/items/0d3ed50b260d1e9ae1bd
Qiita
MELPAにレシピを投稿するには (2018年版) - Qiita
この記事は以前書いた記事「[MELPAにレシピを投稿するには]」の内容を、本家の最新のアップデート[^1]に併せて、別記事として翻訳したものです。 ↓ ここから翻訳 ＊(途中)＊ ---------- MELPAは「レシピ」によ...

** 2018/08/27
uwabami [20:40]
どなたか, variable-pitch などの「フォントサイズの変更」を抑制する方法をご存知ありませんか？ 行毎にフォントサイズが異なるのが嫌で, 気がつく度/拡張を入れる度に face を設定するのは億劫なので...

どっかを advice してしまえば良いのかなぁ, とか思いつつ.


takaxp [20:45]
｀set-fontset-font｀ でフォント設定しているせいか，あまりそういう機会に出くわさないのですが，ちなみに具体的にこのパッケージで変わるよみたいのありますか？


uwabami [21:05]
AUCTeX(preview-latex) なんかは定番ですかねー. 上付き下付きまで表現しようとしてくださって.


takaxp [21:12]
あー．なるほど．


uwabami [21:26]
行間が変わるのが気に喰わないのです。
(なので- nw で普段はつかっていたのですが…)


takaxp [21:27]
｀(set-default 'line-spacing 0.2)｀ とかしててもダメってことですよね．


uwabami [23:27]
例えば html モードのヘッドラインなんかみたいに、そもそもの 表示サイズが変わるのが嫌なんですよね。


takaxp [00:46]
Untitled 
(defun my-fixed-pitch ()
 "No fixed, No GUI."
 (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
  (overlay-put ov 'face 'fixed-pitch)))
(add-hook 'find-file-hook #'my-fixed-pitch)
折りたたむ 

** 2018/09/05
peccu [11:20]
Emacsってlanguage-serverみたく？外から指定ファイルの指定部分をリージョン選択したりできるんでしょうか


tadsan [11:57]
別のプロセスか何かから操作中のEmacsに影響を及ぼしたいってことですよね？

デフォルトのしくみはないんじゃないですかね、たぶん

決められたパスのファイルに書き込んだらEmacsがファイル更新を検知してそのファイルを開く、みたいなのは雑に思い付いた


tarao [12:38]
Emacsをデーモンモードで立ててればEmacsクライアントからelisp実行できるのでなんらかできるとおもいますよ

｀emacsclient --eval '(elisp code)'｀ という感じでイケます


tadsan [12:58]
あー、たしかにそれでダイレクトにいけそう


peccu [14:27]
そっか、それだと都度Emacsが起動してしまうと思い込んでいました。今動いているEmacsで評価できるんですね。

ブラウザにプレビューを表示して、それを操作するとエディタでも該当箇所がハイライトされたり編集されたりを実現できないかなぁと。


tarao [14:28]
｀emacsclient -n --eval｀ かな (いま動いてるやつでスクリプト実行して、新しい ｀emacsclient｀ のプロセスはやること投げるだけ投げてすぐ帰る)


peccu [14:29]
なるほどありがとうございます。その方向でできないか試してみます。


tarao [14:30]
ブラウザからやる場合だと、HTTPサーバ立てちゃうのが一番楽かも(セキュリティ的にはアレだけど)


peccu [14:31]
はい。後ろにはサーバー立てることになるかなと思っていました


tarao [14:31]
あ、EmacsでHTTPサーバできますよ

やってる例:
https://github.com/tarao/cvim-edit-el
tarao/cvim-edit-el
Stars
1
Language
Emacs Lisp
tarao/cvim-edit-el2017年3月12日投稿したメンバー: GitHub

｀elnode｀ っていうの使うとすごい簡単でした


peccu [14:32]
emacsclient -e 使ってた
http://peccu.hatenablog.com/entry/2018/02/14/000000
@peccul is peccu
BitBarにorg-clockの現在のタスクを表示する - @peccul is peccu
今なにをしているか、Emacsの外でも確認するためにemacsclientからタスク名を取り出して、BitBarに表示するようにしました。
2018年2月14日

elnode良さげですね


syohex [14:35]
なんか昔 websocketパッケージ使ってそんなの作ったような. ブラウザと emacsのリアルタイム通信. （編集済み） 


peccu [14:38]
https://github.com/ancane/markdown-preview-mode
ancane/markdown-preview-mode
Minor mode to preview markdown output as you save
Stars
87
Language
Emacs Lisp
ancane/markdown-preview-mode2014年9月13日投稿したメンバー: GitHub

これ参考にできそう。

http://syohex.hatenablog.com/entry/20120818/1345264837
syohex’s diary
websocket.el + Amon2でリアルタイム Markdown Viewer - syohex’s diary
WebSocketがなんなのか全然わかっていませんが、サンプルを参考に リアルタイム Markdown Viewerを作成してみました。日本語を書くとエラーになるとか、 効率を全く考えていないとか、繰り返しやってるとエラーが出るとか 問題はまだ多数ありますが、いろいろ楽しいことができそうな予感はしました。 デモ動画 初めの 10秒ぐらい戸惑っています。 必要なもの Emacsは 23以降がいいっぽいです。試したのは 24.1です。 websocket.el Amon2 3.5以降 サーバ側 Amon2付属の chat.psgiをちょっと直した程度です。 use strict; use warn…
2012年8月18日


roswell [18:01]
最新のEmacsって 26 かと思っていたら、27 になっているんですね。
今日、ソースからコンパイルして気が付きました。
画像がペーストされた日時: 2018-09-05, 6:01 午後 



syohex [18:02]
結構前な気がします.


roswell [18:03]
そうなんですね。いつもパッケージとか利用しているので、パッケージのVersionが最新と思っていました。
恥ずかしい。


shishi [18:16]
パッケージが最新ってことは一部を除いてあんまりないと思いますが、パッケージのほうが楽なんでいいですよね

** 2018/09/06
takaxp [04:34]
https://emacscast.org/
emacscast.org
EmacsCast
Exploring the world of Emacs as a beginner, learning how to grow a wonderful tool out of raw materials and with the help of the community.

conao3 [04:35]
いいですね笑

** 2018/09/10
peccu [10:40]
https://github.com/Silex/docker.el
なぜ今までこのツールを探そうとしなかったのか
Silex/docker.el
Manage docker from Emacs.
Stars
281
Language
Emacs Lisp
Silex/docker.el2015年5月19日投稿したメンバー: GitHub
https://qiita.com/kai2nenobu/items/7af012e327b8dd078ba4
これもはかどりそう
Qiita
docker-tramp.el でdockerコンテナのファイルを読み書きする - Qiita
# はじめに [docker-tramp.el](https://github.com/emacs-pe/docker-tramp.el) はdockerコンテナ内に存在するファイルを、Emacsから直接読み書きできるようにするラ...

k1low [12:54]
おおお　面白い

peccu [12:55]
この辺りも使えるかもしれません
https://github.com/spotify/dockerfile-mode
https://github.com/meqif/docker-compose-mode
meqif/docker-compose-mode
Stars
23
Language
Emacs Lisp
meqif/docker-compose-mode2017年7月21日投稿したメンバー: GitHub

k1low [12:57]
今までyaml-modeでやっていました。確かにmodeがあって不思議ではなかったw

peccu [13:05]
私もその状況でした。新しいことを始めるときにmodeを探す気持ちを忘れていました。。。


tadsan [13:42]
.｡o( むしろ人生で初めてDockerの名前を見たのがMELPAにdockerfile-modeが追加されたときだった )

nasa9084 [16:16]
dockerfile-modeはまぁ普通に便利です(インデントがたまに微妙)

tadsan [16:21]
まだ自分でまともなインデントルールの実装を完成させたことがない
smieに乗るのが簡単… ではあるのだけれど… https://qiita.com/kawabata@github/items/1a51ff1e22ad7ae824d5
Qiita
Emacs の Major Mode におけるインデント計算を楽にする smie.el   - Qiita
> Writing a good indentation function can be difficult and > to a large extent it is still a black art. > -- Emac...
dockerfile-modeはまともというか、特にインデント周りの実装は何も書かれてなかった

nasa9084 [16:42]
インデント、難しいですよねぇ
YAML-modeとかPython-modeとかもそうですが、自分でも書ける気がしない(というか定まらないときも多い

syohex [16:43]
Vimみたく基本的にはインデントはユーザ任せでもいいと思いますけどねぇ.

nasa9084 [16:44]
まぁ、改行したときに現在のインデント量そのままで改行してくれる、くらいあれば十分って気もします

tadsan [16:44]
いつでもTabキー押したらピタっとあるべき場所に収まる感覚が好きなので

syohex [16:45]
https://github.com/torvalds/linux/blob/master/Documentation/process/coding-style.rst

> You've probably been told by your long-time Unix user helper that GNU emacs automatically formats the C sources for you, and you've noticed that yes, it does do that, but the defaults it uses are less than desirable (in fact, they are worse than random typing - an infinite number of monkeys typing into GNU emacs would never make a good program).

Linusからめちゃディスられる auto-indent(最後のカッコの中) （編集済み） 

tadsan [16:46]
｀c-set-style｀ してほしい

nasa9084 [16:46]
｀｀｀---
foo:
  bar: baz
qux: #カーソルはここ｀｀｀
と打って改行したときに、
｀｀｀---
foo:
  bar: baz
  qux:
#カーソルはここ｀｀｀
になるのが毎回しんどいなーと思ってます （編集済み） 

syohex [16:47]
そういうときは fundamental-modeで書きそう...

nasa9084 [16:47]
｀qux:｀はそのままでええんや！っと

tadsan [16:47]
そういうときは ｀C-o｀ で改行する方に自分を馴らしてしまった (つらい)

nasa9084 [16:48]
fundamental-mode、TAB使えなくないですか

syohex [16:48]
M-iで打つ.
TABって tabを挿入じゃないのか.

nasa9084 [16:49]
なるほど
.oO(｀M-i｀で打つ、という体になっていないのでまだまだ・・・)

takaxp [16:54]
Emacsの使い始めのころ，テキストモードの ｀tab-stop-list｀ 指定で発狂して一時期Emacs捨てたです．

syohex [17:02]
確実な auto-indentができない, indentに意味を持たせる仕様はクソ派(Python, Haskell, YAML etc).

tadsan [17:02]
https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%95%E3%82%B5%E3%82%A4%E3%83%89%E3%83%AB%E3%83%BC%E3%83%AB
Wikipedia
オフサイドルール
オフサイドルール（Off-side Rule）とは、一部のプログラミング言語において字下げによって文などのかたまりの範囲（ブロック）を示す規則である。すなわち、そのような言語ではブロックは字下げによって形成され識別される。この用語と考え方は Peter J. Landin によるもので、ここでのoff-sideは「(左端)側から離れる」という意味だが、これはサッカーなどの球技におけるオフサイド規則 (offside law) のもじりと考えられる。
レイアウト・ルールと呼ぶこともある。

takaxp [17:04]
(Makefile…)

** 2018/09/10
syohex [17:07]
特に Pythonは block scopeでなく, function scopeだから余計にきつい. (block scopeならその変数を外側の blockで参照していたらインデントが間違っているのではないかとも言えなくはないが)

takaxp [17:11]
正直なところ，Python は Emacs で書いてないです．慣れてないのもあるけど，単純に怖い．

shougo [17:13]
PythonはVimで書いてます
Emacsだとやりづらいのかな

takaxp [17:16]
一般的にどうでしょうね．私の設定等が特殊な可能性は否めませんw

tadsan [17:20]
まあ、むかしはindent/undentやってたしこの程度我慢できるかなみたいな気持ちでEmacsでPythonは書ける
それより今はどっちのpython-modeが優勢なのかは気になる

syohex [17:22]
- Emacs本体にバンドルされていた
- 改良版があった -> Emacs本体に取り込まれる
- gitlabに独自版がある

現在本家と gitlab版があるという感じ.

tadsan [17:27]
起源も機能も異なる共存できない ｀python-mode｀
https://github.com/emacs-mirror/emacs/blob/emacs-26.1/lisp/progmodes/python.el
https://gitlab.com/python-mode-devs/python-mode/blob/master/python-mode.el
GitLab
python-mode.el · master · python-mode-devs / python-mode
GitLab.com
lisp/progmodes/python.el
```
;;; python.el --- Python's flying circus support for Emacs -＊- lexical-binding: t -＊-

;; Copyright (C) 2003-2018 Free Software Foundation, Inc.

;; Author: Fabián E. Gallina <fgallina@gnu.org>
;; URL: https://github.com/fgallina/python.el
;; Version: 0.25.2
;; Package-Requires: ((emacs "24.1") (cl-lib "1.0"))
 もっと表示する
emacs-mirror/emacs投稿したメンバー: GitHub

takaxp [17:27]
Oh...

syohex [17:28]
なぜ名前を変えなかったのか

takaxp [17:36]
prefix が “py-” なんだから，py-mode であるべき…

nasa9084 [17:48]
Pythonとemacsはホント相性が・・・

shougo [18:24]
なにこれひどい…。

tadsan [18:36]
既にコミュニティが分断しててそれぞれのひとたちが困ってないので是正されない、後から来たひとたち大迷惑な事態

znz [18:53]
ruby-mode.el は emacs に取り込まれて ruby 側にも残ってて fork 状態になっている…。

shougo [18:53]
:ギャー:

tadsan [18:56]
ruby本体側の方はしばらく見てないけど、もうかなりの差分がありそう
消しちゃえばよいのでは
うん、もうだいぶ距離が離れてますね。特にインデントエンジンがsmieになってるところ。
https://github.com/ruby/ruby/blob/trunk/misc/ruby-mode.el
https://github.com/emacs-mirror/emacs/blob/emacs-26/lisp/progmodes/ruby-mode.el
lisp/progmodes/ruby-mode.el
emacs-mirror/emacs投稿したメンバー: GitHub
Matz本人はどのバージョンのEmacsとruby-mode使ってるのかは気になるところ

syohex [19:03]
matzは Cしか書いていない説.

* org-mode
** 2016/06/07
syohex [10:21]
org-mode, timerとか clockの表示を global-mode-stringに設定するから mode-lineの調整が難しい. 右端でなくて左端にしたいけど(ウインドウ分割しまくったとき右端だと表示されないため),  他パッケージにも影響が出てしまう. display-timeと合わせてのことなのだろうけど, 独立させて欲しかった.

takaxp [10:28]
同意見です．mode-line が2行あればまた違うのですが．もしくはタイマーがある時だけ header-line に格納するとか．

syohex [10:32]
header-lineを考えてなかったですね, 検討してみます.

peccu [11:42]
header-line良さそうですね。
あと、今気づいたのですが各windowに表示する必要ないのでフレームタイトルに設定するのも良さそうです。
(フルスクリーンで利用していない場合だけですが)

takaxp [11:43]
↑フレームタイトルってコンソールでもGUIでも同じく出るのでしょうか

peccu [11:44]
コンソールだと出てなさそうですね。

takaxp [11:46]
悩ましいですね

peccu [11:49]
すでにありました。
｀｀｀(defcustom org-clock-clocked-in-display 'mode-line
  "When clocked in for a task, org-mode can display the current
task and accumulated time in the mode line and/or frame title.
Allowed values are:

both         displays in both mode line and frame title
mode-line    displays only in mode line (default)
frame-title  displays only in frame title
nil          current clock is not displayed"
  :group 'org-clock
  :type '(choice
      (const :tag "Mode line" mode-line)
      (const :tag "Frame title" frame-title)
      (const :tag "Both" both)
      (const :tag "None" nil)))｀｀｀
（編集済み）

takaxp [12:07]
おおそうでしたか！
org-timer 単独（例えばorg-timer-start）では出ないですが，org-clock-in で出ますね．
Screen Shot 2016-06-07 at 12.09.48.png 


peccu [12:11]
はい！
普段org-clock-inを使っていたので、すんなりうまくいきましたー

takaxp [12:12]
org-clock.el が異常に発達してるような… いつ間に．

peccu [12:12]
ほぼ、そのためにmode-lineを短くしていたので、少し戻しても良さそうです

takaxp [12:14]
org-clock-frame-title-format で型式もいじれますね．へー．

takaxp [12:23]
see Section 2.10.46 https://postmomentum.ch/steckemacs.html

** 2016/06/12
takaxp [19:05]
org-babel での言語指定（シェル）．org8.2 から ｀(shell . t)｀ になってたんですね… Orz
http://comments.gmane.org/gmane.emacs.orgmode/102877

takaxp [19:50]
ご参考までに．org-babel 対応言語．急増してますね．Google Translate は興味深い．
http://orgmode.org/worg/org-contrib/babel/languages.html

** 2017/11/01
yoshitia [11:37]
早速org-mode使い始めて2日目でclock-inのエラーが出たので何事かと思ったら前日最後のTODOをclock-outしてなかったからemacsが困ってたw

takaxp [16:34]
Emacs終了時に計測を止めるおまじない．
Untitled 
  (defun my:org-clock-out-and-save-when-exit ()
   "Save buffers and stop clocking when kill emacs."
   (when (org-clocking-p)
    (org-clock-out)
    (save-some-buffers t)))
  (add-hook 'kill-emacs-hook #'my:org-clock-out-and-save-when-exit))
折りたたむ 
私もあのメッセージ観ると毎回ビクッとします

yoshitia [16:53]
やっぱりwww
そこかしこでclock-in clock-outするからどこだっけってなっちゃいますよね

yoshitia [17:00]
早速init.elに追加しました。
ありがとうございます。

yoshitia [09:58]
頂いたコード、org-mode使ってないとvoid variable出るの最高ですね

syohex [11:00]
｀(when (featurep 'org) ...)｀とかでラップしとけばいいんじゃないですかね...

yoshitia [11:41]
org-clock.elがロードされてないのが問題なので雑に (require 'org-clock) して回避

yoshitia [13:44]
(when (fboundp org-clocking-p) ...) で上手く回避できるようになりました

takaxp [13:56]
あひゃー．Org Mode 使っていない人なんて居ないと思ってたんでゴメンなさい :あっかんべえ:

yoshitia [13:57]
あ、別に気にしてはないです。
他人が便利に使ってるコードを自分の環境に持ってくると良くある話なので
むしろそこに対応するのはコード借りてきた奴の仕事

takaxp [13:59]
偉い( ' -')b
ちなみに私のコードを確認したら，その定義は ｀(with-eval-after-load "org-clock"｀ の中に収まってました．
｀(with-eval-after-load "org-clock"｀ のブロックは更に， ｀(with-eval-after-load "org"｀ の中に… ええんのかこれでw

yoshitia [14:14]
Emacs終了時に計測を止めるおまじない改. 
(defun my:org-clock-out-and-save-when-exit ()
 "Save buffers and stop clocking when kill emacs."
 (when (org-clocking-p)
  (org-clock-out)
  (save-some-buffers t)))

(with-eval-after-load 'org-clock
  (add-hook 'kill-emacs-hook #'my:org-clock-out-and-save-when-exit))

yoshitia [14:14]
Emacs終了時に計測を止めるおまじない改.にコメントしました
これで動くみたいです。

yoshitia [14:20]
後で自分のブログに書いておくか

syohex [14:21]
一番 smartですね..

takaxp [14:25]
なるほどです．

** 2017/11/09
takaxp [03:36]
HEAD で “<s <tab>” が効かなくなっているのはバグかと思ってたけど，仕様変更みたい．

takaxp [03:52]
断固反対っ :org:

ayato-p [08:47]
まじですか…

yoshitia [08:51]
キーバインド変更ではないので？

yoshitia [09:33]
org-panel.el見るとorg-cycle が<M-TAB> org-global-cycleが<C-M-TAB>になってる？？？？

lurdan [10:20]
あ、丁度ハマってました……

yoshitia [10:21]
一番多用するところの変更検討してるのか

lurdan [10:22]
これかしら http://orgmode.org/cgit.cgi/org-mode.git/commit/?id=c04e357f3d5d93484277a7e439847b1233b872bd
org-insert-structure-template の構造が変更されて、登録してた定義をやり直さないといけないみたい

yoshitia [10:31]
easy templateってものがあるのか・・・

takaxp [16:29]
Untitled 
(defun org-try-structure-completion ()
 "Try to complete a structure template before point.
This looks for strings like \"<e\" on an otherwise empty line and
expands them."
 (let ((l (buffer-substring (point-at-bol) (point)))
	a)
  (when (and (looking-at "[ \t]*$")
	    (string-match "^[ \t]*<\\([a-zA-Z]+\\)$" l)
	    (setq a (assoc (match-string 1 l) org-structure-template-alist)))
   (org-complete-expand-structure-template (+ -1 (point-at-bol)
						 (match-beginning 1)) a)
   t)))
折りたたむ 
この定義とこれを呼び出している org-cycle 内の記述が消えます．
理由は Org のコード内で他のツールができる機能を重複実装しておくべきでないという理想なのですが，ユーザビリティの低下は否めない．
新しい方式では， ｀org-insert-structure-template｀ (C-c C-x w) を呼び，ミニバッファで ｀s｀ と打ち込むことです． （編集済み） 
自分はこれまで， ｀<S<tab>｀で ｀BEGIN_SRC emacslisp｀ のブロックを展開していましたが，
これを新しい方式に合わせるのであれば，
｀(add-to-list 'org-structure-template-alist  '(?S . "src emacs-lisp"))｀
を規定して， ｀C-c C-x w S｀ しないといけません． （編集済み） 
従来の方式を継続するには，とりあえず4種類のアプローチがあります．
1. Yasnippet 使え
2. hydra 魔設定 (e.g. https://github.com/abo-abo/hydra/wiki/Org-mode-block-templates)
GitHub
abo-abo/hydra
hydra - make Emacs bindings that stick around
3. build-in の skeleton.el + abbrev-mode を設定する
4. 失われる ｀org-try-structure-completion｀ と ｀org-cycle｀ を元に戻すパッチを自分で準備する

tak.kunihiro [16:41]
(1) でどうでしょう。

takaxp [16:41]
好きw

ayato-p [16:42]
1が素直ですよねー…
hydra魔設定も悪くはなさそうですが笑

takaxp [16:44]
おそらく Emacs core の機能で代替できる（追加インストールが不要）の観点から，公式では 3. が推されると思います．

lurdan [16:45]
新しい方式だと、begin_src が小文字限定になるのもつらいですねぇ (これまで大文字にしてたので

takaxp [16:48]
同感です．

tak.kunihiro [17:04]
# -＊- mode: snippet -＊-
# name: BEGIN_SRC el
# key: <el
# --
#+BEGIN_SRC emacs-lisp
$0
#+END_SRC

takaxp [17:06]
Yes! 高須！
あと実はバンドル設定が存在します．https://github.com/RickMoynihan/yasnippet-org-mode
GitHub
RickMoynihan/yasnippet-org-mode
yasnippet-org-mode - A YASnippet bundle for Emacs org-mode

takaxp [17:13]
Yasnippet 利用がストレートですけど，入門者向けの説明が面倒だ…

takaxp [17:25]
創始者(Carsten氏)降臨で仲裁コメント．どうなりますかね．http://lists.gnu.org/archive/html/emacs-orgmode/2017-11/msg00109.html

tak.kunihiro [17:28]
すでに (1) への移行を完了してしまいました。

takaxp [17:29]
Oh...

tak.kunihiro [18:44]
# -＊- mode: snippet -＊-
# name: BEGIN_SRC
# key: <s
# --
#+BEGIN_SRC ${1:$$(yas-choose-value (let (lang) (dolist (item org-babel-load-languages) (when (cdr item) (push (symbol-name (car item)) lang))) lang))}
$0
#+END_SRC

** 2018/07/29
conao3 [00:52]
初投稿失礼します。
以前githubで「他のバッファから#+begin_srcにコードをコピーしてきたときに引用元リンクを追記する（ffap?）」というパッケージを見つけた気がするのですが、今探しても見つかりません。
心当たりある方いらっしゃらないでしょうか？

takaxp [16:58]
https://github.com/unhammer/org-rich-yank
unhammer/org-rich-yank
:クリップボード: Rich text clipboard for org-mode: Paste into a #+BEGIN_SRC block of correct mode, with link to where it came from
Website
https://melpa.org/#/org-rich-yank
Stars
22
unhammer/org-rich-yank2018年2月9日投稿したメンバー: GitHub

conao3 [18:13]
おー！！まさにこれです！ありがとうございます！！

takaxp [20:37]
恐縮です( ' -’)b

** 2018/08/03
tak.kunihiro [22:56]
(setq org-startup-truncated nil
     org-startup-folded "showall"
     org-yank-folded-subtrees nil
     org-return-follows-link t
     org-image-actual-width 256
     org-edit-src-content-indentation 0
     org-confirm-babel-evaluate nil
     org-src-window-setup 'current-window
     org-src-fontify-natively t
     org-latex-packages-alist '(("whole" "bxcjkjatype")
                                ("a4paper" "geometry"))) （編集済み） 

** 2018/08/04
conao3 [09:43]
org-babelについて、Rの出力ファイル名やサイズなどを指定しているとbegin_srcの行が非常に長くなってしまいます。
2行かそれ以上に分けて記述したいのですが、できますでしょうか？

また指定しているオプションはファイル中でほとんど一緒なので、ヘッダーに一回書いておいて使いまわせたりするととても嬉しいのですが、、

conao3 [13:30]
いろんなorg記法の展開をしてるorg-export-asで、babelの解釈より先に
macroの解釈が来てるので、macroでいけると勘違いしました。

実際のところ、begin_srcの行に書かれたmacroは展開されないようです。
オプションを2行で書きたい場合はtakさんが出された中にある、#+headerを必要数書けばいいようです。
#+header: :results code
#+header: :exports both
#+BEGIN_SRC emacs-lisp
   (macroexpand '(use-package a
                   :after b))
#+END_SRC
これで2行分のオプションを認識してくれました。

** 2018/08/04
takaxp [20:33]
“<s” 展開はそろそろデフォルトでは使えなくなります(9.14〜)
org-tempo.el が代わりに提供されますけど，ちょっと精度に問題があったりなかったりするんで，確実にするなら yasnippet が良いでしょうね

conao3 [22:16]
なるほど！やはりyanippetですね。。
週末にスニペット作ってみます

tak.kunihiro [23:20]
# -＊- mode: snippet -＊-
# name: begin_src
# key: <s
# --
#+begin_src ${1:$$(yas-choose-value (let (lang) (dolist (item org-babel-load-languages) (when (cdr item) (push (symbol-name (car item)) lang))) lang))}
$0
#+end_src

tak.kunihiro [23:32]
@takaxp +HEADER なども小文字になるのでしょうか。

takaxp [00:06]
ピンポイントで +header が見つからないのですが， +headers の規定 ｀org-babel-multi-line-header-regexp｀ は小文字になってますね． babel 周りは小文字統一の流れのようです．

tak.kunihiro [00:27]
ありがとうございます。最初に大文字にしたのはなぜだったのだか...

takaxp [00:33]
マニュアルだと大文字放置が多いので，9.2 リリース時に異論がでるかもしれませんね．

conao3 [01:00]
@tak.kunihiro さん、スニペット作っていただいてありがとうございます！

tak.kunihiro [10:21]
自分のところのテンプレートに含まれる #+name:, #+header:, #+begin_src, #+end_src を小文字にしました。ありがとうございました。

** 2018/08/24
mhatta [14:49]
http://www.mhatta.org/wp/2018/08/24/org-mode-101-4/
mhatta's mumbo jumbo
モーレツ! Org mode 教室 その4: 画像を手軽に貼る
番外編というか、本当は先に別のことを書こうと思っていたのだが、人に聞かれた（そして私自身も知らなかった）ので、…
2018年8月24日

ox-hugoを後回しにして聞かれた話を書いた

他にも手はありそうだけどなあ


takaxp [14:54]
標準の org-attachments でも十分かもしれませんね．


mhatta [14:55]
org-attach はドラッグドロップでいけます？


takaxp [14:56]
org-attach-url で指定します


mhatta [14:56]
URLは手入力？


takaxp [14:56]
正確にはディスパッチャがあるので， ｀C-c C-a u｀ でURLコピペ


mhatta [14:57]
まあ org-download のほうが簡単そうだな（わらい

普段 evernote を使っているような人だと

やはりドラッグドロップじゃないと…


takaxp [14:58]
そうですか．それは素晴らしい( ' -’)b

uwabami [11:33]
@mhatta org-download しらなかった… 
(-nw でも使えるのかな。)


takaxp [13:35]
とりあえず手元の環境では -nw はむりぽ

あと ｀(setq org-download-method 'attach)｀ すると自動的に org-attachments が発動するのがだいぶ便利ですね．デスクトップに仮置きした画像をD&Dすると， org-directory 以下の所定の領域にコピーされて，さらにバッファ内にリンク設定もしてくれる． （編集済み） 

-nw の場合は，(mac ですけど) ｀org-mac-link｀ をハックしてブラウザから画像リンクを抜き出して，戻り値を ｀org-download-dnd｀ か ｀org-download-image｀ に渡すとかすれば，わりと使えそう． （編集済み） 


takaxp [13:51]
スクリーンキャプチャは ｀org-screenshot.el｀ と機能がかぶっているように見えるけど， ｀org-screenshot.el｀ は org-attachments と連携していないので， ｀org-download｀ の方が優位な気がしますね． （編集済み） 

なによりabo-abo氏作ですし:天使の笑顔:


takaxp [13:57]
あ，そういえば org-attach-screenshot.el ってのもあったな．ややこしい…


takaxp [14:04]
そうだったのね…
｀｀｀org-attach-screenshot allows taking screenshots from within an emacs org buffer session.
Important note: This package was originally named org-screenshot, but due to a name clash with one of the org-contrib packages, I decided to rename it to org-attach-screenshot.｀｀｀
https://github.com/dfeich/org-screenshot （編集済み） 
dfeich/org-screenshot
screenshots integrated with emacs org mode attachments
Stars
70
Language
Emacs Lisp
dfeich/org-screenshot2013年8月1日投稿したメンバー: GitHub


uwabami [17:34]
emacsclient で frame 開いて、org-download して、client 閉じる、とかかなぁ。

やってみよう


takaxp [05:55]
なるほど．かっこいい．

** 2018/10/18
roswell [15:27]
org-mode で、数式を扱えるのを知り、とても重宝しているのですが、

｀｀｀\begin{equation}
13^{n_1}\ c_1^{n_1+2} = 13^2\ b_2^{n_2}\ c_2^{n_2+2}
\end{equation}

\begin{flalign}
13^{n_1}\ c_1^{n_1+2} = 13^2\ b_2^{n_2}\ c_2^{n_2+2}
\end{flalign}｀｀｀
最初の式を、左寄せ数式番号を振りたく
https://www.biwako.shiga-u.ac.jp/sensei/kumazawa/tex/form020.html
で、flalign を使えばよいと知り、使ったのですが
html export すると、素のままで出力されてしまいます。
どのようにすれば、左寄せ数式番号有りで html export できるかご教示いただけますか？
画像がペーストされた日時: 2018-10-18, 3:27 午後 


roswell [17:36]
｀｀｀#+HTML_MATHJAX: align: left

\begin{equation}
13^{n_1}\ c_1^{n_1+2} = 13^2\ b_2^{n_2}\ c_2^{n_2+2}
\end{equation}｀｀｀
探し当てました。
https://orgmode.org/manual/Math-formatting-in-HTML-export.html　の 12.9.9 Math formatting in HTML export
｀#+HTML_MATHJAX: align: left｀
で対応できました。

Browserを画面いっぱいにしていると、数式番号が、離れてみずらいですが...
なんか設定あるんだろな。
画像がペーストされた日時: 2018-10-18, 5:36 午後 

** 2018/11/10
kaniza [14:52]
アジェンダ案 
- Org Mode とは
- Org Mode との暮らしについてディスカッション
 + どんな目的で、どんな風に使ってますか？
 + お気に入り/おすすめの機能は何ですか？
 + 興味はあるけどよく分からない機能は何ですか？
 
折りたたむ 

takaxp [18:39]
Agendaありがとうございます( ' -’)b
当日までに棚卸ししておこうφ(. _. )

takaxp [08:10]
思いついた範囲で．
Untitled 
- Org Mode とは
  - Exocortex（第二の脳）
- Org Mode との暮らしについてディスカッション
  1) どんな目的で、どんな風に使ってますか？
     - タスク管理（キャプチャ，トリガー管理）
     - 長期記録（log.org）
     - リスト管理（list.org）
     - 作業時間記録（見積もり作成）
     - 議事録作成（チェックボックス・アクションリスト）
     - プレゼン・ライブコーディング
     - 計算・分析（数式構築・内容確認）
     - ブログ作成（ox-hugo）
     - 文書作成（HTML等出力で公開）
     - 一部のセキュア情報の管理
     - init.el 記述
     - アラーム管理（タスク連携・Appt連携）
     - カレンダー出力（google calendar）
     - org-agenda（年間タスク・周期タスク）
  2) お気に入り/おすすめの機能は何ですか？
     - 「TODOステータス」と「チェックボックス」
       - チェックした項目の色を変える
     - スピードコマンド
     - ob-http.el（API動作確認）
     - org-grep, projectile-ag, org-recent-headings.el, org-tags-view
     - org-refile
     - org-download.el (org-attach)
     - org-tree-slide.el
     - orgbox.el
  3) 興味はあるけどよく分からない機能は何ですか？
     - [ ] カラムビュー
     - [ ] 論文書き
     - [ ] 脚注
     - [ ] org-publish
     
** 2018/11/23
takaxp [02:16]
そういえば，KOFで話題にでた中央寄せですけど，
｀(center-line &optional NLINES)｀
でいけます

conao3 [09:05]
ありがとうございます。
僕も最近80桁絶対守るマンになったので、使わせてもらいますー

takaxp [09:12]
ステキ( ' -’)b

** 2018/11/30
takaxp [11:41]
https://twitter.com/LibreLounge/status/1068322604748955648
Libre Lounge@LibreLounge
Our first episode is up at https://librelounge.org/episodes/episode-1-corporate-control-org-mode-mobile-phones-and-pdas.html We talk about Corporate Control, organizing your life with org-mode, mobile phones and PDAs!
Twitter2018年11月30日

takaxp [12:18]
30分以降にならんとOrgの話にならないw

conao3 [12:21]
まぁ1回目なので背景の話もしつつ、、笑
今出先なので夜聞きますー

takaxp [12:22]
8分ちょいで猫がにゃーんするので聞き所です

takaxp [12:29]
1. How to sync org files
2. Exact time scheduling
3. Missing RPC (remote procedure call)

takaxp [12:39]
2 は Emacsが起動している限り超厳密に管理できますわ
1. は Dropbox や rsync が基本で，Google Doc的なことを想定するなら，話が違うかな
3. は，外部プロセスとの連携という意味では問題ないと思う（org-protocol 系でOK）けど，上と同じでコラボ編集のための基盤という意味なら確かに不足している
ただ，第三者とバッファを共有するっていうの，昔のアドベントカレンダーで見かけたような…

conao3 [12:47]
これですか？　https://qiita.com/sanryuu/items/c0a38fd60634f4d451b4
Qiita
複数のEmacsでバッファを共有してペアプロできるpairpro.el作りました。 - Qiita
## はじめに ペアプロや、他の人の環境を使ってコードを書くときに 「自分のEmacsを使えれば、もっと素早くかっこよくプログラムを書けるのに」 って思うことはありませんか？ ありませんか・・・ 無い気もするし、ファイルを交代に...

takaxp [12:48]
それやー( ' -’)b あざます

conao3 [12:51]
Atomではteletypeなるものがあるみたいです。
これでOrg編集したい。。
https://teletype.atom.io/
teletype.atom.io
Code together in real time in Atom
Teletype for Atom lets developers share their workspace with team members and collaborate on code in real time.

takaxp [12:52]
それか同じファイルを共有して， ｀(global-auto-revert-mode 1)｀ で喧嘩しまくるか． （編集済み） 
https://floobits.com/help/plugins/emacs
https://melpa.org/#/floobits
melpa.org
MELPA
The largest and most up-to-date repository of Emacs packages.

conao3 [12:56]
これすごいですね

takaxp [12:56]
ね．有望．
パッケージ自体はかなり前からあるみたい．知らなんだ．

conao3 [13:23]
知らなかったです。。。Melpaに登録してあるパッケージ、順に見ていこうかな

takaxp [13:34]
https://github.com/zk-phi/togetherly
zk-phi/togetherly
[Emacs] allow multiple clients to edit a single file on-line
Stars
93
Language
Emacs Lisp
zk-phi/togetherly2015年5月1日投稿したメンバー: GitHub
忘れてた（汗

** 2018/12/07
conao3 [19:08]
https://github.com/conao3/cort.el/tree/feature%2331
目次を手作業で付けたのですが、なぜかgithubでレンダリングされなくなりました。。
何故かわかりますでしょうか。。？
ちなみに昨日同じような目次を手作業で付けて、cort.elにもつけようとしたら何故かレンダリングされなくなってしまったのです。。
https://github.com/conao3/leaf.el
conao3/leaf.el
Support your setting init.el like use-pacage
Stars
1
Language
Emacs Lisp
conao3/leaf.el2018年10月24日投稿したメンバー: GitHub

takaxp [19:26]
https://github.com/conao3/cort.el/blob/9bb9da9b572219ec52a9c2763e1d8ce180814884/Readme.org#L229
Readme.org:229
｀｀｀** ~:cort-emacs<~, ~:cort-emacs<=~,,, keywords｀｀｀
conao3/cort.el投稿したメンバー: GitHub
この辺りかなぁ…

conao3 [19:43]
更新しました。URLは変わっていません。まだレンダリング出来てませんね。。
orgでhtmlには正常に変換できるのですが・・

takaxp [19:44]
あらま．org-ruby でしたっけパーサ．あれで単体テストできますかね
https://github.com/github/markup
github/markup
Determines which markup library to use to render a content file (e.g. README) on GitHub
Stars
4449
Language
Ruby
github/markup2009年10月31日投稿したメンバー: GitHub

conao3 [19:46]
gemインストールしてやってみます。何かメッセージが出てるかもしれません

takaxp [19:47]
｀:｀ も怪しげ

conao3 [19:47]
実際cort.elの方も ｀[[:require keyword]]｀ としているんですよね。。リンクとして認識されてませんが。
やはり ｀:｀ があやしい？

takaxp [19:48]
内部見てないんですけど， ｀:｀ は見出しのタグ用に使われるので，特に見出し内で使うとバグるかも （編集済み） 

conao3 [19:49]
なるほどそういう使われ方してるんですね

takaxp [19:49]
｀｀｀** TODO [#B] Hugoを使用したブログシステムを構築する                 :Ongoing:｀｀｀

conao3 [19:50]
そういう書き方をした場合、その見出しへの文書リンクはどのような表記になるんでしょうか？

takaxp [19:51]
Org の内部的には基本的にタグ等は除外されます

conao3 [19:52]
なるほど。そういう仕様になってるんですね。

takaxp [19:53]
｀[3/10]｀ みたいなカウントしていると， refile 機能でバグります（まだ残ってる）なので，リンクを正確にやるには，プロパティで ｀CUSTOM_ID｀ を振ります． （編集済み） 

conao3 [19:54]
あ、やはりそういう機能ありますよね。見出しを自由に変えられないのはちょっと不便だなと思っていたので。

takaxp [19:55]
Web ページに出力する時に顕著ですよね．アドカレにでも Tips 流しますわ

conao3 [19:55]
ありがとうございますー！

conao3 [20:03]
GitHubでレンダリングされない件ですが、やはりリンクにチルダを使うとファイル全体がレンダリングされないようです。
leaf.elの方はキーワード直書きでチルダ使ってませんでした。。見落としで申し訳ないです。
https://github.com/conao3/leaf.el/pull/18/commits/22ec8d20459f472a140b2db88d0df10f93c2c176

takaxp [20:04]
:+1:

** 2018/12/13
takaxp [20:20]
https://qiita.com/t4ku/items/315337745c3fa691027c
Qiita
Org-modeを半年くらい使ってみた - Qiita
# Org-modeを半年くらい使ってみた Enigmo Advent Calendar 2018の12日目の記事です。 こんにちは、エンジニアの@t4kuです。半年ほどorg-modeを使ってメモや、日々のタスク管理を行ってきた...

conao3 [21:09]
これは良いまとめですね。布教に使っていきたい。。！

takaxp [21:09]
Great!
ソースコードの実行は ｀ob-ipython｀ に限らず色々と可能です． （編集済み） 

** 2018/12/15
conao3 [10:53]
ox-hugoのorg-captureからささっとブログ書けるのはいいなーと思ってます。
たとえばトップレベルの章を全部別々のorg文書に分割する機能があれば、一つのOrgで複数のブログ記事として公開できるのかなと。。

takaxp [11:09]
↑できたはず
デプロイ先まで変えられた（事例をどこかでみた） （編集済み） 

conao3 [11:10]
すごい！

takaxp [11:11]
https://github.com/astahlman/ob-async/blob/master/ob-async.el
ob-async.el
```
;;; ob-async.el --- Asynchronous org-babel src block execution

;; Copyright (C) 2017 Andrew Stahlman

;; Author: Andrew Stahlman <andrewstahlman@gmail.com>
;; Created: 10 Feb 2017
;; Version: 0.1

;; Keywords: tools
;; Homepage: https://github.com/astahlman/ob-async

;; This file is not part of GNU Emacs.

;; This program is free software: you can redistribute it and/or modify
 もっと表示する
astahlman/ob-async投稿したメンバー: GitHub
↑ ソースブロックの非同期実行

conao3 [11:13]
EXPORT_FILE_NAME を指定すればエクスポート時に指定した名前でエクスポートできるのですが、この指定を章に出来たらいいなーという感じです。。

takaxp [11:14]
サブツリーのプロパティの中で使うと，それが記事のファイル名になるやつですね

conao3 [11:15]
ox-hugoでいうその動作ですね。org-publishでもできるのでしょうか。。？

takaxp [11:17]
あー．org-publish でできるかは不明です

conao3 [11:20]
この分割エクスポートなのですが、やりたいなーと思っている時にKOFで普通に動いているとこを見て本当にびっくりしました笑

takaxp [11:20]
｀ox-hugo｀ はかなり作り込まれていますからねw
https://github.com/kaushalmodi/ox-hugo/pull/201
freetonik
#201 add emacscast.org and rakhim.org to examples
Comments
4
kaushalmodi/ox-hugo2018年9月6日投稿したメンバー: GitHub
嘘言ったかも．1ファイルとは言ってなかった．．．

conao3 [11:24]
むむ。ox-hugoのエクスポートは1ファイルで1ファイルにエクスポートのみをサポートしてるんですか？

takaxp [11:24]
えっと両方できるんです
1ファイル => 1ポスト
1ファイルのサブツリー => 1ポスト
ができる．私が知りたいのは，
1ファイルのサブツリーA以下 => 各1ポスト => ブログAへ
1ファイルのサブツリーB以下 => 各1ポスト => ブログBへ
ができたかどうか

conao3 [11:26]
なるほど！ox-hugoやはりすごい。。

takaxp [11:33]
さすがにデプロイ先が異なる場合は，ファイル分けないとダメっぽいですねOrz
失礼しました m(_ _)m

conao3 [11:34]
いえいえ！でもサブツリー以下で分割エクスポートできるなら、デプロイ先変えるのも簡単な変更で行けそう？かもしれません。
org-publishも変換前に関数を登録できるので、分割する関数書いてエクスポート後にゴミ掃除したらできそうなんですが。。 ~（優先度低め）~ （編集済み） 

takaxp [11:38]
https://emacs.stackexchange.com/questions/37949/how-can-i-publish-a-single-org-file-to-multiple-pdfs
Emacs Stack Exchange
How can I publish a single org file to multiple pdfs
I have an org document that has confidential and non-confidential information. I need to publish the org file to two different pdfs: one that contains all of the information from the org file and ...
publish-function に html エクスポータを指定すればOK？
https://lists.gnu.org/archive/html/emacs-orgmode/2015-08/msg01283.html
よりストレートに org ファイルを複数に自動分割して対応するという恐ろしい技もある模様…
連投失礼．https://lists.gnu.org/archive/html/emacs-orgmode/2010-05/msg00805.html
できそうな予感．

conao3 [11:42]
情報ありがとうございます！
やはりみんな考えることは一緒ですね。。笑

takaxp [11:43]
Org 関連で「あれできないの？」は大抵のことは先に解かれてますw

conao3 [11:43]
知の集積がすごい。。

takaxp [11:44]
同感( ' -’)b

** 2018/12/20
takaxp [21:43]
@conao3 ちょっと前に言及した ｀CUSTOM_ID｀ によるリンク固定方法ですけど，Qiitaが埋まっているので情報源だけ示します．
https://takaxp.github.io/init.html#org32e931e3

conao3 [21:45]
ありがとうございます！元ネタさんもきれいなサイトですね。。
脚注が横に出るのは採用したい

** 2018/12/21
takaxp [14:31]
｀easy-hugo｀ と ｀ox-hugo｀ の併用例ってどこで見られるかな〜

takaxp [14:41]
｀easy-hugo｀ のコード読ませてもらってますけど，便利機能多いw
執筆記法無関係で使ったほうが良いかも @masasam サンクス！

masasam [14:43]
ありがとうございます。
併用しているユーザーはhttps://www.shangzongyu.com/post/misc/use-orgmode-and-hugo-write-blog/
見つけましたが詳細がわからずです。
他にもissueをeasy-hugoとox-hugo両方にくれたユーザーがいるので併用している可能性は高いと思うのですが…
shangzongyu.com
使用 hugo 和 ox-hugo 搭建自己的 BLOG
为什么要写这个文章？ 为什么使用 hugo 而不是 hexo 或者其他的？ hexo node 写的，环境配置等麻烦 喜欢 org-mode 语法超过 Markdown 为什么使用 org-mode , 而不是 markdown, 明明 Markdown 更有名
2018年11月17日

takaxp [14:45]
↑ プレビューに使っていますね
私も併用したくなってきた
自分のフローだと，ローカルサーバを起動してプレビュー確認しますが，この時に Emacs から ターミナルに画面切り替えするから，これを改善したい( ' -’)b

masasam [14:52]
併用してわかった問題点などがあればぜひ聞きたいです。

takaxp [14:53]
ほほい( ' -’)b
（参考）https://github.com/kaushalmodi/ox-hugo/issues/109
titaniumbones
#109 open current file/subtree in local hugo server
(wishlist issue! would attach a label indicatung that if I could!)

When I'm working in HTML, I notice I do a lot of ~browse-url-of-buffer~. I think it would be cool to have something equivalent for ox-hugo, that opened the ｀localhost:xxxx｀ url of the current buffer or subtree via ｀hugo server -sw HUGO_BASE_DIR｀. At least for simple default cases, it should be easy to generate most parts of the URL from ｀HUGO_BASE_DIR + HUGO_SECTION + EXPORT_FILENAME｀. I bet I'm not alone in wanting something like this.

The main difficulties I see include:

• the ｀hugo server｀ command doesn't seem to make the port accessible anywhere, even if you enable logging to a logfile
• as a result, there's not foolproof way to tell w… もっと表示する
Comments
5
kaushalmodi/ox-hugo2017年12月19日投稿したメンバー: GitHub

masasam [15:05]
これは違うポートでhugoのプレビューを同時に見たいということなのでしょうか？

takaxp [15:07]
大元の問はそうですね，すでにあるポートで起動しているのは触らず，別なポートでプレビューをみたいと．
複数サイトを管理する場合はその要求はありそうですね．
解としては， ｀hugo server｀ のオプションで切り替えているだけみたいですけど．

masasam [15:15]
なるほど。easy-hugoではhugoプロセスが一つしか起動しないようにしているので今のところ同時に全サイトのプレビューはできないです。一定時間が立ったらhugoプロセスを消しています。このほうがユーザーにとって使いやすいと思ったからです。共存できそうな実装を思いついたら全サイトプレビューは面白そうなので考えてみます。

takaxp [15:23]
利用者の環境に応じてリソース異なりますから，プロセス1つ起動で制限付きは最善手と思います( ' -’)b

** 2018/12/22
conao3 [01:09]
アドベントカレンダーでzkさんの「[Emacs] key-chord.el を改良してキーバインドし放題になった話」を引用させていただいたのですが、リンク文字列で角括弧を使うと波括弧に変換されるんですね。
Orgに自動で変換された後に、たしかにこれはまずい。。と思いました笑
勝手に角括弧を波括弧に変換してくるので、リンク文字列に角括弧を入れるのは難しそうです

takaxp [01:17]
へー
副産物で ｀M-x org-lint｀ を見つけたφ(. _. )

conao3 [01:18]
orgにlint...
ニッチすぎる需要なのでは笑

takaxp [01:20]
https://orgmode.org/manual/Org-syntax.html#index-linter
orgmode.org
The Org Manual: Org syntax
The Org Manual: Org syntax

conao3 [01:20]
ニッチといえば ｀ox-org｀ でOrg文書からOrg文書に変換して正規化されたOrg文書を得るみたいな需要もニッチかと思いますが

takaxp [01:20]
｀ox-org｀ すげー重いでやんのw （読み込みが）

conao3 [01:22]
そうなんですね。常用してないので知らなかったです
GitHubトップページ表示用に1週間使っただけの短命選手だったので笑

takaxp [01:23]
｀｀｀(with-eval-after-load "ox"
    (add-to-list 'org-modules 'ox-odt)
    (add-to-list 'org-modules 'ox-org))｀｀｀
にしておけばOKです．

conao3 [01:25]
なるほど。after-load系はuse-package先生に丸投げしていたので、いろいろ調べないといけないなと思っています。
leaf.elが処理できるようになったらleaf.elに丸投げするようになって忘れる気がしますが

** 2018/12/22
そういえば、これは実際に困っているのですが、Orgを使うメリットの一つに「自由なフォーマットで文章が書ける」事があると思います。文章のどこでも改行を入れられるという意味です。
しかしエクスポートすると空白を伴って結合されます。英語の文章であれば問題ないのでしょうが、日本語の文章だと少し気になります。
この動作を制御する変数等ありますでしょうか？

takaxp [01:31]
#+OPTIONS になんかあったはず．

conao3 [01:31]
改行を保存するオプションはあった気がします。何でもかんでも結合されるとそれはそれで困るのですが。。笑

takaxp [01:31]
\n
Toggles whether to preserve line breaks (org-export-preserve-breaks).
\n:nil かな

conao3 [01:34]
Capture 2018-12-22 1.34.10.png 

\n:nilを使ってエクスポートしましたが、空白がなくなりません。エクスポート段階で文字列が区切られているのが直接的な原因のようですが。。

takaxp [01:37]
あー tex 的なことをしたいのか

conao3 [01:38]
そうですね。texも自由に改行を入れることが出来ます。Webにエクスポートするときもその方が受け手にとって良いと思っています。
ブラウザで表示されることを想定していていい感じに改行を打ち込んだ記事をスマホで表示されるとそれは大変なことになるので

takaxp [01:42]
まぁ長文なら改行しない，改行する内容はリスト形式（ブリッツ）で書くってのが前提にありますけど，最悪は html エクスポータのハックで対応できそう （編集済み） 

conao3 [01:45]
むむ。エクスポータをいじることになりそうですか。。
普通の改行は編集時の単に読みやすさのためなので無視されて、2つの改行は段落区切りなので意味があるっていうのは一定の合理性があると思うんですよね。
「行末と次の行頭が2バイト文字だと区切らない」とかアドホックな対応をエクスポータにさせないといけないっぽいですね

takaxp [01:50]
http://fjyuu.info/blog/remove-japanese-spaces/
fjyuu.info
org-modeが出力するHTMLから余分な改行を削除する
個人的なメモを書きます

conao3 [01:50]
そのものずばりなメモが。。。！
処理を丸投げしてるperlスクリプトが404問題

takaxp [01:52]
書けw
似たような問題が odt 側にもあって，こっちは出力した後に特定のタグを消すスクリプト準備して使ってました（最近メンテしてない）

conao3 [01:54]
あ、それぞれエクスポートしたあとにそのファイルに対して更にフィルタを掛けるみたいな感じになってるんですね。

takaxp [01:55]
私も同じアプローチを頻繁にとります．elispでも良いんですけど，億劫で…

yoshitia [01:57]
workflowy使いだしてからorg-mode使わなくなってしまったなぁ

conao3 [02:00]
Emacs以外のエディタで文字を書くのが辛い体になってしまったので、文章を書くなら全部Orgですね。

takaxp [02:01]
正解

yoshitia [02:02]
単純なアウトライナーとしての使い勝手がすごくいいもんでなぁ＞workflowy

takaxp [02:04]
｀org-export-filter-line-break-functions｀ に何かカスタム関数をぶら下げると，挙動を変えられるのかもしれない．
https://emacs.stackexchange.com/questions/16688/how-can-i-escape-the-in-org-mode-to-prevent-bold-fontification/16689
Emacs Stack Exchange
How can I escape the * in org-mode to prevent bold fontification
If I write something like ＊shrug＊ in org mode, it will be automatically fontified as bold text. How can I prevent that, i.e. actually having ＊shrug＊ appear verbatim when exported? Edit: I still ...
｀｀｀(defun my-bold (contents backend info)
  (when (org-export-derived-backend-p backend 'latex)
    (replace-regexp-in-string "\\`\\\\textbf{\\(.+\\)}"
                              "\\\\ast{}\\1\\\\ast{}" contents)))

(add-to-list 'org-export-filter-bold-functions 'my-bold)｀｀｀
うお．textbf を別のコマンドに矯正できんのか． （編集済み） 

conao3 [02:07]
応用力高そう

takaxp [02:08]
上の例みたいに，引数3つ取る関数こさえて，内部で\nを消せば良いのかな．どうだろ．エクスポートしたHTMLnoソースみると <p>…</p>内で改行しちゃってるでしょ． （編集済み） 

conao3 [02:12]
そうですね。2重引用符で囲まれたことによって空白が出てるように見えるので、2重引用符をなくして<p>に任せればいいのかなと思いました
↑違いました。そもそも上でスクショ取ったとこのソースは全く参考にならないところでした。。
Capture 2018-12-22 1.34.10.png 

Capture 2018-12-22 2.12.41.png 


takaxp [02:14]
まー私なら<p>タグ内の無用な改行取るperl 書いてぶん回すわw

conao3 [02:15]
筋肉
正しいアプローチですね

* general
** 2017/06/21
motchang [14:24]
みなさんこんにちは

emacs + GTAGS で ruby スクリプトを買いているのですが、`something?` などのはてな付きのメソッドなどにジャンプする方法ってあるんでしょうか？
＿ruby helm gtag find tag method with question＿ で検索してみたのですがどうもそれっぽい記事を見つけることができませんでした(´･_･`)

takaxp [14:26]
http://hbin.me/blog/2013/02/24/the-ultimate-solution-for-emacs-find-tags/
hbin.me
The Ultimate Solution of Emacs Finding Tags in a Rails Project - ###
Emacs is my favorite text editor. I do a lot of Ruby on Rails programming using it. It’s really handy, useful and hacky for me ;) Sometimes, I …
ruby 門外なので google 先生に問い合わせただけですが当たってます ‘-’?

motchang [14:27]
当たってそうです！ありがとうございます！
ちなみにどのような単語で検索されたかお教えいただけないでしょうか？

takaxp [14:28]
question だと範囲が大きいので，mark をつけました
gtags emacs ruby “question mark”
です

motchang [14:30]
ありがとうございます :祈る:

takaxp [14:40]
:rms:

** 2017/09/26
tadsan [21:34]
Emacsでこーゆーのをやる、いちばんまともなソリューションってなんだろう… 


(こーゆーの＝コメントの中で改行したら行頭文字を引き継ぐ) （編集済み） 


takaxp [21:47]
doxymacs.el ですかねぇ…

phpは未対応みたい


takaxp [22:01]
https://www.gnu.org/software/emacs/manual/html_node/emacs/Multi_002dLine-Comments.html (comment-indent-new-line)

https://emacs.stackexchange.com/questions/14563/how-to-automatically-create-neat-c-comment-blocks-while-typing
emacs.stackexchange.com
How to automatically create neat C comment blocks while typing?
Some code editors such as eclipse automatically form neat blocks when you start typing a multi-line comment: Is there some package or another way to do this in emacs too? Edit: To clarify: I do not

コメント形式指定で汎用的に使えるのが理想的だなぁ

yyuta [16:15]
tadsanさんのファイル : Emacsでこーゆーのをやる、いちばんまともなソリューションってなんだろう… にコメントしました
C-M-jかM-jでできたような


tadsan [18:14]
あー、 ｀c-indent-new-comment-line｀ なるほど…

デフォルトは ｀indent-new-comment-line｀ か


takaxp [19:43]
indent-new-comment-line is an alias for `comment-indent-new-line’.

It is bound to C-M-j, M-j.

(indent-new-comment-line &optional SOFT)

** 2018/03/12
kakakaya [11:56]
magitについて、 ｀magit-status｀ から変更をステージングする際って ｀git add --patch｀ のようにチャンク毎にaddするかどうか選べるんですが、この範囲のサイズを小さくする方法ってありますか？

｀git add --patch｀ でいうところのプロンプトで ｀s｀ を入力した時の挙動を求めています。


niku [11:57]
｀-｀ と ｀+｀ でどうですか？


kakakaya [11:59]
まさしく求めていた感じにできました！
即レスありがとうございます


niku [12:00]
便利ですよねー．デフォルトのサイズへ戻したいときは ｀0｀ がそれに該当する気がします！


tarao [12:05]
あとなんかスペースキーで範囲選択開始してから ｀s｀ すると、その範囲だけ入れるのできますね （編集済み） 


niku [12:07]
知らなかった……


kakakaya [12:07]
奥が深い……


nasa9084 [17:12]
なんならGUIだとマウスで範囲選択して`s`するみたいな雑な使い方もできますね

** 2018/06/22
roswell [14:02]
(add-to-list 'default-frame-alist '(font . "Ricty Diminished-15"))
と init.el に記述し、
Ricty Diminished フォントを使用しているのですが、
Ricty Diminished フォントが存在しない別マシンで、この設定を使用した場合に
エラーになってしまうので、指定したフォントが存在するか？ emacs lisp で
判断するにはどのように記述すればいいですか？

takaxp [14:03]
(x-list-fonts “Ricty Diminished-15”)

tadsan [14:07]
｀｀｀(when (member "Ricty Diminished" (font-family-list))
  (add-to-list 'default-frame-alist '(font . "Ricty Diminished-15")))｀｀｀
（編集済み）

syohex [14:12]
｀x-list-fonts｀は ｀emacs -nw｀だとエラーが投げられるので, font-family-listの方がいいですかね. (font-family-listは nilが返る)

takaxp [14:13]
御意（(fboundp ’x-list-fonts) で判定してた…）

roswell [14:32]
@tadsan さん、ご教示ありがとうございます。

tak.kunihiro [11:10]
(let ((font "Ricty Diminished-15")
     (regexp "\\`\\([A-Za-z ]+\\)-\\([0-9]+\\)\\'")
     name size)
 (when (string-match regexp font)
   (setq name (match-string 1 font))
   (setq size (match-string 2 font))
   (when (member name (font-family-list))
     (set-frame-font font t)
     (add-to-list 'default-frame-alist `(font . ,font)))))
正規表現はエスケープ地獄なので、普段から意識して使わないと、いざという時に脇道にそれることになります。

syohex [11:44]
- それぐらいなら ｀(split-string font "-")｀でもいいかもしれないですね
- name, sizeは whenの中で letした方が lisp的ですかね. setqは極力避けるのがよいかと(sizeはいらないような...)
- case-fold-search次第ですが, デフォルトだと大文字小文字無視でマッチですね.


tadsan [11:48]
正規表現は生で書かずに ｀rx｀ で （編集済み） 

shishi [11:58]
Emacsで正規表現は諦めた組

syohex [12:04]
raw stringがあればわりとだいぶマシになりそうな気がするけど, 入る見込みがない(過去には却下されていたはず). reader macroと少しの修正でできそうな気はするんだけど.

tak.kunihiro [15:19]
@syohex 添削ありがとうございます。これでどうでしょう。
(defun sesame-set-font (font)
 "Set Japanese font for Mac and Windows.
 (interactive
  (list (let ((collection '("Myrica M-14"
                            "MyricaM M-14"
                            "Noto Sans Mono CJK JP Regular-10"
                            "Noto Sans Mono CJK JP Regular-12"
                            "Noto Sans Mono CJK JP Regular-14"
                            "Noto Sans Mono CJK JP Bold-10"
                            "Noto Sans Mono CJK JP Bold-12"
                            "Noto Sans Mono CJK JP Bold-14"
                            "Ricty Diminished Discord-10.5"
                            "Ricty Diminished Discord-12"
                            "Ricty Diminished Discord-15"
                            "MS Gothic-10"
                            "MS Gothic-12"
                            "MS Mincho-10"
                            "MigMix 1M-10")))
          (require 'anything-config)
          (anything-comp-read "Font: " collection))))
 (when (member (car (split-string font "-")) (font-family-list))
   (set-frame-font font t)
   (add-to-list 'default-frame-alist `(font . ,font)))) （編集済み） 

takaxp [15:22]
Oh... ｀(nth 0 (split-string hoge "-"))｀ とかできるんですね．ケバブの切り離し楽しす．

syohex [16:01]
良さげです. interactiveなのでフォントが見つからない場合などはその旨(そのフォントはインストールされていません, 的な)メッセージを出すと親切かもしれません.

tak.kunihiro [08:13]
添削、ありがとうございます。これでフォントがインストールされていなくても、放置することができる気分になれました。

** 2018/07/12
mhatta [20:25]
Windows 10のApril 2018 Updateというかバージョン1803以降でIME使おうとすると、modelineは「あ」とかに変わるんだけど日本語入力がオンにならないという謎の問題があって
マウスでウィンドウを動かしたりリサイズしたりすると直るんだけど
Shift-F10を押しても直るということが分かった
init.elとかで、「SHIFT-F10を押したことにする」みたいなことってできますかねえ

syohex [20:29]
Emacs的に押すことはできるように思いますが, Windows的に押さないのといけないのではないですかね, それ? ( どっちがキー取っているのだろう ?  ) （編集済み） 

mhatta [20:29]
どうなんだろう
そもそもShift-F10がなんなのかわからん（わらい

takaxp [21:11]
XKeymacs の出番ですか

tak.kunihiro [22:45]
msys2 の grep.exe で日本語を検索する方法どなたかご存じでしたら、教えてください。

syohex [22:57]
terminal emulatorからですかね ? それとも Emacsからでしょうか ? 前者では普通に IME onにして日本語入力したらいけましたが(Terminal emulatorとファイルの文字コードが一致している必要あり)

mhatta [23:38]
msys2のminitty上のbashだと、特に何のひねりもなく grep 日本語 file で検索できましたよ
eshellからだとなんかうまくいかないな
xkeymacsてまだあったのか
最近はkeyhacだと思っていた

takaxp [03:17]
あはーん．主流が変わってるんですね．はは，エセWinユーザなのがバレてしまった…

tak.kunihiro [08:04]
@syohex @mhatta レスポンスありがとうございます。grep.exe の前に bash on mintty 2.8.5 で less hello-utf8.txt を表示させられません。こんな感じになります。<E3><83><88><E3>。mintty は Locale は C、Char set は UTF-8 です。ヒントをいただけませんでしょうか。

mhatta [08:20]
@tak.kunihiro  そのパターンはたぶんLANGがja_JP.utf8になってないんじゃないですか
Debian上のターミナルで<E3><83>とかそういうふうに化けるのはだいたいLANGだな （編集済み） 

tak.kunihiro [13:53]
ありがとうございます。LANG 周辺に問題があると教えてもらって助かりました。自分の環境では LANG=ja_JP.utf8 でうまくいかないようで、以下のように山勘で設定しました。mintty で日本語が表示されるようになり、grep.exe が機能することを確認しました。
LC_CTYPE=C
LANG=en_US.UTF-8
LC_ALL=en_US.UTF-8 （編集済み） 

tak.kunihiro [14:00]
さて、M-x grep で日本語がさっぱりひっかかりません。引き続き、ヒントいただけませんでしょうか。

tadsan [14:02]
｀M-x grep｀ は ｀grep｀ コマンドのラッパーなので、これもエンコーディングの問題な気がしてる

syohex [14:02]
asciiでひっかかる, 日本語でひっかからないだとエンコーディングですかね.

tadsan [14:16]
これでどうだ (動作確認してません)
｀｀｀(defun grep-set-env (orig-func &rest args)
  "GREPの実行前後に環境変数をセットする"
  (let ((env (cl-loop for name in '("LC_CTYPE" "LANG" "LC_ALL")
                      collect (cons name (getenv name)))))
    (setenv "LC_CTYPE" "C")
    (setenv "LANG" "en_US.UTF-8")
    (setenv "LC_ALL" "en_US.UTF-8")
    (unwind-protect
        (apply orig-func args)
      (cl-loop for (name . value) in env
               if value collect (setenv name value)))))

;; セットする
(advice-add #'grep :around 'grep-set-env)

;; 動作が怪しかったらこれで無効化する
(advice-remove #'grep 'grep-set-env)｀｀｀
（編集済み）

takaxp [14:19]
こういう時，advice-add をコメントアウトしてね，と説明するか， advice-remove で打ち消してね，と説明するかでよく悩む．

tadsan [14:22]
｀advice-add｀ コメントアウトだとEmacs再起動しないと戻らないので辛い
それ考えると上のコードでも途中で失敗したら戻らないので ｀unwind-protect｀ で包んだ方がいいな

takaxp [14:23]
おー．確かに．

syohex [14:25]
setenvじゃなくて, process-environmentで一時的にセットがいいですかね.

tadsan [14:25]
知らなかった…
超すっきりした
｀｀｀(defun grep-set-env (orig-func &rest args)
  "GREPの実行前後に環境変数をセットする"
  (let ((process-environment
         '("LC_CTYPE=C" "LANG=en_US.UTF-8" "LC_ALL=en_US.UTF-8")))
    (apply orig-func args)))｀｀｀

takaxp [14:28]
before で良さげ

tadsan [14:28]
~ダイナミックスコープ最高ですね~

takaxp [14:28]
あ
だめねw

tak.kunihiro [14:29]
(setenv "LC_CTYPE" "C")
(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
Ｍ-x grep で ascii は引っかかるのですが、日本語はうまくいきません...

tadsan [14:29]
｀:before｀ は関数がとれないので ｀let｀ で括らないとだめですね
ううむ、なんでうまくいかないんだろ
コマンドラインからうまくいくってことは検索対象はUTF-8 なんですよね？

tak.kunihiro [14:31]
Bash on Msys2 でうまくいくながら、cmd ではうまくいってないことに気づきました.

syohex [14:32]
chcp 65001するとか ?

takaxp [14:34]
Windowsさん，闇だなぁ…

tadsan [14:34]
｀chcp｀ なんとなくやりたくなかったけど、実行中のプロセスだけじゃなくて設定永続化されるのか…

takaxp [14:35]
レジストリに書き込む方法があるみたい
https://qiita.com/yufu/items/86a455f948a3e1c0ef97
Qiita
コマンドプロンプト起動時、自動的に文字コードをUTF-8にして日本語もちゃんと表示できるようにする方法 - Qiita
Windows7 でのみ動作確認済。XPとかだとうまくいかないかもっぽぃらしい。 # 前提知識 * コマンドプロンプトのデフォルト文字コードは Shift_JIS * ｀chcp｀ コマンドで文字コードを変更できる * ただし、文...

tak.kunihiro [14:38]
CMD> chcp 65001
CMD> c:/msys64/usr/bin/grep -inHr -e "こんにちは" .
は空砲に終わります。

takaxp [14:40]
c:/msys64/usr/bin/grep -inHr -e “\こ\ん\に\ち\は” . だとどうでしょう

tadsan [14:46]
もう何も信じられない
｀｀｀(defun grep-set-env (orig-func &rest args)
  "GREPの実行前後に環境変数をセットする"
  (let ((process-environment
         '("LC_CTYPE=C" "LANG=en_US.UTF-8" "LC_ALL=en_US.UTF-8")))
    (apply orig-func
           (cl-loop s in args
                    collect (with-temp-buffer
                              (insert s)
                              (set-buffer-file-coding-system 'utf-8)
                              (buffer-substring-no-properties (point-min) (point-max)))))
    (cl-loop for (name . value) in env
             if value collect (setenv name value))))｀｀｀

tak.kunihiro [14:51]
cmd> setx LC_CTYPE C
cmd> setx LANG en_US.UTF-8
cmd> setx LC_ALL en_US.UTF-8
cmd> c:/msys64/usr/bin/grep -inHr -e "こんにちは" .
ようやくひっかかりました。
Emacs ではまだひっかからず。長い旅になりそうです...

takaxp [15:01]
（あ，上のは“” でくくらず \あ\い とそのまま書くパターンです） （編集済み） 

tak.kunihiro [15:12]
ありがとうございます。普段は regexp-quote して渡しています。

tak.kunihiro [07:58]
CMD> c:/msys64/usr/bin/cat hello.txt
Hello is こんにちは in Japanese.
Hello is bonjour in French.

CMD> c:/msys64/usr/bin/grep.exe Hello hello.txt
Hello is こんにちは in Japanese.
Hello is bonjour in French.

CMD> c:/msys64/usr/bin/grep.exe "こんにちは" hello.txt
Hello is こんにちは in Japanese.

CMD> c:/emacs-26.1/bin/runemacs -Q
M-x shell

CMD> c:/msys64/usr/bin/grep.exe Hello hello.txt
c:/msys64/usr/bin/grep.exe Hello hello.txt
Hello is こんにちは in Japanese.
Hello is bonjour in French.

CMD> c:/msys64/usr/bin/grep.exe "こんにちは" hello.txt
c:/msys64/usr/bin/grep.exe "こんにちは" hello.txt
M-x shell で grep.exe が期待通りに動いてくれないのが問題ではないか、と認識するに至りました。

tak.kunihiro [08:04]
https://www.gnu.org/software/grep/manual/grep.html#Environment-Variables
によると LC_ALL を参照するはずで、これは問題ないはず。
gnu.org
GNU Grep 3.0
GNU Grep 3.0

syohex [15:23]
https://mattn.kaoriya.net/software/lang/go/20110819203649.htm

こういうの使うと楽とかないのですかね ? GNU toolsは Windowsのことを基本的に想定しないのでややこしそう.
Big Sky
Big Sky :: 日本語grepが出来るjvgrepというのを作った。
システム開発屋がひっそり語るぼやき

tomoya [16:22]
僕は lv 付属の lgrep を使うように統一してますね
まぁ、もう昔の人なので、昔から変わってないだけですけどねw

tadsan [16:25]
lgrep 動かない… なんでだろ
(lvは愛用してます)
｀M-x grep｀ コード読むとやっぱりGNU版のgrepじゃないとちゃんと動かなそうなので厳しい
僕は手癖で ｀M-x ag｀ 使ってます。いまだったらripgrep系の方がよいかも。
そして、 ｀rg｀ と ｀ripgrep｀ パッケージがあるのは知ってたけど ｀deadgrep｀ が増えてた :逆立ちでにこっ:
https://melpa.org/#/?q=ripgrep
melpa.org
MELPA
The largest and most up-to-date repository of Emacs packages.

tak.kunihiro [15:30]
http://lists.gnu.org/archive/html/help-gnu-emacs/2018-07/msg00092.html
本家で相談したところ、難しいとのことです。自分の力では無理そうです。

syohex [15:34]
なるほど.

takaxp [15:36]
というか，それは，超重要な情報な気がする…
MS-Win では，M-x grep だけがダメなのか，それとも他の grep 系コマンドもダメなのか，このあたりどうなんでしょう．

syohex [15:41]
｀M-x grep｀というか grepの Windows向けの実装がどうなっているからですかね. 今どきのツールだと内部的に UTF-8に変換しそうだし, うまくいきそうに思えますが. 逆に occurとかの方がちゃんと動くんじゃないかな, Windowsだと.

takaxp [15:43]
あー．しるばーさーちゃーなら大丈夫って理解でOKですかね．tadsan様 も ｀M-x ag｀ しているということですし． （編集済み） 

syohex [15:44]
PCREにこだわりがなければ, Windowsだと導入が簡単な rg(Rust)や pt(Go)の実装のものが良いでしょうね.

takaxp [15:44]
ふむφ(. _. )．rg ってWinだと導入楽なんですかw

syohex [15:45]
ビルド済みのがあるので. Rustだとクロスビルドが楽と思われる.

takaxp [15:46]
おお．(個人的に)Mac で失敗しまくってたので，これも有益な情報です( ' -’)b （編集済み） 

kosh [15:54]
ag, rg あたりはパッケージからインストールする方法もあります https://chocolatey.org/packages/ripgrep

tak.kunihiro [15:58]
Region & Language -> Region Settings -> x Beta: Use Unicode UTF-8 for worldwide language support （編集済み） 
うまくいきました。

takaxp [16:01]
:ヒー:

tyru [20:28]
#random に参加しました。

tak.kunihiro [21:56]
まとめ -- c:/msys64/usr/bin/grep を用いた日本語検索

cmd> setx LC_ALL en_US.UTF-8
cmd> c:/msys64/usr/bin/grep -n "こんにちは" hello.txt

bash> export LC_ALL=en_US.UTF-8
bash> /c/msys64/usr/bin/grep -n "こんにちは" hello.txt

check `Beta: Use Unicode UTF-8 for worldwide language support'
M-x grep
grep -n こんにちは hello.txt

** 2018/08/06
conao3 [15:47]
最近？use-packageに:magicというキーワードが追加されました。
macroexpandでは下記のように展開されます。

magic-mode-alistとauto-mode-alistにはどんな違いがあるんでしょうか？
magic-fallback-mode-alistというものもあるようです。

正規表現が使えるよ的なことが書いてあるかと思うんですが、
普通のauto-mode-alistも使えるよな。。？と思って混乱してます。

 ｀｀｀emacs-lisp
#+header: :exports both :results code
#+BEGIN_SRC emacs-lisp
  (macroexpand '(use-package pdf-tools
                  :load-path "site-lisp/pdf-tools/lisp"
                  :magic ("%PDF" . pdf-view-mode)
                  :magic-fallback ("%pdf" . pdf-view-mode)
                  :config (pdf-tools-install)))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
(progn
  (eval-and-compile
    (add-to-list 'load-path "/Users/conao/.emacs.d/v25/site-lisp/pdf-tools/lisp"))
  (unless
      (fboundp 'pdf-view-mode)
    (autoload #'pdf-view-mode "pdf-tools" nil t))
  (eval-after-load 'pdf-tools
    '(progn
       (pdf-tools-install)
       t))
  (add-to-list 'magic-fallback-mode-alist
               '("%pdf" . pdf-view-mode))
  (add-to-list 'magic-mode-alist
               '("%PDF" . pdf-view-mode)))
#+END_SRC｀｀｀
（編集済み）

tarao [09:07]
｀auto-mode-alist｀ はファイル名にマッチしてモードを決めるけど、 ｀magic-mode-alist｀ はバッファの先頭を見て決めるやつのはず?

takaxp [10:27]
ImageMagick の magic number を インスパイアかな
https://jwiegley.github.io/use-package/keywords/
φ(. _. ) Similar to :mode and :interpreter, you can also use :magic and :magic-fallback to cause certain function to be run if the beginning of a file matches a given regular expression.
jwiegley.github.io
Keywords — use-package
A use-package declaration for simplifying your .emacs

tadsan [10:33]
ImageMagickは特に関係ないのでは…? https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%B8%E3%83%83%E3%82%AF%E3%83%8A%E3%83%B3%E3%83%90%E3%83%BC_(%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88%E8%AD%98%E5%88%A5%E5%AD%90)
Wikipedia
マジックナンバー (フォーマット識別子)
マジックナンバーとは、ファイルなどオブジェクト類の形式を識別するもの、フォーマット識別子のことである。
なお、本項内でのマジックナンバーの具体的な値の表記には、特記無い限り16進表記を用いる。
ジャーゴンファイル http://www.catb.org/~esr/jargon/html/M/magic-number.html
こっちの説明ではPDP-11が言及されてるから、そういう時代の用語っぽい

takaxp [10:36]
まぁそうねぇ ImageMagick 関係ないはそうかもね（関係はあるけど定義ではないという意味）
https://ja.wikipedia.org/wiki/PNM_(%E7%94%BB%E5%83%8F%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)
Wikipedia
PNM (画像フォーマット)
PNM (Portable aNyMap 形式、Netpbm形式) という名前で指される画像形式は、特定の一種類の画像フォーマットではなく、3種類の画像形式をまとめて呼ぶときに使われる。これらの形式は、それぞれ portable pixmap format (PPM 形式)、portable graymap format (PGM 形式)、portable bitmap format (PBM 形式) と呼ばれ、どれも異なるプラットフォーム間でも高い互換性を保てる画像形式として開発されたものである。
何れにせよ，拡張子があてにならない時に，MIME Type登録じゃない方法でペイロードの中身を見極めることができます．

conao3 [10:41]
なるほど！ありがとうございます。

takaxp [10:42]
> ImageMagick の magic number を インスパイアかな
ImageMagick の magic number 周りの実装をインスパイアかな
言葉足りずか :あっかんべえ:
加えて wikipedia 的には，ハードコーディングを表す用語とは違う的な扱いだけど，ホントのところ(歴史的経緯)はどうなんでしょうね〜
https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%B8%E3%83%83%E3%82%AF%E3%83%8A%E3%83%B3%E3%83%90%E3%83%BC_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)
Wikipedia
マジックナンバー (プログラム)
プログラムにおけるマジックナンバー（英: magic number、魔法の数字）とは、何らかの識別子もしくは定数として用いられる、プログラムのソースコード中に書かれた具体的な数値である。そのプログラムを書いた時点では製作者は数値の意図を把握しているが、他のプログラマーまたは製作者本人がマジックナンバーの意図を忘れたときに閲覧すると「この数字の意味はわからないが、とにかくプログラムは正しく動く。まるで魔法の数字だ」という皮肉を含む。

tadsan [11:07]
｀magic-mode-alist｀ が14年前に追加されたことはわかった
https://github.com/emacs-mirror/emacs/commit/4ac1d37a80316cc0a013326f1ebbdfe166d4928a

takaxp [11:17]
https://www.gnu.org/gnu/rms-lisp.ja.html
RMS「Lispでなにかをやってみるチャンスの最初は、ハーバードの新入生の時で、PDP-11のためにLispインタプリタを書いた時です。」

tadsan [11:21]
「ハッカーズ」を読みましょう

takaxp [11:23]
Screen Shot 2018-08-06 at 11.23.22.png 

LOL

znz [11:24]
imagemagick よりも file コマンドの libmagic の方が近いんじゃないのかなあ。

tadsan [11:25]
そう思う

** 2018/08/08
tadsan [13:44]
Emacs Lispで現在位置のUTF-8でのオフセットをいい感じにとるのはどうすればいいんだ… と非常に苦しんでる
非常にださいけど ｀wc -c｀ を呼ぶ力技
｀｀｀(defun point-bytes ()
  "Return value of byte offset in UTF-8, as an integer."
  (let ((buf (current-buffer)) tmp)
    (with-temp-buffer
      (setq tmp (current-buffer))
      (string-to-number
       (s-trim
        (with-current-buffer (b-duplicate buf
                                          (b-erase (get-buffer-create "a"))
                                          :end 'point+1)
          (shell-command-on-region (point-min) (point-max) "wc -c" nil t)
          (buffer-substring-no-properties (point-min) (point-max))))))))｀｀｀
コメント間違ってるな… UTF-8である必要はない
しかしEmacs(Mule)にとってはUTF-8も外部文字コードなのでネイティブでこのAPIを持ってないのは、まあそうなのかもしれないけど
そうそう、バッファ処理がめんどくさいので ｀b.el｀ を作ってる
https://github.com/emacs-php/b.el
emacs-php/b.el
Utility functions for buffer manipulation
Language
Emacs Lisp
Last updated
7 minutes ago
emacs-php/b.el2018年7月26日投稿したメンバー: GitHub

tadsan [14:17]
ちなみに、これでは騙されてくれません。残念。
｀｀｀(let ((buffer-file-coding-system 'no-conversion)) (point))｀｀｀

znz [14:56]
現在位置の取り方を知らないので全体になるけど ｀(length (encode-coding-string (buffer-substring-no-properties (point-min) (point-max)) 'utf-8))｀ という感じで utf-8 に encode して length でいけないかなあ。

tadsan [15:00]
あーなるほど ｀encode-coding-string｀

tadsan [15:07]
｀point｀ との互換性で微調整したいけど、こんな感じで任意のエンコーディングでいける
｀｀｀(length (encode-coding-string (buffer-substring-no-properties (point-min) (point)) buffer-file-coding-system))｀｀｀

kosh [17:04]
｀(position-bytes (point))｀ が使えるかも （編集済み） 

tadsan [17:13]
｀position-bytes｀ も ｀byte-to-position｀ もある…！ (神)
ちゃんと期待通りの値を返してくれてそうだ… よかった

kosh [17:34]
若干回りくどいけどこういう方法も見つけた
｀｀｀(with-current-buffer "*buffer*"
  (let ((multibyte-p enable-multibyte-characters))
    (unwind-protect
        (progn
          (set-buffer-multibyte nil)
          (message "offset=%d" (point-max)))
      (set-buffer-multibyte multibyte-p))))｀｀｀
（編集済み）

tadsan [17:35]
な、なるほど… あんまりやりたくない手口だ
それはそうとコマンドの入力にパイプから渡して出力を整形して… とやるとバッファが何がなんだかって感じになるので厳しい

tadsan [10:15]
というわけで @kosh さんのお蔭で ｀phpactor.el:0.1.0｀ がリリースできました
https://github.com/emacs-php/phpactor.el
emacs-php/phpactor.el
Interfate to Phpactor (an intelligent code-completion and refactoring tool for PHP)
Stars
6
Language
Emacs Lisp
emacs-php/phpactor.el2018年4月16日投稿したメンバー: GitHub

** 2018/09/18
tadsan [22:10]
｀emacs -q｀ で起動すると爆速すぎて、この領域を取り戻したくなる

syohex [22:13]
爆速なら ｀emacs -Q｀の方がよいかと.

yoshitia [22:13]
そりゃそうですね＞Emacsも同じだがや

takaxp [22:15]
https://qiita.com/tadsan/items/4f5743de21b7aa06ca35
Qiita
Emacsを起動する - Qiita
この記事は記憶が正しければ[Emacs Advent Calendar 2015](http://qiita.com/advent-calendar/2015/emacs)の何日めかのつもりでしたが、あれ、目から水が… さて、気をと...
｀-quick｀ と ｀-no-init-file｀ の違いとφ(. _. )

tadsan [22:21]
普段の数秒待たされるのに比べればどっちも誤差…
実測は倍くらい差があった
｀｀｀% emacs -q -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'
0.003986
% emacs -q -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'
0.003489
% emacs -q -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'
0.003302
% emacs -Q -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'
0.001553
% emacs -Q -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'
0.001894
% emacs -Q -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'
0.001498｀｀｀

takaxp [22:24]
うちの フルアーマー Emacs たん．
｀｀｀[taka@mini(22:23)~]% /Applications/Emacs.app/Contents/MacOS/Emacs -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'
0.003982%｀｀｀
（編集済み）
｀｀｀[taka@mini(22:26)~]% /Applications/Emacs.app/Contents/MacOS/Emacs -l ~/.emacs -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'
This host is mini.local (message from private.el)
0.004694%｀｀｀
init 読み込んでなかったw
なんか違う

tadsan [22:31]
自分でやっといてなんだけど、この計測方法は全然信用ならん
｀｀｀% time (emacs -l ~/.emacs.d/init.el -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))')
Loading /Users/megurine/.emacs.d/site-lisp/site-lisp-autoloads.el (source)...
Loading /Users/megurine/repo/emacs/php-mode/php-mode-autoloads.el (source)...
Source file '/Users/megurine/.emacs.d/elpa/f-20180106.922/f.el' newer than byte-compiled file
Key Chord mode on
Turn on helm-projectile key bindings
[yas] Prepared just-in-time loading of snippets successfully.
Loading /Users/megurine/.emacs.d/recentf...
0.005078
( emacs -nw -l ~/.emacs.d/init.el -batch -eval ; )  3.67s user 1.98s system 99% cpu 5.676 total｀｀｀

takaxp [22:33]
｀｀｀[taka@mini(22:33)~]% time (emacs -l ~/.emacs -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))')
This host is mini.local (message from private.el)
0.003871( /Applications/Emacs.app/Contents/MacOS/Emacs -l ~/.emacs -batch -eval ; )  0.11s user 0.03s system 94% cpu 0.139 total｀｀｀
合ってる
普通に立ち上げて， ｀(emacs-init-time)｀ が ｀0.1 seconds｀ になるので．
0.003871 は変．

takaxp [23:00]
｀｀｀emacs -nw -l ~/.emacs -eval '(princ (float-time (time-subtract after-init-time before-init-time)))'｀｀｀
ならOK．バッチモードだと ｀after-init-time｀ に ｀(current-time)｀ 入れるタイミングが早いっぽい（後段で代入されていない感じ）

takaxp [23:06]
https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html
22番で抜ける前に 16番で値入れてるはずですけどね．最終的に nil じゃないし．

takaxp [23:20]
init.el の最終行に  ｀(setq after-init-time (current-time))｀ 加えたらそれっぽい値になった．
｀｀｀[taka@mini(23:19)~]% time (emacs -l ~/.emacs -batch -eval '(princ (float-time (time-subtract after-init-time before-init-time)))')
This host is mini.local (message from private.el)
0.072386( /Applications/Emacs.app/Contents/MacOS/Emacs -l ~/.emacs -batch -eval ; )  0.10s user 0.03s system 95% cpu 0.133 total｀｀｀

mhatta [12:42]
｀emacs-init-time｀ 知らんかった…
普段 emacsclient だから一瞬なのであまり気にしなかったけど、こうしてみると普通は 6.5 sec で ｀emacs -Q｀ だと 0.2 sec だから、なんとかせなならんという気になるな
というか何がそんなに時間食ってるんだろうなあ

tadsan [13:11]
これで調べましょう https://github.com/dholm/benchmark-init-el
dholm/benchmark-init-el
Benchmark your Emacs initialization
Stars
83
Language
Emacs Lisp
dholm/benchmark-init-el2013年10月3日投稿したメンバー: GitHub

mhatta [16:06]
とりあえず6.5 secから2.8 secにはなった
これ以上削るにはIvyだけどuse-packageのdeferが効かないな
｀benchmark-init-el｀便利ですね

sesame [18:41]
#random に参加しました。

tak.kunihiro [18:53]
emacs --daemon だと、C-x C-c でも大丈夫のようです。
間違って最後のフレームを閉じても大丈夫。ただし -nw 扱いなので設定に工夫が必要との感触です。

** 2018/12/07
conao3 [10:08]
書きました。
アドベントカレンダー初めてで、投稿したもののどうやってカレンダーに反映するのだろうと悩みました。。
https://qiita.com/conao3/items/851f6dea9e94ce73f385
Qiita
Makefileで.emacs.dの理想的なディレクトリ構造を生成する話 - Qiita
# はじめに この記事は [Emacs Advent Calendar 2018 - Qiita](https://qiita.com/advent-calendar/2018/emacs) の7日目の記事です。 前日はtad...

tak.kunihiro [11:25]
拝見しました。この運用だと emacsclient の取り扱いが悩ましいのではないでしょうか。

conao3 [11:28]
emacs-clientはemacs26のものしかパスに入ってないです。
普段ドラッグ&ドロップでファイル開いてるのでemacs-client使ってみたい気持ちはあるんですが、、

tak.kunihiro [11:29]
自分は emacs-22 は修行の機会だと思って、素で使っています。ただし emacs-26 と emacs-27 を両立させたいので、elpa-27 のみ別途作成しています。 （編集済み） 

tak.kunihiro [11:30]
emacs-22 は macOS に標準で入ってるので、インストールしなくていいという良いことがあります。
emacsclient は “server” ファイルを参照するのですが、user-emacs-directory を変更すると emacsclient 起動時に明示的に “server” ファイルを指定する必要がでてきます。 （編集済み） 
(setq server-auth-dir “~/.emacs.d/server/“) で OK なので悩ましいながら問題なしでした。

conao3 [11:35]
僕も昔はその運用でした。しかしel-screen-persistがバージョン違いでバグったりと問題が出てきたのでuser-emacs-directoryごと分離することになった感じですね。
emacs-clientの件は追記する必要がありそうですね

tak.kunihiro [11:51]
alias dired=“$EMACSCLIENT . --create-frame --no-wait --alternate-editor=$RUNEMACS”

tak.kunihiro [12月7日 11:52]
こんな感じで使ってます。ヴァージョン違いの emacs があるのも大変ですが、いくつかの環境にあわせようと思うと $EMACSCLIENT と $RUNEMACS の指定が大変であります。

conao3 [29日前]
帰宅して試してみたのですが、普通に動いているようです。
GUI版の ｀(server-start)｀, ターミナル版の ｀emacs --daemon｀ について、ターミナルから ｀emacsclient -n tmp.el｀ 、.gitconfigの ｀editor =  "emacsclient -t" --alternate-editor emacs｀ で確認しました。

そしてserverファイルを参照するとのことですが、私の環境では作られているように見えません。どのような使い方で問題が出るのでしょうか。。？


tak.kunihiro [28日前]
--server-file=SERVER-FILE (info “(emacs) emacsclient Options”) で明示的にサーバーファイルを指定しなくても、現在起動中のプロセスで開けるということでしょうか。とすると、私の理解が間違いであります。爆速で別のプロセスが起動しているということではないでしょうか。


conao3 [28日前]
爆速で別のプロセスが起動してるわけではないですね。 ｀(server-start)｀ してるEmacsがあって、 ｀emacsclient -e "(princ \"a\")"｀ とすると、ターミナルとEmacsのモードラインにaが表示されるので。


tak.kunihiro [27日前]
こちらでも user-emacs-directory を変更した状態にて，--server-file を明示的に指定せずとも emacsclient が既存プロセスを用いて起動することを確認しました．

わたしの認識違いであり，一連のコメント，起点のところからおかしいものでした．失礼いたしました．お詫びいたします．:ゾッ:

チャンネルにも投稿済
tak.kunihiro [27日前]
以上は emacsclient on macOS の話なのですが、emacsclient on Windows だと明示的に指定しないと、新しいプロセスを起動するようです。

** 2018/12/08
grugrut [11:03]
ずっと.emacsを分割してたけど、細かくわけすぎててcompany-ほげほげとかob-ほげほげとかを、どう管理するか迷うようになってきたので、思いきって ｀init.el｀ オンリーにしてみました （編集済み） 
これはこれで、ファイルの中で迷子になりそう。。

conao3 [11:05]
実際1ファイルのほうがファイル検索、オープン、リードがそれぞれ発生しないので早そうです。
私の場合、あまり考えずにパッケージを入れていたのであまりでかい.elを開くとカクつくんですよね。。
迷子になるという話も同意できて、結局大きく5つに分割して編集して、EmacsはMakefileが1つにくっつけたファイルを読む運用になっています。

grugrut [11:08]
なるほど

conao3 [11:08]
ページ区切り文字を使えば解消されるかもしれません。使おうと思ってて後回しになってます。。

blue [11:09]
(僕は分割せずにinit.el全部のせです)
そろそろuse-packageとか使って整理したい

grugrut [11:11]
ファイルくっつけただけで、ロード時間が3秒早くなりました
use-packageは、遅延ロードとか意識しなくてもできるので便利ですが、githubとかから取ってこれないのが

blue [11:14]
あーなるほど。

conao3 [11:14]
githubからとってくる時は ｀:init｀ 節にel-getを書く運用をしてました。いま全部消えてますけど笑 （編集済み） 

blue [11:14]
use-package、Melpaにあるやつならensureで取ってこれる、って感じですかね？(無知

conao3 [11:15]
use-packageは普通に ｀:ensure t｀ するとpackage.el使ってダウンロード、コンパイルしようとします。
｀ensure t｀ したとき、どんなプログラム使うかを設定できて、話題の ｀straight.el｀ 使うようにも出来ます。
https://github.com/raxod502/straight.el
raxod502/straight.el
:四葉のクローバー: Next-generation, purely functional package manager for the Emacs hacker.
Stars
466
Language
Emacs Lisp
raxod502/straight.el2017年1月4日投稿したメンバー: GitHub

blue [11:16]
おお！情報ありがとうございます

conao3 [11:18]
use-packageはただのマクロなので、
｀｀｀(use-package foo
:init INIT
:config CONFIG)｀｀｀
が
｀｀｀(progn
INIT
(require 'foo)
CONFIG)｀｀｀
になるだけですね。他のキーワードは時間が出来た時にマニュアル見て改善していけば ｀use-package｀ 使ってるっぽいinit.elになりますね
（ ｀:init｀ ｀:config｀ キーワードくらいならleaf.elでも実装できてます）
https://github.com/conao3/leaf.el
conao3/leaf.el
Support your setting init.el like use-pacage
Stars
1
Language
Emacs Lisp
conao3/leaf.el2018年10月24日投稿したメンバー: GitHub

grugrut [11:20]
straight.el使ってみようと思いつつ、そういえばさわれてませんでした

conao3 [11:21]
実際 straight.el に全部書き換えましたが、githubのレポジトリ全部落とすので、初期起動が遅すぎて全部消してしまいました←

grugrut [11:24]
うーん

conao3 [11:25]
｀package.el｀ は最新版を落としてくるので、出先に行って初期化出来て、「よーしやるぞ」と思ったときにバグ踏むと萎えるんですよね。。
バージョン固定は ｀cask｀ や ｀el-get｀ ならできるのでそちらを使うが吉？
（それともこういう不満を解決したfeather.elというパッケージを作ってるので、その開発を待つ？）
「Emacsにはパッケージマネージャデフォルトであるから」って言いたくても、結局細かい挙動が許容できなくて移住したり新しいの作っちゃうかみたいになるんですよね。。
@tadsan さんも悩んでます。今もQuelpa使ってるんだろうか。。？
https://qiita.com/tadsan/items/6c658cc471be61cbc8f6
https://qiita.com/tadsan/items/99bd9a5bbdb36def13e2
Qiita
2015年Emacsパッケージ事情 - Qiita
Emacsは「拡張可能なテキストエディタ」と呼ばれ[^1]、エディタとしての基本的な機能ですらユーザーが柔軟にカスタマイズできます。 最初から同梱されてるライブラリだけではなくWebにあるEmacs Lispパッケージを導入すること...
Qiita
CaskからQuelpaに移行する - Qiita
自分の環境でCaskが限界に達して僕の力ではデバッグも諦めたのでQuelpaに移住したメモです。 ## 概要 Emacsの標準パッケージ管理ツールとして`package.el`があります。これは**ELPA**(Emacs Lis...

tadsan [11:34]
https://github.com/zonuexe/dotfiles/blob/master/.emacs.d/my-packages.el
.emacs.d/my-packages.el
```
;;; Code:

(require 'package)
(require 'quelpa (locate-user-emacs-file "site-lisp/quelpa/quelpa"))

(require 'recentf)

(setq recentf-auto-cleanup 'never)

(add-to-list 'recentf-exclude "/elpa/.*-autoloads\\.el\\'")
(add-to-list 'recentf-exclude "/quelpa/packages/.*\\.el\\'")

(add-to-list 'package-archives '("melpa" . "https://www.mirrorservice.org/sites/melpa.org/packages/") t)
(package-initialize)
 もっと表示する
zonuexe/dotfiles投稿したメンバー: GitHub
基本は package.el で、MELPAにないやつだけ Quelpa です

conao3 [11:39]
ありがとうございます。なるほど。

grugrut [11:43]
quelpaありましたね。

conao3 [11:45]
｀quelpa｀ も ｀use-package｀ 用のハンドラを提供していて、 ｀use-package｀ を使ってたら移行しやすいです。
私も前見つけたんですが、なぜか採用しなかったんですよね。。なぜだったかな

tadsan [11:46]
Quelpa、基本リポジトリ全部持ってくるのでディスクかなり消費する

grugrut [11:47]
>最初のインストール時はかなり時間かかります (数十分)
これが毎回でやめてしまったのですが、たぶん今思うと設定ミス

conao3 [11:47]
｀straight｀ もそういう思想ですね。辛い。。前回試した時は30分以上かかりましたね

tadsan [11:48]
あとですね、Caskの方はあれからかなり手が入ったので今は安定してます。

conao3 [11:48]
それはすばらしいですね。
ネットからのフェッチって単一プロセスで落としてるから遅いと思ってて、4つくらいなら接続を並列にするほど早くなると思うんですよね。
フェッチは置いておいても、Aがフェッチし終わった後、Aをコンパイルしてる時に裏でBのフェッチは開始してもいいと思ってて、そこらへんをfeather.elではしようと思ってます

tadsan [11:52]
これはPHPだけどそういう発想 http://blog.tojiru.net/article/432944706.html
Architect Note
composerを速くするプラグイン・prestissimoを作った
composerが遅くてお嘆きの日本のPHPerの皆さんこんにちは。 表題の通り、追加インストールするだけでcomposerが速くなるプラグインを作りました。 # インストール $ composer global require hirak/prestissimo # アンインストール $ composer global remove hirak/prestissimo インストールした状態でlarave…

conao3 [11:56]
あ、PHPではあるんですね。
実はこの発想はMakeから得ていて、Makeを適切に設定して ｀-j4｀ とかすれば勝手にやってくれます。（パッケージ間の依存がない場合）
パッケージ間の依存がある場合、依存関係を動的に作ったりとちょっと大変になるので、feather.elなる新しいパッケージマネージャつくっちゃうかとなった感じです。

** 2018/12/09
blue [17:55]
｀(setq markdown-fontify-code-blocks-natively t)｀ code blockにシンタックスハイライト

** 2018/12/10
conao3 [11:41]
そういえば簡単な変更で、postpone.el用のキーワードをleaf.elに入れられるかもしれないと思いました。 ｀:postpone t｀ とかしたパッケージはpostponeを有効にするとか。
あと起動してすごく時間がたったEmacs（2日とか）で初めてOrgファイルを開いたとき、 ｀with-eval-after-load｀ で待たされるんですが、「今までいくらでも読み込む時間あったでしょ。。」と少し悲しい気分になるのどうにかしたいです。。

takaxp [11:46]
おそらく leaf.el における postpone 効果は，use-package の ｀:defer｀ キーワードだと思います．
2日も経ってるならすべての設定読み込んでおけやーっていうのは，midnight.el に何か仕込めば解決しそう．

conao3 [11:51]
なるほど。 midnight.el というパッケージがあるんですね。。調べてみます！

** 2018/12/10
tadsan [11:59]
追記(まだ正式に公開してない記事です) https://qiita.com/tadsan/private/17d32514b81f1e8f208a
Qiita
Emacsからの安全なシェルコマンド実行 - Qiita
どうも、Emacs Lispアドベントカレンダーです。嘘です。 Emacsから外部コマンド(プロセス)を起動する方法として、大別すると「コマンドラインシェルで実行したい文字列(コマンド名と引数をまるごと含む)を渡す関数」 (**sh...

conao3 [12:03]
MELPAのパッケージはpurcell氏が目で見ているんでしたっけ。実際elispのパッケージは開発者が埋め込んだ任意コードをすぐユーザーのPCで実行できますよね。。
一回取り込んだパッケージがpushされることに対してはノーマーク？なのですかね

tadsan [12:05]
そう。レシピをマージした後は仕込み放題です。ばれたら外されることはありうるけど。
極端な話、SSH秘密鍵をcurlでどこかに送るとかもできる

conao3 [12:07]
たしかに、、簡単ですね。。

tadsan [12:07]
わかりやすく書かれてたらまだしも、難読化の方法はいろいろあるしね
完全に性善説の世界

conao3 [12:08]
GitHub公開鍵が「本当の意味で」公開されてることは有名ですが、秘密鍵とマッチする公開鍵探して、その人のレポジトリを完全に支配下にできますね、、

tadsan [12:09]
まあそこは、秘密鍵にはパスフレーズをつければ防げる
パスフレーズ入力省略のために怪しげな設定ファイルとかに平文で書いてたら、あとはお祈り

conao3 [12:10]
+やばい+

** 2018/12/26
tomoya [10:48]
early-init.el 使えますね

｀｀｀(message "Start early initialization...")

(message "window-system: %s" window-system)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(menu-bar-mode nil)
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil))

(message "Done early initialization")｀｀｀

｀｀｀Start early initialization...
window-system: nil
Done early initialization｀｀｀
ちゃんとオフになってる
Pasted image at 2018-12-26, 10:49 AM 

でも emacs-init-time は特に変わらず

takaxp [10:49]
お．やはりGUI絡みの設定を，GUI構築用のコードが読まれる前に設定できるようになるんですね．

conao3 [10:50]
やっと合点しました。そういう用途に使うのか。
init.elの最初の方に書くのと何が違うのか、忘年会のときには分からなかったんですよね。。

tomoya [10:51]
わかりやすく言えば、初期値の設定ですかね
｀｀｀** Emacs can now be configured using an early init file.
The file is called 'early-init.el', in 'user-emacs-directory'.  It is
loaded very early in the startup process: before graphical elements
such as the tool bar are initialized, and before the package manager
is initialized.  The primary purpose is to allow customizing how the
package system is initialized given that initialization now happens
before loading the regular init file (see below).

We recommend against putting any customizations in this file that
don't need to be set up before initializing installed add-on packages,
because the early init file is read too early into the startup
process, and some important parts of the Emacs session, such as
'window-system' and other GUI features, are not yet set up, which could
make some customization fail to work.｀｀｀

takaxp [10:52]
例えば，ツールバーは確かに↑の式で起動中に変えられますけど，先行してGUIは構築されていて，後から消すことになるので，画面が二度レンダリングされる．
Nativeコード上は単なるフラグなので，early-init で先にこのフラグを倒すんじゃないかと推察してました． （編集済み） 

conao3 [10:54]
startup.elで読み込んでるんですかね。startup.elを読む込む前にすでにGUIの初期化は終わってるんでしょうか。。

takaxp [10:54]
終わってるはず

tomoya [10:54]
｀and before the package manager is initialized｀ なので、leaf.el でも何にかに使えるのでは? (使えるのは 27 からだけど)

conao3 [10:56]
うーん。どうなんでしょうか。 ｀leaf.el｀ やそのパッケージマネージャの ｀feather.el｀ ではそもそも ｀(package-initialize)｀ を呼ばないことを推奨する予定なので

tomoya [10:57]
例えば、強制的に package.el を殺すとかできそうですよ

conao3 [10:58]
｀(package-initialize)｀ をユーザーが呼ぶ前、 ｀package.el｀ を読み込んだ瞬間になにか暗黙の処理が走っているとかだと有用かもしれません。
そんなパッケージの作り方を標準パッケージがしているのだろうか。。

takaxp [10:59]
｀init.el｀ に ｀;; (package-initialize)｀  って書かないといけないのをなんとかしたい

conao3 [11:00]
あれ辛いですね。 ｀(package-initialize)｀ を書き込んでる関数があるので、 ｀ignore｀ とかで上書きしてしまうのも手かもしれません
具体的には ｀(package-initialize)｀ が ｀(package--ensure-init-file)｀ を呼んでいて、そこでinit.elを調査して、ないようなら追記しています。

takaxp [11:05]
｀｀｀Documentation
Load Emacs Lisp packages, and activate them.

The variable package-load-list controls which packages to load.
If optional arg NO-ACTIVATE is non-nil, don't activate packages.
If user-init-file does not mention (package-initialize), add
it to the file.
If called as part of loading user-init-file, set
package-enable-at-startup to nil, to prevent accidentally
loading packages twice.
It is not necessary to adjust load-path or require the
individual packages after calling package-initialize -- this is
taken care of by package-initialize.｀｀｀

takaxp [11:14]
んー
｀｀｀;; (package-initialize)｀｀｀
を消して
｀｀｀(defun package--ensure-init-file ()
  (setq package--init-file-ensured t))｀｀｀
にしたら，少し起動速くなったかもw

conao3 [11:20]
起動時(init.elの実行時)には ｀package--ensure-init-file｀ は呼ばれてない？かもしれません。 ｀after-init-time｀ はinit.elが全部実行された後にセットされる変数ですよね？

takaxp [11:22]
5. Load user’s init files
6. Set after-init-time = (current-time)
7. Run after-init-hook
8. Run emacs-startup-hook
init.el ロード後にセットは真．ただ
init.el から ｀;; (package-initialize)｀ を消すと，書き込めと警告出たはず（が今は出ない）

conao3 [11:29]
では ｀after-init-time｀ のチェックをするのは最近の変更点ぽいですね。確かに理にかなった変更です。

takaxp [11:31]
たぶん見てるのは
  ｀｀｀(if after-init-time
      (package--ensure-init-file)
    ;; If `package-initialize' is before we finished loading the init
    ;; file, it's obvious we don't need to ensure-init.
    (setq package--init-file-ensured t
          ;; And likely we don't need to run it again after init.
          package-enable-at-startup nil))｀｀｀
ですよね．

conao3 [11:31]
そうですね。

takaxp [11:34]
起動速度に影響してないのでは？は確かにそうかも．

conao3 [11:34]
逆に今のmastarではinit.elで呼ぶと警告出るみたいです笑
https://github.com/emacs-mirror/emacs/blame/master/lisp/emacs-lisp/package.el#L1470
｀(package-initialize)｀ のコードが全面的に書き換わってる。。

takaxp [11:35]
ホントだw

conao3 [11:36]
これもearly init fileの対応らしいです。色んなとこに影響出てますね。。

takaxp [11:36]
｀package--ensure-init-file｀ 自体消えてるっぽい

conao3 [11:37]
そう考えたら先のNEWSはこの事を言っていたのか。。。
startup.el が package.el の ｀(package-initialize)｀ を呼んでますね。。ほんとに組み込みになったのか。
https://github.com/emacs-mirror/emacs/commit/6dfdf0c9e8e4aca77b148db8d009c862389c64d3

takaxp [11:41]
んー．package.el 依存なら確かに quickstart になるのかもしれないけど，そうじゃない場合はどうなんだろう…

conao3 [11:45]
あ、quickstart云々はpackage.el内部の話で、startup.elで ｀(package-initialize)｀ を呼ぶようになったのはこの変更です。
https://github.com/emacs-mirror/emacs/commit/24acb31c04b4048b85311d794e600ecd7ce60d3b

takaxp [11:46]
んむ．
https://www.reddit.com/r/emacs/comments/1rdstn/set_packageenableatstartup_to_nil_for_slightly/
reddit
set package-enable-at-startup to nil for slightly faster startup
If your init file looks like this: ;; ... (package-initialize) ;; ... you can change it to: ;; ... ...
新しい ｀package-initialize｀ のDOCSTRINGの内容と合致．
こんなんよく気がつくな…

conao3 [11:50]
このredditの記事見て、本体が ｀after-init-time｀ のチェックをするようになったのかもしれません。

takaxp [11:51]
5年前のトピックですし，それも符合しますね．

conao3 [11:53]
startup.elのblameをポチポチしてたら、10ヶ月前のearly init fileで全面的に書き換わる前は、いきなり18年前のコードとして表示されて歴史を感じました。。

** 2018/12/26
takaxp [12:53]
Screen_Shot_2018-12-26_at_12_52_30.png 


conao3 [12:53]
うっ

takaxp [12:54]
これ，なんで残るんですかねw

conao3 [12:55]
ああ、デバッガーが起動してるからです。別スレの話で ｀(mapconcat 'identity｀ って ｀concat｀ と一緒なんじゃないかなと思って調べたときのエラーですね。
（つまりあの時から作業は全く進捗していない）

takaxp [12:56]
そうなんですよね．デバッガ抜けると取れるのかな．

conao3 [12:57]
取れます。再帰編集のマーカーなので、再帰編集がない状態だと表示されませんし、逆に再帰編集が深くなればマーカーが入れ子になります

takaxp [12:58]
お，そうなんですね．いつも ｀debug-on-error｀ 付けるとそれになるんで，気になってました．

conao3 [13:00]
back-traceバッファは単にバックトレースを表示するだけでなくて、そこでいろいろな操作ができるようですけど、あまり活用できていません。。
再帰編集や ｀narrow-to-region｀ は便利なんだろうなと思いつつ使えていない機能の筆頭ですね

buzztaiki [13:35]
｀exit-recursive-edit｀ すると全部抜けますよ。

takaxp [13:38]
おお( ' -’)b ｀C-M-c｀ あざす
